{
  return new DiscoInfoProvider(){
    final ArrayList<Element> identities=new ArrayList<Element>();
    public Iterator<Element> getIdentities(    String name,    String node,    JID senderJID){
      if (node != null && serverNodeProviders.get(node) != null) {
        return serverNodeProviders.get(node).getIdentities(name,node,senderJID);
      }
      if (name == null) {
synchronized (identities) {
          if (identities.isEmpty()) {
            Element identity=DocumentHelper.createElement("identity");
            identity.addAttribute("category","server");
            identity.addAttribute("name",JiveGlobals.getProperty("xmpp.server.name","Openfire Server"));
            identity.addAttribute("type","im");
            identities.add(identity);
            for (            Element identityElement : serverIdentities) {
              identities.add(identityElement);
            }
          }
        }
        return identities.iterator();
      }
 else {
        if (SessionManager.getInstance().isAnonymousRoute(name)) {
          return anonymousUserIdentities.iterator();
        }
 else {
          return registeredUserIdentities.iterator();
        }
      }
    }
    public Iterator<String> getFeatures(    String name,    String node,    JID senderJID){
      if (node != null && serverNodeProviders.get(node) != null) {
        return serverNodeProviders.get(node).getFeatures(name,node,senderJID);
      }
      if (name == null) {
        return new HashSet<String>(serverFeatures.keySet()).iterator();
      }
 else {
        return userFeatures.iterator();
      }
    }
    public boolean hasInfo(    String name,    String node,    JID senderJID){
      if (node != null) {
        if (serverNodeProviders.get(node) != null) {
          return serverNodeProviders.get(node).hasInfo(name,node,senderJID);
        }
        return false;
      }
      try {
        return name == null || UserManager.getInstance().getUser(name) != null || SessionManager.getInstance().isAnonymousRoute(name);
      }
 catch (      UserNotFoundException e) {
        return false;
      }
    }
    public DataForm getExtendedInfo(    String name,    String node,    JID senderJID){
      if (node != null && serverNodeProviders.get(node) != null) {
        return serverNodeProviders.get(node).getExtendedInfo(name,node,senderJID);
      }
      return null;
    }
  }
;
}
