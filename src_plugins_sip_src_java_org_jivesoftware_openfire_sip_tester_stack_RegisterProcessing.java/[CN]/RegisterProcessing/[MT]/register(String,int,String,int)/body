{
  try {
    isUnregistering=false;
    FromHeader fromHeader=sipManCallback.getFromHeader(true);
    Address fromAddress=fromHeader.getAddress();
    sipManCallback.fireRegistering(fromAddress.toString());
    SipURI requestURI=null;
    try {
      requestURI=sipManCallback.addressFactory.createSipURI(null,registrarAddress);
    }
 catch (    ParseException ex) {
      throw new CommunicationsException("Bad registrar address:" + registrarAddress,ex);
    }
catch (    NullPointerException ex) {
      sipManCallback.fireUnregistered(fromAddress.getURI().toString() + " (registrar not specified)");
      return;
    }
    requestURI.setPort(registrarPort);
    try {
      requestURI.setTransportParam(registrarTransport);
    }
 catch (    ParseException ex) {
      throw new CommunicationsException(registrarTransport + " is not a valid transport!",ex);
    }
    CallIdHeader callIdHeader=sipManCallback.sipProvider.getNewCallId();
    CSeqHeader cSeqHeader=null;
    try {
      cSeqHeader=sipManCallback.headerFactory.createCSeqHeader(1,Request.REGISTER);
    }
 catch (    ParseException ex) {
      Log.error("register",ex);
    }
catch (    InvalidArgumentException ex) {
      Log.error("register",ex);
    }
    ToHeader toHeader=null;
    try {
      toHeader=sipManCallback.headerFactory.createToHeader(fromAddress,null);
    }
 catch (    ParseException ex) {
      throw new CommunicationsException("Could not create a To header " + "for address:" + fromHeader.getAddress(),ex);
    }
    UserAgentHeader uaHeader=null;
    ArrayList<String> userAgentList=new ArrayList<String>();
    userAgentList.add(SIPConfig.getStackName());
    try {
      uaHeader=sipManCallback.headerFactory.createUserAgentHeader(userAgentList);
    }
 catch (    ParseException ex) {
      throw new CommunicationsException("Could not create a To header " + "for address:" + fromHeader.getAddress(),ex);
    }
    ArrayList viaHeaders=sipManCallback.getLocalViaHeaders();
    MaxForwardsHeader maxForwardsHeader=sipManCallback.getMaxForwardsHeader();
    Request request=null;
    try {
      request=sipManCallback.messageFactory.createRequest(requestURI,Request.REGISTER,callIdHeader,cSeqHeader,fromHeader,toHeader,viaHeaders,maxForwardsHeader);
      request.setHeader(uaHeader);
    }
 catch (    ParseException ex) {
      throw new CommunicationsException("Could not create the register request!",ex);
    }
    ExpiresHeader expHeader=null;
    for (int retry=0; retry < 2; retry++) {
      try {
        expHeader=sipManCallback.headerFactory.createExpiresHeader(expires);
      }
 catch (      InvalidArgumentException ex) {
        if (retry == 0) {
          expires=3600;
          continue;
        }
        throw new CommunicationsException("Invalid registrations expiration parameter - " + expires,ex);
      }
    }
    request.addHeader(expHeader);
    ContactHeader contactHeader=sipManCallback.getRegistrationContactHeader();
    request.addHeader(contactHeader);
    ClientTransaction regTrans=null;
    try {
      regTrans=sipManCallback.sipProvider.getNewClientTransaction(request);
    }
 catch (    TransactionUnavailableException ex) {
      throw new CommunicationsException("Could not create a register transaction!\n" + "Check that the Registrar address is correct!");
    }
    try {
      regTrans.sendRequest();
    }
 catch (    Exception ex) {
      throw new CommunicationsException("Could not send out the register request!",ex);
    }
    this.registerRequest=request;
  }
 catch (  Exception e) {
    Log.error("register",e);
  }
}
