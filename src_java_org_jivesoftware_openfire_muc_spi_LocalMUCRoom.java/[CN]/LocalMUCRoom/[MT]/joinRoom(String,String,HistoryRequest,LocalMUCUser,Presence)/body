{
  if (((MultiUserChatServiceImpl)mucService).getMUCDelegate() != null) {
    if (!((MultiUserChatServiceImpl)mucService).getMUCDelegate().joiningRoom(this,user.getAddress())) {
      throw new UnauthorizedException();
    }
  }
  LocalMUCRole joinRole=null;
  lock.writeLock().lock();
  try {
    if (!canJoinRoom(user)) {
      throw new ServiceUnavailableException();
    }
    final JID bareJID=user.getAddress().asBareJID();
    boolean isOwner=owners.includes(bareJID);
    if (isLocked()) {
      if (!isOwner) {
        throw new RoomLockedException();
      }
    }
    if (occupantsByNickname.containsKey(nickname.toLowerCase())) {
      List<MUCRole> occupants=occupantsByNickname.get(nickname.toLowerCase());
      MUCRole occupant=occupants.size() > 0 ? occupants.get(0) : null;
      if (occupant != null && !occupant.getUserAddress().toBareJID().equals(bareJID.toBareJID())) {
        throw new UserAlreadyExistsException();
      }
    }
    if (isPasswordProtected()) {
      if (password == null || !password.equals(getPassword())) {
        throw new UnauthorizedException();
      }
    }
    if (members.containsValue(nickname.toLowerCase())) {
      if (!nickname.toLowerCase().equals(members.get(bareJID))) {
        throw new ConflictException();
      }
    }
    if (isLoginRestrictedToNickname()) {
      String reservedNickname=members.get(bareJID);
      if (reservedNickname != null && !nickname.toLowerCase().equals(reservedNickname)) {
        throw new NotAcceptableException();
      }
    }
    MUCRole.Role role;
    MUCRole.Affiliation affiliation;
    if (isOwner) {
      role=MUCRole.Role.moderator;
      affiliation=MUCRole.Affiliation.owner;
    }
 else     if (mucService.isSysadmin(bareJID)) {
      role=MUCRole.Role.moderator;
      affiliation=MUCRole.Affiliation.owner;
    }
 else     if (admins.includes(bareJID)) {
      role=MUCRole.Role.moderator;
      affiliation=MUCRole.Affiliation.admin;
    }
 else     if (outcasts.contains(bareJID)) {
      throw new ForbiddenException();
    }
 else     if (members.includesKey(bareJID)) {
      role=MUCRole.Role.participant;
      affiliation=MUCRole.Affiliation.member;
    }
 else     if (outcasts.includes(bareJID)) {
      throw new ForbiddenException();
    }
 else {
      if (isMembersOnly()) {
        throw new RegistrationRequiredException();
      }
      role=(isModerated() ? MUCRole.Role.visitor : MUCRole.Role.participant);
      affiliation=MUCRole.Affiliation.none;
    }
    joinRole=new LocalMUCRole(mucService,this,nickname,role,affiliation,user,presence,router);
    List<MUCRole> occupants=occupantsByNickname.get(nickname.toLowerCase());
    if (occupants == null) {
      occupants=new ArrayList<>();
      occupantsByNickname.put(nickname.toLowerCase(),occupants);
    }
    occupants.add(joinRole);
    List<MUCRole> list=occupantsByBareJID.get(bareJID);
    if (list == null) {
      list=new ArrayList<>();
      occupantsByBareJID.put(bareJID,list);
    }
    list.add(joinRole);
    occupantsByFullJID.put(user.getAddress(),joinRole);
  }
  finally {
    lock.writeLock().unlock();
  }
  CacheFactory.doClusterTask(new OccupantAddedEvent(this,joinRole));
  sendInitialPresences(joinRole);
  boolean isRoomNew=isLocked() && creationDate.getTime() == lockedTime;
  try {
    Presence joinPresence=joinRole.getPresence().createCopy();
    broadcastPresence(joinPresence,true);
  }
 catch (  Exception e) {
    Log.error(LocaleUtils.getLocalizedString("admin.error"),e);
  }
  if (!isRoomNew && isLocked()) {
    Presence presenceItemNotFound=new Presence(Presence.Type.error);
    presenceItemNotFound.setError(PacketError.Condition.item_not_found);
    presenceItemNotFound.setFrom(role.getRoleAddress());
    joinRole.send(presenceItemNotFound);
  }
  if (historyRequest == null) {
    Iterator<Message> history=roomHistory.getMessageHistory();
    while (history.hasNext()) {
      joinRole.send(history.next());
    }
  }
 else {
    historyRequest.sendHistory(joinRole,roomHistory);
  }
  setEmptyDate(null);
  MUCEventDispatcher.occupantJoined(getRole().getRoleAddress(),user.getAddress(),joinRole.getNickname());
  return joinRole;
}
