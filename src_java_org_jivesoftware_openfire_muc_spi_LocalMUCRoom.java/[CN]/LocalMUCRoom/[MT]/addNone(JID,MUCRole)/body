{
  final JID bareJID=new JID(jid.toBareJID());
  List<Presence> updatedPresences=Collections.emptyList();
  boolean wasMember=false;
  lock.writeLock().lock();
  try {
    MUCRole.Affiliation oldAffiliation=MUCRole.Affiliation.none;
    if (MUCRole.Affiliation.admin != senderRole.getAffiliation() && MUCRole.Affiliation.owner != senderRole.getAffiliation()) {
      throw new ForbiddenException();
    }
    if (owners.contains(bareJID) && owners.size() == 1) {
      throw new ConflictException();
    }
    wasMember=members.containsKey(bareJID) || admins.contains(bareJID) || owners.contains(bareJID);
    if (removeOwner(bareJID)) {
      oldAffiliation=MUCRole.Affiliation.owner;
    }
 else     if (removeAdmin(bareJID)) {
      oldAffiliation=MUCRole.Affiliation.admin;
    }
 else     if (removeMember(bareJID)) {
      oldAffiliation=MUCRole.Affiliation.member;
    }
 else     if (removeOutcast(bareJID)) {
      oldAffiliation=MUCRole.Affiliation.outcast;
    }
    MUCPersistenceManager.removeAffiliationFromDB(this,bareJID,oldAffiliation);
  }
  finally {
    lock.writeLock().unlock();
  }
  try {
    MUCRole.Role newRole;
    if (isMembersOnly() && wasMember) {
      newRole=MUCRole.Role.none;
    }
 else {
      newRole=isModerated() ? MUCRole.Role.visitor : MUCRole.Role.participant;
    }
    updatedPresences=changeOccupantAffiliation(bareJID,MUCRole.Affiliation.none,newRole);
    if (isMembersOnly() && wasMember) {
      Element frag;
      for (      Presence presence : updatedPresences) {
        presence.setType(Presence.Type.unavailable);
        presence.setStatus(null);
        frag=presence.getChildElement("x","http://jabber.org/protocol/muc#user");
        frag.addElement("status").addAttribute("code","321");
        JID actorJID=senderRole.getUserAddress();
        kickPresence(presence,actorJID);
      }
    }
  }
 catch (  NotAllowedException e) {
    Log.error(e.getMessage(),e);
  }
  return updatedPresences;
}
