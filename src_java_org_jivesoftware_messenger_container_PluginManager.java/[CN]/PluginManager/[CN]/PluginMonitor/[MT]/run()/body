{
  try {
    File[] jars=pluginDirectory.listFiles(new FileFilter(){
      public boolean accept(      File pathname){
        return pathname.getName().toLowerCase().endsWith(".jar");
      }
    }
);
    for (int i=0; i < jars.length; i++) {
      File jarFile=jars[i];
      String pluginName=jarFile.getName().substring(0,jarFile.getName().length() - 4).toLowerCase();
      File dir=new File(pluginDirectory,pluginName);
      if (!dir.exists()) {
        unzipPlugin(pluginName,jarFile,dir);
      }
 else       if (jarFile.lastModified() > dir.lastModified()) {
        unloadPlugin(pluginName);
        System.gc();
        while (!deleteDir(dir)) {
          Log.error("Error unloading plugin " + pluginName + ". "+ "Will attempt again momentarily.");
          Thread.sleep(5000);
        }
        unzipPlugin(pluginName,jarFile,dir);
      }
    }
    File[] dirs=pluginDirectory.listFiles(new FileFilter(){
      public boolean accept(      File pathname){
        return pathname.isDirectory();
      }
    }
);
    Arrays.sort(dirs,new Comparator<File>(){
      public int compare(      File file1,      File file2){
        if (file1.getName().equals("admin")) {
          return -1;
        }
 else         if (file2.getName().equals("admin")) {
          return 1;
        }
 else         return file1.compareTo(file2);
      }
    }
);
    for (int i=0; i < dirs.length; i++) {
      File dirFile=dirs[i];
      if (!plugins.containsKey(dirFile.getName())) {
        loadPlugin(dirFile);
      }
    }
    if (plugins.size() > jars.length + 1) {
      List<String> toDelete=new ArrayList<String>();
      for (      String pluginName : plugins.keySet()) {
        if (pluginName.equals("admin")) {
          continue;
        }
        File file=new File(pluginDirectory,pluginName + ".jar");
        if (!file.exists()) {
          toDelete.add(pluginName);
        }
      }
      for (      String pluginName : toDelete) {
        unloadPlugin(pluginName);
        System.gc();
        while (!deleteDir(new File(pluginDirectory,pluginName))) {
          Log.error("Error unloading plugin " + pluginName + ". "+ "Will attempt again momentarily.");
          Thread.sleep(5000);
        }
      }
    }
  }
 catch (  Exception e) {
    Log.error(e);
  }
}
