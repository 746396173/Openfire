{
  UserIdentity identity=null;
  if (identities.containsKey(userName)) {
    identity=identities.get(userName);
    if (authTokens.containsKey(userName) == false) {
      Log.debug("UserIdentity login " + userName + " ");
      try {
        AuthToken authToken=AuthFactory.authenticate(userName,(String)credential);
        authTokens.put(userName,authToken);
      }
 catch (      UnauthorizedException e) {
        Log.error("access denied, bad password " + userName);
        return null;
      }
catch (      Exception e) {
        Log.error("access denied " + userName);
        return null;
      }
    }
  }
 else {
    Log.debug("UserIdentity login " + userName + " ");
    try {
      userManager.getUser(userName);
    }
 catch (    UserNotFoundException e) {
      Log.error("user not found " + userName,e);
      return null;
    }
    try {
      AuthToken authToken=AuthFactory.authenticate(userName,(String)credential);
      authTokens.put(userName,authToken);
    }
 catch (    UnauthorizedException e) {
      Log.error("access denied, bad password " + userName);
      return null;
    }
catch (    Exception e) {
      Log.error("access denied " + userName);
      return null;
    }
    Principal userPrincipal=new KnownUser(userName,credential);
    Subject subject=new Subject();
    subject.getPrincipals().add(userPrincipal);
    subject.getPrivateCredentials().add(credential);
    subject.getPrincipals().add(new RolePrincipal("ofmeet"));
    subject.setReadOnly();
    identity=_identityService.newUserIdentity(subject,userPrincipal,new String[]{"ofmeet"});
    identities.put(userName,identity);
  }
  return identity;
}
