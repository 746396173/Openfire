{
  try {
    System.setProperty("org.apache.commons.logging.LogFactory","org.mortbay.log.Factory");
    File logDir=new File(JiveGlobals.getHomeDirectory(),"logs");
    if (!logDir.exists()) {
      logDir.mkdirs();
    }
    File logFile=new File(logDir,"admin-console.log");
    OutputStreamLogSink logSink=new OutputStreamLogSink(logFile.toString());
    logSink.start();
    LogImpl log=(LogImpl)Factory.getFactory().getInstance("");
    log.setVerbose(-1);
    log.add(logSink);
    jetty=new Server();
    boolean plainStarted=false;
    interfaceName=JiveGlobals.getXMLProperty("adminConsole.interface");
    port=JiveGlobals.getXMLProperty("adminConsole.port",9090);
    InetAddrPort address=new InetAddrPort(interfaceName,port);
    if (port > 0) {
      jetty.addListener(address);
      plainStarted=true;
    }
    boolean secureStarted=false;
    try {
      securePort=JiveGlobals.getXMLProperty("adminConsole.securePort",9091);
      if (securePort > 0) {
        SunJsseListener listener=new SunJsseListener();
        String keyStoreLocation=JiveGlobals.getProperty("xmpp.socket.ssl.keystore","resources" + File.separator + "security"+ File.separator+ "keystore");
        keyStoreLocation=JiveGlobals.getHomeDirectory() + File.separator + keyStoreLocation;
        String keypass=JiveGlobals.getProperty("xmpp.socket.ssl.keypass","changeit");
        keypass=keypass.trim();
        String trustStoreLocation=JiveGlobals.getProperty("xmpp.socket.ssl.truststore","resources" + File.separator + "security"+ File.separator+ "truststore");
        trustStoreLocation=JiveGlobals.getHomeDirectory() + File.separator + trustStoreLocation;
        String trustpass=JiveGlobals.getProperty("xmpp.socket.ssl.trustpass","changeit");
        trustpass=trustpass.trim();
        listener.setKeystore(keyStoreLocation);
        listener.setKeyPassword(keypass);
        listener.setPassword(keypass);
        listener.setHost(interfaceName);
        listener.setPort(securePort);
        jetty.addListener(listener);
        secureStarted=true;
      }
    }
 catch (    Exception e) {
      Log.error(e);
    }
    WebApplicationContext webAppContext=jetty.addWebApplication("/",pluginDir.getAbsoluteFile() + File.separator + "webapp");
    webAppContext.setWelcomeFiles(new String[]{"index.jsp"});
    jetty.start();
    String warning=LocaleUtils.getLocalizedString("admin.console.warning");
    String listening=LocaleUtils.getLocalizedString("admin.console.listening");
    if (!plainStarted && !secureStarted) {
      Log.info(warning);
      System.out.println(warning);
    }
 else     if (!plainStarted && secureStarted) {
      Log.info(listening + " https://" + XMPPServer.getInstance().getServerInfo().getName()+ ":"+ securePort);
      System.out.println(listening + " https://" + XMPPServer.getInstance().getServerInfo().getName()+ ":"+ securePort);
    }
 else     if (!secureStarted && plainStarted) {
      Log.info(listening + " http://" + XMPPServer.getInstance().getServerInfo().getName()+ ":"+ port);
      System.out.println(listening + " http://" + XMPPServer.getInstance().getServerInfo().getName()+ ":"+ port);
    }
 else {
      String msg=listening + ":\n" + "  http://"+ XMPPServer.getInstance().getServerInfo().getName()+ ":"+ port+ "\n"+ "  https://"+ XMPPServer.getInstance().getServerInfo().getName()+ ":"+ securePort;
      Log.info(msg);
      System.out.println(msg);
    }
  }
 catch (  Exception e) {
    System.err.println("Error starting admin console: " + e.getMessage());
    Log.error("Trouble initializing admin console",e);
  }
}
