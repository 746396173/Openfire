{
  Log.debug("Received presence packet: " + packet.toXML());
  List<Packet> reply=new ArrayList<Packet>();
  JID from=packet.getFrom();
  JID to=packet.getTo();
  if (packet.getType() == Presence.Type.error) {
    return reply;
  }
  try {
    TransportSession<B> session=getTransport().getSessionManager().getSession(from);
    if (!session.isLoggedIn()) {
      Message m=new Message();
      m.setError(Condition.service_unavailable);
      m.setTo(from);
      m.setFrom(getJID());
      m.setBody(LocaleUtils.getLocalizedString("gateway.base.notloggedin","kraken",Arrays.asList(getTransport().getType().toString().toUpperCase())));
      reply.add(m);
    }
 else     if (to.getNode() == null) {
    }
 else     if (to.getResource() != null) {
      if (packet.getType() == Presence.Type.unavailable) {
        try {
          MUCTransportSession mucSession=session.getMUCSessionManager().getSession(to.getNode());
          mucSession.leaveRoom();
          session.getMUCSessionManager().removeSession(to.getNode());
        }
 catch (        NotFoundException e) {
        }
      }
 else {
        try {
          MUCTransportSession mucSession=session.getMUCSessionManager().getSession(to.getNode());
          mucSession.updateStatus(this.getTransport().getPresenceType(packet));
        }
 catch (        NotFoundException e) {
          MUCTransportSession mucSession=createRoom(session,to.getNode(),to.getResource());
          session.getMUCSessionManager().storeSession(to.getNode(),mucSession);
          mucSession.enterRoom();
        }
      }
    }
 else {
      Presence p=new Presence();
      p.setError(Condition.jid_malformed);
      p.setType(Presence.Type.error);
      p.setTo(from);
      p.setFrom(to);
      reply.add(p);
    }
  }
 catch (  NotFoundException e) {
    Log.debug("Unable to find session.");
    Message m=new Message();
    m.setError(Condition.service_unavailable);
    m.setTo(from);
    m.setFrom(getJID());
    m.setBody(LocaleUtils.getLocalizedString("gateway.base.notloggedin","kraken",Arrays.asList(getTransport().getType().toString().toUpperCase())));
    reply.add(m);
  }
  return reply;
}
