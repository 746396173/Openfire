{
  this.iterator=iterator;
  this.auth=auth;
  this.permissions=permissions;
switch (type) {
case JiveConstants.USER:
    proxyFactory=new ProxyFactory(){
      public Object createProxy(      Object obj,      AuthToken auth,      Permissions perms){
        User user=(User)obj;
        Permissions userPerms=user.getPermissions(auth);
        Permissions newPerms=new Permissions(perms,userPerms);
        return new UserProxy(user,auth,newPerms);
      }
    }
;
  break;
case JiveConstants.GROUP:
proxyFactory=new ProxyFactory(){
  public Object createProxy(  Object obj,  AuthToken auth,  Permissions perms){
    Group group=(Group)obj;
    Permissions groupPerms=group.getPermissions(auth);
    Permissions newPerms=new Permissions(perms,groupPerms);
    return new GroupProxy(group,auth,newPerms);
  }
}
;
break;
default :
throw new IllegalArgumentException();
}
}
