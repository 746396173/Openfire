{
  boolean useTLS=JiveGlobals.getBooleanProperty("xmpp.server.tls.enabled",true);
  RemoteServerConfiguration configuration=RemoteServerManager.getConfiguration(hostname);
  if (configuration != null) {
  }
  SocketConnection connection=null;
  String realHostname=null;
  int realPort=port;
  Socket socket=new Socket();
  List<DNSUtil.HostAddress> hosts=DNSUtil.resolveXMPPDomain(hostname,port);
  for (Iterator<DNSUtil.HostAddress> it=hosts.iterator(); it.hasNext(); ) {
    try {
      DNSUtil.HostAddress address=it.next();
      realHostname=address.getHost();
      realPort=address.getPort();
      Log.debug("LocalOutgoingServerSession: OS - Trying to connect to " + hostname + ":"+ port+ "(DNS lookup: "+ realHostname+ ":"+ realPort+ ")");
      socket.connect(new InetSocketAddress(realHostname,realPort),RemoteServerManager.getSocketTimeout());
      Log.debug("LocalOutgoingServerSession: OS - Plain connection to " + hostname + ":"+ port+ " successful");
      break;
    }
 catch (    Exception e) {
      Log.warn("Error trying to connect to remote server: " + hostname + "(DNS lookup: "+ realHostname+ ":"+ realPort+ ")",e);
    }
  }
  if (!socket.isConnected()) {
    return null;
  }
  try {
    connection=new SocketConnection(XMPPServer.getInstance().getPacketDeliverer(),socket,false);
    StringBuilder openingStream=new StringBuilder();
    openingStream.append("<stream:stream");
    openingStream.append(" xmlns:db=\"jabber:server:dialback\"");
    openingStream.append(" xmlns:stream=\"http://etherx.jabber.org/streams\"");
    openingStream.append(" xmlns=\"jabber:server\"");
    openingStream.append(" to=\"").append(hostname).append("\"");
    openingStream.append(" version=\"1.0\">");
    connection.deliverRawText(openingStream.toString());
    int soTimeout=socket.getSoTimeout();
    socket.setSoTimeout(5000);
    XMPPPacketReader reader=new XMPPPacketReader();
    reader.getXPPParser().setInput(new InputStreamReader(socket.getInputStream(),CHARSET));
    XmlPullParser xpp=reader.getXPPParser();
    for (int eventType=xpp.getEventType(); eventType != XmlPullParser.START_TAG; ) {
      eventType=xpp.next();
    }
    String serverVersion=xpp.getAttributeValue("","version");
    String id=xpp.getAttributeValue("","id");
    if (serverVersion != null && decodeVersion(serverVersion)[0] >= 1) {
      socket.setSoTimeout(soTimeout);
      Element features=reader.parseDocument().getRootElement();
      if (features != null) {
        if (useTLS && features.element("starttls") != null) {
          LocalOutgoingServerSession answer;
          answer=secureAndAuthenticate(hostname,connection,reader,openingStream,domain);
          if (answer != null) {
            return answer;
          }
        }
 else         if (ServerDialback.isEnabled() && features.element("dialback") != null) {
          Log.debug("LocalOutgoingServerSession: OS - About to try connecting using server dialback XMPP 1.0 with: " + hostname);
          ServerDialback method=new ServerDialback(connection,domain);
          OutgoingServerSocketReader newSocketReader=new OutgoingServerSocketReader(reader);
          if (method.authenticateDomain(newSocketReader,domain,hostname,id)) {
            Log.debug("LocalOutgoingServerSession: OS - SERVER DIALBACK XMPP 1.0 with " + hostname + " was successful");
            StreamID streamID=new BasicStreamIDFactory().createStreamID(id);
            LocalOutgoingServerSession session=new LocalOutgoingServerSession(domain,connection,newSocketReader,streamID);
            connection.init(session);
            session.setAddress(new JID(null,hostname,null));
            return session;
          }
 else {
            Log.debug("LocalOutgoingServerSession: OS - Error, SERVER DIALBACK with " + hostname + " failed");
          }
        }
      }
 else {
        Log.debug("LocalOutgoingServerSession: OS - Error, <starttls> was not received");
      }
    }
    if (connection != null) {
      connection.close();
    }
  }
 catch (  SSLHandshakeException e) {
    Log.debug("LocalOutgoingServerSession: Handshake error while creating secured outgoing session to remote " + "server: " + hostname + "(DNS lookup: "+ realHostname+ ":"+ realPort+ ")",e);
    if (connection != null) {
      connection.close();
    }
  }
catch (  XmlPullParserException e) {
    Log.warn("Error creating secured outgoing session to remote server: " + hostname + "(DNS lookup: "+ realHostname+ ":"+ realPort+ ")",e);
    if (connection != null) {
      connection.close();
    }
  }
catch (  Exception e) {
    Log.error("Error creating secured outgoing session to remote server: " + hostname + "(DNS lookup: "+ realHostname+ ":"+ realPort+ ")",e);
    if (connection != null) {
      connection.close();
    }
  }
  if (ServerDialback.isEnabled()) {
    Log.debug("LocalOutgoingServerSession: OS - Going to try connecting using server dialback with: " + hostname);
    return new ServerDialback().createOutgoingSession(domain,hostname,port);
  }
  return null;
}
