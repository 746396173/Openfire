{
  RoutingTable routingTable=XMPPServer.getInstance().getRoutingTable();
  try {
    if (packet instanceof IQ) {
      if (((IQ)packet).isResponse()) {
        Log.debug("XMPP specs forbid us to respond with an IQ error to: " + packet.toXML());
        return;
      }
      IQ reply=new IQ();
      reply.setID(packet.getID());
      reply.setTo(packet.getFrom());
      reply.setFrom(packet.getTo());
      reply.setChildElement(((IQ)packet).getChildElement().createCopy());
      reply.setError(PacketError.Condition.remote_server_not_found);
      routingTable.routePacket(reply.getTo(),reply,true);
    }
 else     if (packet instanceof Presence) {
      Presence reply=new Presence();
      reply.setID(packet.getID());
      reply.setTo(packet.getFrom());
      reply.setFrom(packet.getTo());
      reply.setError(PacketError.Condition.remote_server_not_found);
      routingTable.routePacket(reply.getTo(),reply,true);
    }
 else     if (packet instanceof Message) {
      Message reply=new Message();
      reply.setID(packet.getID());
      reply.setTo(packet.getFrom());
      reply.setFrom(packet.getTo());
      reply.setType(((Message)packet).getType());
      reply.setThread(((Message)packet).getThread());
      reply.setError(PacketError.Condition.remote_server_not_found);
      routingTable.routePacket(reply.getTo(),reply,true);
    }
  }
 catch (  Exception e) {
    Log.warn("Error returning error to sender. Original packet: " + packet,e);
  }
}
