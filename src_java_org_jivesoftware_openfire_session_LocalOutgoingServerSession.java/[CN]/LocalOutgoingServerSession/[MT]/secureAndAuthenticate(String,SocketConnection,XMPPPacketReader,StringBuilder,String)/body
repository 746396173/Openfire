{
  final Logger log=LoggerFactory.getLogger(Log.getName() + "[Secure/Authenticate connection for: " + localDomain+ " to: "+ remoteDomain+ "]");
  Element features;
  log.debug("Securing and authenticating connection ...");
  log.debug("Indicating we want TLS and wait for response.");
  connection.deliverRawText("<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>");
  MXParser xpp=reader.getXPPParser();
  Element proceed=reader.parseDocument().getRootElement();
  if (proceed != null && proceed.getName().equals("proceed")) {
    log.debug("Received 'proceed' from remote server. Negotiating TLS...");
    try {
      connection.startTLS(true);
    }
 catch (    Exception e) {
      log.debug("TLS negotiation failed: " + e.getMessage());
      throw e;
    }
    log.debug("TLS negotiation was successful. Connection secured. Proceeding with authentication...");
    if (!SASLAuthentication.verifyCertificates(connection.getPeerCertificates(),remoteDomain,true)) {
      if (ServerDialback.isEnabled() || ServerDialback.isEnabledForSelfSigned()) {
        log.debug("SASL authentication failed. Will continue with dialback.");
      }
 else {
        log.warn("Unable to authenticated the connection: SASL authentication failed (and dialback is not available).");
        return null;
      }
    }
    log.debug("TLS negotiation was successful so initiate a new stream.");
    connection.deliverRawText(openingStream.toString());
    xpp.setInput(new InputStreamReader(connection.getTLSStreamHandler().getInputStream(),StandardCharsets.UTF_8));
    for (int eventType=xpp.getEventType(); eventType != XmlPullParser.START_TAG; ) {
      eventType=xpp.next();
    }
    String id=xpp.getAttributeValue("","id");
    features=reader.parseDocument().getRootElement();
    if (features != null) {
      final Connection.CompressionPolicy compressionPolicy=connection.getConfiguration().getCompressionPolicy();
      if (Connection.CompressionPolicy.optional == compressionPolicy) {
        Element compression=features.element("compression");
        if (compression != null) {
          boolean zlibSupported=false;
          Iterator it=compression.elementIterator("method");
          while (it.hasNext()) {
            Element method=(Element)it.next();
            if ("zlib".equals(method.getTextTrim())) {
              zlibSupported=true;
            }
          }
          if (zlibSupported) {
            log.debug("Suppressing request to perform compression; unsupported in this version.");
            zlibSupported=false;
          }
          if (zlibSupported) {
            log.debug("Requesting stream compression (zlib).");
            connection.deliverRawText("<compress xmlns='http://jabber.org/protocol/compress'><method>zlib</method></compress>");
            Element answer=reader.parseDocument().getRootElement();
            if ("compressed".equals(answer.getName())) {
              connection.addCompression();
              connection.startCompression();
              log.debug("Stream compression was successful.");
              connection.deliverRawText(openingStream.toString());
              ZInputStream in=new ZInputStream(connection.getTLSStreamHandler().getInputStream());
              in.setFlushMode(JZlib.Z_PARTIAL_FLUSH);
              xpp.setInput(new InputStreamReader(in,StandardCharsets.UTF_8));
              for (int eventType=xpp.getEventType(); eventType != XmlPullParser.START_TAG; ) {
                eventType=xpp.next();
              }
              features=reader.parseDocument().getRootElement();
              if (features == null) {
                log.debug("Error, EXTERNAL SASL was not offered.");
                return null;
              }
            }
 else {
              log.debug("Stream compression was rejected by " + remoteDomain);
            }
          }
 else {
            log.debug("Stream compression found but zlib method is not supported by " + remoteDomain);
          }
        }
 else {
          log.debug("Stream compression not supported by " + remoteDomain);
        }
      }
      boolean saslEXTERNALoffered=false;
      if (features != null) {
        if (features.element("mechanisms") != null) {
          Iterator<Element> it=features.element("mechanisms").elementIterator();
          while (it.hasNext()) {
            Element mechanism=it.next();
            if ("EXTERNAL".equals(mechanism.getTextTrim())) {
              saslEXTERNALoffered=true;
              break;
            }
          }
        }
      }
      final boolean dialbackOffered=features.element("dialback") != null;
      log.debug("Remote server is offering dialback: {}, EXTERNAL SASL:",dialbackOffered,saslEXTERNALoffered);
      LocalOutgoingServerSession result=null;
      if (saslEXTERNALoffered) {
        log.debug("Trying to authenticate with EXTERNAL SASL.");
        result=attemptSASLexternal(connection,xpp,reader,localDomain,remoteDomain,id,openingStream);
        if (result == null) {
          log.debug("Failed to authenticate with EXTERNAL SASL.");
        }
 else {
          log.debug("Successfully authenticated with EXTERNAL SASL.");
        }
      }
      if (result == null) {
        log.debug("Trying to authenticate with dialback.");
        result=attemptDialbackOverTLS(connection,reader,localDomain,remoteDomain,id);
        if (result == null) {
          log.debug("Failed to authenticate with dialback.");
        }
 else {
          log.debug("Successfully authenticated with dialback.");
        }
      }
      if (result != null) {
        log.debug("Successfully secured and authenticated connection!");
        return result;
      }
 else {
        log.warn("Unable to secure and authenticate connection: Exhausted all options.");
        return null;
      }
    }
 else {
      log.debug("Failed to secure and authenticate connection: neither SASL mechanisms nor SERVER DIALBACK were offered by the remote host.");
      return null;
    }
  }
 else {
    log.debug("Failed to secure and authenticate connection: <proceed> was not received!");
    return null;
  }
}
