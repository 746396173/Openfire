{
  final Logger log=LoggerFactory.getLogger(Log.getName() + "[Authenticate local domain: '" + localDomain+ "' to remote domain: '"+ remoteDomain+ "']");
  log.debug("Start domain authentication ...");
  if (remoteDomain == null || remoteDomain.length() == 0 || remoteDomain.trim().indexOf(' ') > -1) {
    log.warn("Unable to authenticate: remote domain is invalid.");
    return false;
  }
  try {
    if (!RemoteServerManager.canAccess(remoteDomain)) {
      log.info("Unable to authenticate: Remote domain is not accessible according to our configuration (typical causes: server federation is disabled, or domain is blacklisted).");
      return false;
    }
    log.debug("Searching for pre-existing outgoing sessions to the remote domain (if one exists, it will be re-used) ...");
    OutgoingServerSession session;
    SessionManager sessionManager=SessionManager.getInstance();
    if (sessionManager == null) {
      log.warn("Unable to authenticate: a SessionManager instance is not available. This should not occur unless Openfire is starting up or shutting down.");
      return false;
    }
    session=sessionManager.getOutgoingServerSession(remoteDomain);
    if (session == null) {
      log.debug("There are no pre-existing outgoing sessions to the remote domain itself. Searching for pre-existing outgoing sessions to super- or subdomains of the remote domain (if one exists, it might be re-usable) ...");
      for (      IncomingServerSession incomingSession : sessionManager.getIncomingServerSessions(remoteDomain)) {
        for (        String otherRemoteDomain : incomingSession.getValidatedDomains()) {
          session=sessionManager.getOutgoingServerSession(otherRemoteDomain);
          if (session != null) {
            log.debug("An outgoing session to a different domain ('{}') hosted on the remote domain was found.",otherRemoteDomain);
            if (session.isUsingServerDialback()) {
              log.debug("Dialback was used for '{}'. This session can be re-used.",otherRemoteDomain);
              break;
            }
 else {
              log.debug("Dialback was not used for '{}'. This session cannot be re-used.",otherRemoteDomain);
              session=null;
            }
          }
        }
      }
      if (session == null) {
        log.debug("There are no pre-existing session to other domains hosted on the remote domain.");
      }
    }
    if (session != null) {
      log.debug("A pre-existing session can be re-used. The session was established using server dialback so it is possible to do piggybacking to authenticate more domains.");
      if (session.getAuthenticatedDomains().contains(localDomain) && session.getHostnames().contains(remoteDomain)) {
        log.debug("Authentication successful (domain was already authenticated in the pre-existing session).");
        return true;
      }
      if (session.authenticateSubdomain(localDomain,remoteDomain)) {
        log.debug("Authentication successful (domain authentication was added using a pre-existing session).");
        return true;
      }
 else {
        log.warn("Unable to authenticate: Unable to add authentication to pre-exising session.");
        return false;
      }
    }
 else {
      log.debug("Unable to re-use an existing session. Creating a new session ...");
      int port=RemoteServerManager.getPortForServer(remoteDomain);
      session=createOutgoingSession(localDomain,remoteDomain,port);
      if (session != null) {
        log.debug("Created a new session.");
        session.addAuthenticatedDomain(localDomain);
        session.addHostname(remoteDomain);
        sessionManager.outgoingServerSessionCreated((LocalOutgoingServerSession)session);
        log.debug("Authentication successful.");
        return true;
      }
 else {
        log.warn("Unable to authenticate: Fail to create new session.");
        return false;
      }
    }
  }
 catch (  Exception e) {
    log.error("An exception occurred while authenticating remote domain!",e);
    return false;
  }
}
