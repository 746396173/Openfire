{
  if (!JiveGlobals.getBooleanProperty("multicastDNS.enabled",false)) {
    return;
  }
  TimerTask startService=new TimerTask(){
    @Override public void run(){
      XMPPServerInfo info=XMPPServer.getInstance().getServerInfo();
      int clientPortNum=-1;
      int componentPortNum=-1;
      for (      ServerPort port : info.getServerPorts()) {
        if (port.isClientPort()) {
          clientPortNum=port.getPort();
        }
 else         if (port.isComponentPort()) {
          componentPortNum=port.getPort();
        }
      }
      try {
        if (jmdns == null) {
          jmdns=new JmDNS();
        }
        String serverName=XMPPServer.getInstance().getServerInfo().getXMPPDomain();
        if (clientPortNum != -1) {
          ServiceInfo clientService=new ServiceInfo("_xmpp-client._tcp.local.",serverName + "._xmpp-client._tcp.local.",clientPortNum,"XMPP Server");
          jmdns.registerService(clientService);
        }
        if (componentPortNum != -1) {
          ServiceInfo componentService=new ServiceInfo("_xmpp-component._tcp.local.",serverName + "._xmpp-component._tcp.local.",componentPortNum,"XMPP Component Server");
          jmdns.registerService(componentService);
        }
      }
 catch (      IOException ioe) {
        Log.error(ioe.getMessage(),ioe);
      }
    }
  }
;
  TaskEngine.getInstance().schedule(startService,5000);
}
