{
  Log.debug("Starting Package Interceptor for " + initialSubdomain);
  _mySubdomain=initialSubdomain;
  XMPPServer server=XMPPServer.getInstance();
  RosterManager rosterMananger=server.getRosterManager();
  AbstractRemoteRosterProcessor sendroster=new SendRosterProcessor(rosterMananger,_mySubdomain);
  AbstractRemoteRosterProcessor receiveChanges=new ReceiveComponentUpdatesProcessor(rosterMananger,_mySubdomain);
  AbstractRemoteRosterProcessor iqRegistered=new DiscoIQResigteredProcessor(_mySubdomain);
  AbstractRemoteRosterProcessor nonPersistant=new NonPersistantRosterProcessor(rosterMananger,_mySubdomain);
  AbstractRemoteRosterProcessor updateToComponent=new ClientToComponentUpdateProcessor(_mySubdomain);
  _packetProcessor.put("sendRoster",sendroster);
  _packetProcessor.put("receiveChanges",receiveChanges);
  _packetProcessor.put("sparkIQRegistered",iqRegistered);
  _packetProcessor.put("handleNonPersistant",nonPersistant);
  _packetProcessor.put("clientToComponentUpdate",updateToComponent);
}
