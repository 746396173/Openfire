{
  String callId=cp.getCallId();
  CallHandler callHandler=CallHandler.findMigratingCall(callId);
  if (callHandler != null) {
    callHandler.cancelRequest("new migration requested");
  }
  CallHandler previousCall=CallHandler.findCall(callId);
  if (previousCall == null) {
    if (cp.getConferenceId() == null) {
      Logger.println("Call migrator can't find call Id " + callId);
      return;
    }
    migrateWithNoPreviousCall(requestHandler,cp);
    return;
  }
  if (false) {
    if (previousCall.isCallEstablished() == false) {
      Logger.println("Call migrator can't migrate call which is not established");
      return;
    }
  }
  CallParticipant previousCp=previousCall.getCallParticipant();
  String previousEndTreatment=previousCp.getCallEndTreatment();
  String previousLeaveTreatment=previousCp.getConferenceLeaveTreatment();
  previousCp.setCallEndTreatment(null);
  previousCp.setConferenceLeaveTreatment(null);
  cp.setMuted(previousCp.isMuted());
  Logger.println("Call migrating " + previousCp + " preserving mute "+ previousCp.isMuted());
  if (cp.getConferenceId() == null) {
    cp.setConferenceId(previousCp.getConferenceId());
  }
  if (cp.getName() == null) {
    cp.setName(previousCp.getName());
  }
  String secondParty=cp.getSecondPartyNumber();
  if (secondParty.indexOf("Id-") == 0) {
    callHandler=CallHandler.findCall(secondParty.substring(3));
    if (callHandler == null) {
      Logger.println("Can't find existing call to " + secondParty);
      return;
    }
    cp=callHandler.getCallParticipant();
    cp.setCallId(previousCp.getCallId());
  }
 else {
    cp.setPhoneNumber(cp.getSecondPartyNumber());
    cp.setConferenceJoinTreatment(null);
    CallEventListener previousCallEventListener=(CallEventListener)previousCall.getRequestHandler();
    if (previousCallEventListener != null) {
      requestHandler=previousCallEventListener;
    }
    previousCall.suppressStatus=true;
    OutgoingCallHandler newCall=new OutgoingCallHandler(requestHandler,cp);
    previousCall.getMember().migrating();
synchronized (this) {
      newCall.suppressStatus=true;
      newCall.start();
      if (newCall.waitForCallToBeEstablished() == false) {
        String reason=newCall.getReasonCallEnded();
        Logger.println("Migration failed: " + reason);
        previousCp.setConferenceLeaveTreatment(previousLeaveTreatment);
        previousCp.setCallEndTreatment(previousEndTreatment);
        CallEvent callEvent=new CallEvent(CallEvent.STATE_CHANGED);
        callEvent.setCallState(new CallState(CallState.ENDED));
        callEvent.setInfo("Migration failed: " + reason);
        newCall.suppressStatus=false;
        newCall.sendCallEventNotification(callEvent);
        previousCall.suppressStatus=false;
        if (!previousCall.isCallEstablished()) {
          previousCall.sendCallEventNotification(callEvent);
        }
        return;
      }
      newCall.suppressStatus=false;
    }
    if (previousCall.isCallEstablished() == true) {
      Logger.println("migrate mix descriptors for " + previousCall);
      newCall.getMember().migrate(previousCall.getMember());
    }
 else {
      Logger.println("migrate:  previous call is not established " + previousCall);
    }
  }
  Logger.println("Call " + previousCp + " migrated to "+ cp.getPhoneNumber());
  previousCall.suppressStatus=false;
  cp.setMigrateCall(false);
  if (!previousCall.isCallEstablished()) {
    previousCall.addCallEventListener(previousCall.getRequestHandler());
  }
  CallEvent callEvent=new CallEvent(CallEvent.MIGRATED);
  callEvent.setInfo(previousCp + " migrated to " + cp);
  previousCall.sendCallEventNotification(callEvent);
  previousCall.suppressStatus=true;
  previousCp.setCallEndTreatment(null);
  previousCp.setConferenceLeaveTreatment(null);
  previousCall.cancelRequest("Call " + previousCp + " migrated to "+ cp.getPhoneNumber());
}
