{
  if (packet == null) {
    throw new NullPointerException();
  }
  JID sender=packet.getFrom();
  ClientSession session=sessionManager.getSession(sender);
  try {
    InterceptorManager.getInstance().invokeInterceptors(packet,session,true,false);
    JID to=packet.getTo();
    if (session != null && to != null && session.getStatus() == Session.STATUS_CONNECTED && !serverName.equals(to.toString())) {
      IQ reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.bad_request);
      session.process(reply);
      Log.warn("User tried to authenticate with this server using an unknown receipient: " + packet.toXML());
    }
 else     if (session == null || session.getStatus() == Session.STATUS_AUTHENTICATED || (isLocalServer(to) && ("jabber:iq:auth".equals(packet.getChildElement().getNamespaceURI()) || "jabber:iq:register".equals(packet.getChildElement().getNamespaceURI()) || "urn:ietf:params:xml:ns:xmpp-bind".equals(packet.getChildElement().getNamespaceURI())))) {
      handle(packet);
    }
 else {
      IQ reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.not_authorized);
      session.process(reply);
    }
    InterceptorManager.getInstance().invokeInterceptors(packet,session,true,true);
  }
 catch (  PacketRejectedException e) {
    if (session != null) {
      IQ reply=new IQ();
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setID(packet.getID());
      reply.setTo(session.getAddress());
      reply.setFrom(packet.getTo());
      reply.setError(PacketError.Condition.not_allowed);
      session.process(reply);
      if (e.getRejectionMessage() != null && e.getRejectionMessage().trim().length() > 0) {
        Message notification=new Message();
        notification.setTo(session.getAddress());
        notification.setFrom(packet.getTo());
        notification.setBody(e.getRejectionMessage());
        session.process(notification);
      }
    }
  }
}
