{
  final IQ reply=IQ.createResultIQ(iq);
  final Element formElement=iq.getChildElement().element(QName.get("x","jabber:x:data"));
  if (formElement == null) {
    reply.setChildElement(getDataElement());
    return reply;
  }
  final XDataFormImpl df=new XDataFormImpl();
  df.parse(formElement);
  boolean name_is_exact_match=false;
  String subject=null;
  int numusers=-1;
  int numaxusers=-1;
  boolean includePasswordProtectedRooms=true;
  final Set<String> names=new HashSet<String>();
  @SuppressWarnings("unchecked") final Iterator<FormField> formFields=df.getFields();
  while (formFields.hasNext()) {
    final FormField field=formFields.next();
    if (field.getVariable().equals("name")) {
      names.add(getFirstValue(field));
    }
  }
  final FormField matchFF=df.getField("name_is_exact_match");
  if (matchFF != null) {
    final String b=getFirstValue(matchFF);
    if (b != null) {
      name_is_exact_match=b.equals("1") || b.equalsIgnoreCase("true") || b.equalsIgnoreCase("yes");
    }
  }
  final FormField subjectFF=df.getField("subject");
  if (subjectFF != null) {
    subject=getFirstValue(subjectFF);
  }
  try {
    final FormField userAmountFF=df.getField("num_users");
    if (userAmountFF != null) {
      String value=getFirstValue(userAmountFF);
      if (value != null && !"".equals(value)) {
        numusers=Integer.parseInt(value);
      }
    }
    final FormField maxUsersFF=df.getField("num_max_users");
    if (maxUsersFF != null) {
      String value=getFirstValue(maxUsersFF);
      if (value != null && !"".equals(value)) {
        numaxusers=Integer.parseInt(value);
      }
    }
  }
 catch (  NumberFormatException e) {
    reply.setError(PacketError.Condition.bad_request);
    return reply;
  }
  final FormField includePasswordProtectedRoomsFF=df.getField("include_password_protected");
  if (includePasswordProtectedRoomsFF != null) {
    final String b=getFirstValue(includePasswordProtectedRoomsFF);
    if (b != null) {
      if (b.equals("0") || b.equalsIgnoreCase("false") || b.equalsIgnoreCase("no")) {
        includePasswordProtectedRooms=false;
      }
    }
  }
  final List<MUCRoom> mucs=new ArrayList<MUCRoom>();
  for (  MUCRoom room : mucService.getChatRooms()) {
    boolean find=false;
    if (names.size() > 0) {
      for (      final String name : names) {
        if (name_is_exact_match) {
          if (name.equalsIgnoreCase(room.getNaturalLanguageName())) {
            find=true;
            break;
          }
        }
 else {
          if (room.getNaturalLanguageName().toLowerCase().indexOf(name.toLowerCase()) != -1) {
            find=true;
            break;
          }
        }
      }
    }
    if (subject != null && room.getSubject().toLowerCase().indexOf(subject.toLowerCase()) != -1) {
      find=true;
    }
    if (numusers > -1 && room.getParticipants().size() < numusers) {
      find=false;
    }
    if (numaxusers > -1 && room.getMaxUsers() < numaxusers) {
      find=false;
    }
    if (!includePasswordProtectedRooms && room.isPasswordProtected()) {
      find=false;
    }
    if (find && canBeIncludedInResult(room)) {
      mucs.add(room);
    }
  }
  final ResultSet<MUCRoom> searchResults=new ResultSetImpl<MUCRoom>(sortByUserAmount(mucs));
  final Element set=iq.getChildElement().element(QName.get("set",ResultSet.NAMESPACE_RESULT_SET_MANAGEMENT));
  final List<MUCRoom> mucrsm;
  final boolean applyRSM=set != null && !mucs.isEmpty();
  if (applyRSM) {
    if (!ResultSet.isValidRSMRequest(set)) {
      reply.setError(Condition.bad_request);
      return reply;
    }
    try {
      mucrsm=searchResults.applyRSMDirectives(set);
    }
 catch (    NullPointerException e) {
      final IQ itemNotFound=IQ.createResultIQ(iq);
      itemNotFound.setError(Condition.item_not_found);
      return itemNotFound;
    }
  }
 else {
    mucrsm=new ArrayList<MUCRoom>(searchResults);
  }
  final Element res=DocumentHelper.createElement(QName.get("query","jabber:iq:search"));
  final XDataFormImpl resultform=new XDataFormImpl(DataForm.TYPE_RESULT);
  boolean atLeastoneResult=false;
  for (  MUCRoom room : mucrsm) {
    ArrayList<XFormFieldImpl> fields=new ArrayList<XFormFieldImpl>();
    XFormFieldImpl innerfield=new XFormFieldImpl("name");
    innerfield.setType(FormField.TYPE_TEXT_SINGLE);
    innerfield.addValue(room.getNaturalLanguageName());
    fields.add(innerfield);
    innerfield=new XFormFieldImpl("subject");
    innerfield.setType(FormField.TYPE_TEXT_SINGLE);
    innerfield.addValue(room.getSubject());
    fields.add(innerfield);
    innerfield=new XFormFieldImpl("num_users");
    innerfield.setType(FormField.TYPE_TEXT_SINGLE);
    innerfield.addValue(String.valueOf(room.getOccupantsCount()));
    fields.add(innerfield);
    innerfield=new XFormFieldImpl("num_max_users");
    innerfield.setType(FormField.TYPE_TEXT_SINGLE);
    innerfield.addValue(String.valueOf(room.getMaxUsers()));
    fields.add(innerfield);
    innerfield=new XFormFieldImpl("is_password_protected");
    innerfield.setType(FormField.TYPE_BOOLEAN);
    innerfield.addValue(Boolean.toString(room.isPasswordProtected()));
    fields.add(innerfield);
    innerfield=new XFormFieldImpl("is_member_only");
    innerfield.setType(FormField.TYPE_BOOLEAN);
    innerfield.addValue(Boolean.toString(room.isMembersOnly()));
    fields.add(innerfield);
    innerfield=new XFormFieldImpl("jid");
    innerfield.setType(FormField.TYPE_TEXT_SINGLE);
    innerfield.addValue(room.getRole().getRoleAddress().toString());
    fields.add(innerfield);
    resultform.addItemFields(fields);
    atLeastoneResult=true;
  }
  if (atLeastoneResult) {
    final FormField rffName=new XFormFieldImpl("name");
    rffName.setLabel("Name");
    resultform.addReportedField(rffName);
    final FormField rffSubject=new XFormFieldImpl("subject");
    rffSubject.setLabel("Subject");
    resultform.addReportedField(rffSubject);
    final FormField rffNumUsers=new XFormFieldImpl("num_users");
    rffNumUsers.setLabel("Number of users");
    resultform.addReportedField(rffNumUsers);
    final FormField rffNumMaxUsers=new XFormFieldImpl("num_max_users");
    rffNumMaxUsers.setLabel("Max number allowed of users");
    resultform.addReportedField(rffNumMaxUsers);
    final FormField rffPasswordProtected=new XFormFieldImpl("is_password_protected");
    rffPasswordProtected.setLabel("Is a password protected room.");
    resultform.addReportedField(rffPasswordProtected);
    final FormField rffJID=new XFormFieldImpl("jid");
    rffJID.setLabel("JID");
    resultform.addReportedField(rffJID);
    FormField innerfield=new XFormFieldImpl("is_member_only");
    innerfield.setType(FormField.TYPE_TEXT_SINGLE);
    innerfield.setLabel("Is a member only room.");
    resultform.addReportedField(innerfield);
    res.add(resultform.asXMLElement());
  }
  if (applyRSM) {
    res.add(searchResults.generateSetElementFromResults(mucrsm));
  }
  reply.setChildElement(res);
  return reply;
}
