{
  String realHostname=null;
  int realPort=port;
  try {
    Log.debug("OS - Trying to connect to " + hostname + ":"+ port);
    DNSUtil.HostAddress address=DNSUtil.resolveXMPPServerDomain(hostname,port);
    realHostname=address.getHost();
    realPort=address.getPort();
    Socket socket=new Socket();
    socket.connect(new InetSocketAddress(realHostname,realPort),RemoteServerManager.getSocketTimeout());
    Log.debug("OS - Connection to " + hostname + ":"+ port+ " successful");
    connection=new SocketConnection(XMPPServer.getInstance().getPacketDeliverer(),socket,false);
    StringBuilder stream=new StringBuilder();
    stream.append("<stream:stream");
    stream.append(" xmlns:stream=\"http://etherx.jabber.org/streams\"");
    stream.append(" xmlns=\"jabber:server\"");
    stream.append(" xmlns:db=\"jabber:server:dialback\">");
    connection.deliverRawText(stream.toString());
    stream=null;
    XMPPPacketReader reader=new XMPPPacketReader();
    reader.setXPPFactory(FACTORY);
    reader.getXPPParser().setInput(new InputStreamReader(socket.getInputStream(),CHARSET));
    XmlPullParser xpp=reader.getXPPParser();
    for (int eventType=xpp.getEventType(); eventType != XmlPullParser.START_TAG; ) {
      eventType=xpp.next();
    }
    if ("jabber:server:dialback".equals(xpp.getNamespace("db"))) {
      String id=xpp.getAttributeValue("","id");
      OutgoingServerSocketReader socketReader=new OutgoingServerSocketReader(reader);
      if (authenticateDomain(socketReader,domain,hostname,id)) {
        StreamID streamID=new BasicStreamIDFactory().createStreamID(id);
        OutgoingServerSession session=new OutgoingServerSession(domain,connection,socketReader,streamID);
        connection.init(session);
        session.setAddress(new JID(null,hostname,null));
        return session;
      }
 else {
        connection.close();
      }
    }
 else {
      Log.debug("OS - Invalid namespace in packet: " + xpp.getText());
      StreamError error=new StreamError(StreamError.Condition.invalid_namespace);
      StringBuilder sb=new StringBuilder();
      sb.append(error.toXML());
      connection.deliverRawText(sb.toString());
      connection.close();
    }
  }
 catch (  IOException e) {
    Log.debug("Error connecting to the remote server: " + hostname + "(DNS lookup: "+ realHostname+ ":"+ realPort+ ")",e);
    if (connection != null) {
      connection.close();
    }
  }
catch (  Exception e) {
    Log.error("Error creating outgoing session to remote server: " + hostname + "(DNS lookup: "+ realHostname+ ")",e);
    if (connection != null) {
      connection.close();
    }
  }
  return null;
}
