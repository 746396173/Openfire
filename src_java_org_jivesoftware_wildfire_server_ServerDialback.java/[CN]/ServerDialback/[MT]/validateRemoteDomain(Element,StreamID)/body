{
  StringBuilder sb;
  String recipient=doc.attributeValue("to");
  String hostname=doc.attributeValue("from");
  Log.debug("RS - Received dialback key from host: " + hostname + " to: "+ recipient);
  if (!RemoteServerManager.canAccess(hostname)) {
    connection.deliverRawText(new StreamError(StreamError.Condition.host_unknown).toXML());
    connection.close();
    Log.debug("RS - Error, hostname is not allowed to establish a connection to " + "this server: " + recipient);
    return false;
  }
 else   if (isHostUnknown(recipient)) {
    connection.deliverRawText(new StreamError(StreamError.Condition.host_unknown).toXML());
    connection.close();
    Log.debug("RS - Error, hostname not recognized: " + recipient);
    return false;
  }
 else {
    boolean alreadyExists=false;
    for (    IncomingServerSession session : sessionManager.getIncomingServerSessions(hostname)) {
      if (recipient.equals(session.getLocalDomain())) {
        alreadyExists=true;
      }
    }
    if (alreadyExists) {
      connection.deliverRawText(new StreamError(StreamError.Condition.not_authorized).toXML());
      connection.close();
      Log.debug("RS - Error, incoming connection already exists from: " + hostname);
      return false;
    }
 else {
      String key=doc.getTextTrim();
      DNSUtil.HostAddress address=DNSUtil.resolveXMPPServerDomain(hostname,RemoteServerManager.getPortForServer(hostname));
      try {
        boolean valid=verifyKey(key,streamID.toString(),recipient,hostname,address.getHost(),address.getPort());
        Log.debug("RS - Sending key verification result to OS: " + hostname);
        sb=new StringBuilder();
        sb.append("<db:result");
        sb.append(" from=\"").append(recipient).append("\"");
        sb.append(" to=\"").append(hostname).append("\"");
        sb.append(" type=\"");
        sb.append(valid ? "valid" : "invalid");
        sb.append("\"/>");
        connection.deliverRawText(sb.toString());
        if (!valid) {
          connection.close();
        }
        return valid;
      }
 catch (      Exception e) {
        Log.warn("Error verifying key",e);
        connection.deliverRawText(new StreamError(StreamError.Condition.remote_connection_failed).toXML());
        connection.close();
        return false;
      }
    }
  }
}
