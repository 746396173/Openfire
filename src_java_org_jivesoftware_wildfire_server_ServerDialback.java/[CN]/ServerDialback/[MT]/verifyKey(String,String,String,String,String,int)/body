{
  XMPPPacketReader reader=null;
  Writer writer=null;
  Log.debug("RS - Trying to connect to Authoritative Server: " + hostname + ":"+ port);
  Socket socket=new Socket();
  socket.connect(new InetSocketAddress(host,port),RemoteServerManager.getSocketTimeout());
  socket.setSoTimeout(RemoteServerManager.getSocketTimeout());
  Log.debug("RS - Connection to AS: " + hostname + ":"+ port+ " successful");
  try {
    reader=new XMPPPacketReader();
    reader.setXPPFactory(FACTORY);
    reader.getXPPParser().setInput(new InputStreamReader(socket.getInputStream(),CHARSET));
    writer=new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(),CHARSET));
    StringBuilder stream=new StringBuilder();
    stream.append("<stream:stream");
    stream.append(" xmlns:stream=\"http://etherx.jabber.org/streams\"");
    stream.append(" xmlns=\"jabber:server\"");
    stream.append(" xmlns:db=\"jabber:server:dialback\">");
    writer.write(stream.toString());
    writer.flush();
    stream=null;
    XmlPullParser xpp=reader.getXPPParser();
    for (int eventType=xpp.getEventType(); eventType != XmlPullParser.START_TAG; ) {
      eventType=xpp.next();
    }
    if ("jabber:server:dialback".equals(xpp.getNamespace("db"))) {
      Log.debug("RS - Asking AS to verify dialback key for id" + streamID);
      StringBuilder sb=new StringBuilder();
      sb.append("<db:verify");
      sb.append(" from=\"").append(recipient).append("\"");
      sb.append(" to=\"").append(hostname).append("\"");
      sb.append(" id=\"").append(streamID).append("\">");
      sb.append(key);
      sb.append("</db:verify>");
      writer.write(sb.toString());
      writer.flush();
      sb=null;
      try {
        Element doc=reader.parseDocument().getRootElement();
        if ("db".equals(doc.getNamespacePrefix()) && "verify".equals(doc.getName())) {
          if (!streamID.equals(doc.attributeValue("id"))) {
            writer.write(new StreamError(StreamError.Condition.invalid_id).toXML());
            writer.flush();
            throw new RemoteConnectionFailedException("Invalid ID");
          }
 else           if (isHostUnknown(doc.attributeValue("to"))) {
            writer.write(new StreamError(StreamError.Condition.host_unknown).toXML());
            writer.flush();
            throw new RemoteConnectionFailedException("Host unknown");
          }
 else           if (!hostname.equals(doc.attributeValue("from"))) {
            writer.write(new StreamError(StreamError.Condition.invalid_from).toXML());
            writer.flush();
            throw new RemoteConnectionFailedException("Invalid From");
          }
 else {
            boolean valid="valid".equals(doc.attributeValue("type"));
            Log.debug("RS - Key was " + (valid ? "" : "NOT ") + "VERIFIED by the Authoritative Server for: "+ hostname);
            return valid;
          }
        }
 else {
          Log.debug("db:verify answer was: " + doc.asXML());
        }
      }
 catch (      DocumentException e) {
        Log.error("An error occured connecting to the Authoritative Server",e);
        throw new RemoteConnectionFailedException("Error connecting to the Authoritative Server");
      }
    }
 else {
      writer.write(new StreamError(StreamError.Condition.invalid_namespace).toXML());
      writer.flush();
      throw new RemoteConnectionFailedException("Invalid namespace");
    }
  }
  finally {
    try {
      Log.debug("RS - Closing connection to Authoritative Server: " + hostname);
      StringBuilder sb=new StringBuilder();
      sb.append("</stream:stream>");
      writer.write(sb.toString());
      writer.flush();
      socket.close();
    }
 catch (    IOException ioe) {
    }
  }
  return false;
}
