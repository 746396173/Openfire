{
  if (!isEnabled()) {
    IQ reply=IQ.createResultIQ(packet);
    reply.setChildElement(packet.getChildElement().createCopy());
    reply.setError(PacketError.Condition.service_unavailable);
    return reply;
  }
  final JID senderJID=packet.getFrom();
  if (packet.getTo() == null) {
    if (packet.getType() == IQ.Type.set) {
      final String jidFrom=senderJID.toBareJID();
      PEPService pepService=pepServiceManager.getPEPService(jidFrom);
      if (pepService == null) {
        try {
          pepService=pepServiceManager.create(senderJID);
        }
 catch (        IllegalArgumentException ex) {
          final IQ reply=IQ.createResultIQ(packet);
          reply.setChildElement(packet.getChildElement().createCopy());
          reply.setError(PacketError.Condition.not_allowed);
          return reply;
        }
        pepServiceManager.start(pepService);
        try {
          final RosterManager rm=XMPPServer.getInstance().getRosterManager();
          final Roster roster=rm.getRoster(senderJID.getNode());
          for (          final RosterItem item : roster.getRosterItems()) {
            if (item.getSubStatus() == RosterItem.SUB_BOTH || item.getSubStatus() == RosterItem.SUB_FROM) {
              createSubscriptionToPEPService(pepService,item.getJid(),senderJID);
            }
          }
        }
 catch (        UserNotFoundException e) {
        }
      }
      final Element childElement=packet.getChildElement();
      final Element publishElement=childElement.element("publish");
      if (publishElement != null) {
        final String nodeID=publishElement.attributeValue("node");
        if (nodeID.startsWith("http://www.xmpp.org/extensions/xep-0084.html")) {
          IQ reply=IQ.createResultIQ(packet);
          reply.setChildElement(packet.getChildElement().createCopy());
          reply.setError(PacketError.Condition.feature_not_implemented);
          return reply;
        }
        if (pepService.getNode(nodeID) == null) {
          final JID creator=new JID(jidFrom);
          final LeafNode newNode=new LeafNode(pepService,pepService.getRootCollectionNode(),nodeID,creator);
          newNode.addOwner(creator);
          newNode.saveToDB();
        }
      }
      pepServiceManager.process(pepService,packet);
    }
 else     if (packet.getType() == IQ.Type.get) {
      final String jidFrom=senderJID.toBareJID();
      final PEPService pepService=pepServiceManager.getPEPService(jidFrom);
      final IQ deepCopy=packet.createCopy();
      deepCopy.setTo(jidFrom);
      if (pepService != null) {
        pepServiceManager.process(pepService,deepCopy);
      }
 else {
        PEPService dummyService=new PEPService(XMPPServer.getInstance(),senderJID.toBareJID());
        pepServiceManager.process(dummyService,deepCopy);
      }
    }
  }
 else   if (packet.getType() == IQ.Type.get || packet.getType() == IQ.Type.set) {
    final String jidTo=packet.getTo().toBareJID();
    final PEPService pepService=pepServiceManager.getPEPService(jidTo);
    if (pepService != null) {
      pepServiceManager.process(pepService,packet);
    }
 else {
      PEPService dummyService=new PEPService(XMPPServer.getInstance(),senderJID.toBareJID());
      pepServiceManager.process(dummyService,packet);
    }
  }
 else {
    return null;
  }
  return null;
}
