{
  localip=properties.getProperty("com.voxbone.kelpie.ip");
  localport=Integer.parseInt(properties.getProperty("com.voxbone.kelpie.sip_port","5060"));
  remoteip=properties.getProperty("com.voxbone.kelpie.sip_gateway");
  sipListener=new VideoBridgeSipListener(properties.getProperty("com.voxbone.kelpie.hostname"));
  agentName=properties.getProperty("com.voxbone.kelpie.sip.user-agent","Openfire Meetings");
  clientVersion=properties.getProperty("com.voxbone.kelpie.version");
  String nameOS=System.getProperty("os.name");
  String versOS=System.getProperty("os.version");
  agentName=agentName + " " + clientVersion+ " ("+ nameOS+ "/"+ versOS+ ")";
  sipFactory=SipFactory.getInstance();
  sipFactory.setPathName("gov.nist");
  properties.setProperty("javax.sip.STACK_NAME","ofmeetsip");
  try {
    sipStack=sipFactory.createSipStack(properties);
    headerFactory=sipFactory.createHeaderFactory();
    addressFactory=sipFactory.createAddressFactory();
    messageFactory=sipFactory.createMessageFactory();
  }
 catch (  PeerUnavailableException e) {
    Log.error(e.toString(),e);
  }
  try {
    ListeningPoint udp=sipStack.createListeningPoint(localip,localport,"udp");
    sipProvider=sipStack.createSipProvider(udp);
    sipProvider.setAutomaticDialogSupportEnabled(false);
    sipProvider.addSipListener(sipListener);
    registerWithDefaultProxy();
  }
 catch (  TransportNotSupportedException e) {
    Log.error(e.toString(),e);
  }
catch (  InvalidArgumentException e) {
    Log.error(e.toString(),e);
  }
catch (  ObjectInUseException e) {
    Log.error(e.toString(),e);
  }
catch (  TooManyListenersException e) {
    Log.error(e.toString(),e);
  }
}
