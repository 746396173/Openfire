{
  String language=rootNode.attributeValue("xml:lang");
  if (language == null || "".equals(language)) {
    language="en";
  }
  int wait=getIntAttribute(rootNode.attributeValue("wait"),60);
  int hold=getIntAttribute(rootNode.attributeValue("hold"),1);
  String version=rootNode.attributeValue("ver");
  if (version == null || "".equals(version)) {
    version="1.5";
  }
  HttpSession session=createSession(connection.getRequestId(),address,connection);
  session.setWait(Math.min(wait,getMaxWait()));
  session.setHold(hold);
  session.setSecure(connection.isSecure());
  session.setMaxPollingInterval(getPollingInterval());
  session.setMaxRequests(getMaxRequests());
  session.setMaxPause(getMaxPause());
  if (session.isPollingSession()) {
    session.setDefaultInactivityTimeout(getPollingInactivityTimeout());
  }
 else {
    session.setDefaultInactivityTimeout(getInactivityTimeout());
  }
  session.resetInactivityTimeout();
  session.setLanguage(language);
  String[] versionString=version.split("\\.");
  session.setMajorVersion(Integer.parseInt(versionString[0]));
  session.setMinorVersion(Integer.parseInt(versionString[1]));
  connection.setSession(session);
  try {
    connection.deliverBody(createSessionCreationResponse(session));
  }
 catch (  HttpConnectionClosedException e) {
    Log.error("Error creating session.",e);
    throw new HttpBindException("Internal server error",BoshBindingError.internalServerError);
  }
catch (  DocumentException e) {
    Log.error("Error creating session.",e);
    throw new HttpBindException("Internal server error",BoshBindingError.internalServerError);
  }
catch (  IOException e) {
    Log.error("Error creating session.",e);
    throw new HttpBindException("Internal server error",BoshBindingError.internalServerError);
  }
  return session;
}
