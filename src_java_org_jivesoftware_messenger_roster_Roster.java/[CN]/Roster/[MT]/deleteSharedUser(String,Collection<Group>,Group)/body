{
  JID jid=XMPPServer.getInstance().createJID(deletedUser,"");
  try {
    RosterItem item=getRosterItem(jid);
    int groupSize=item.getSharedGroups().size() + item.getInvisibleSharedGroups().size();
    if (item.isOnlyShared() && groupSize == 1 && !(deletedGroup.isUser(deletedUser) && rosterManager.isGroupPublic(deletedGroup))) {
      deleteRosterItem(jid,false);
    }
 else {
      if (!(deletedGroup.isUser(deletedUser) && rosterManager.isGroupPublic(deletedGroup))) {
        item.removeSharedGroup(deletedGroup);
      }
      for (      Group group : groups) {
        if (!rosterManager.isGroupVisible(group,getUsername())) {
          item.removeSharedGroup(group);
        }
      }
      if (item.isOnlyShared()) {
        Collection<Group> userGroups=null;
        try {
          User rosterUser=UserManager.getInstance().getUser(getUsername());
          GroupManager groupManager=GroupManager.getInstance();
          userGroups=groupManager.getGroups(rosterUser);
          if (rosterManager.hasMutualVisibility(getUsername(),userGroups,jid.getNode(),groups)) {
            item.setSubStatus(RosterItem.SUB_BOTH);
          }
 else {
            item.setSubStatus(RosterItem.SUB_FROM);
            for (            Group group : groups) {
              if (rosterManager.isGroupVisible(group,getUsername())) {
                item.setSubStatus(RosterItem.SUB_TO);
              }
            }
          }
        }
 catch (        UserNotFoundException e) {
        }
      }
      broadcast(item,false);
    }
  }
 catch (  SharedGroupException e) {
  }
catch (  UserNotFoundException e) {
  }
}
