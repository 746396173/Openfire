{
  JID jid=XMPPServer.getInstance().createJID(deletedUser,"");
  try {
    RosterItem item=getRosterItem(jid);
    int groupSize=item.getSharedGroups().size() + item.getInvisibleSharedGroups().size();
    if (item.isOnlyShared() && groupSize == 1) {
      if (!item.getSharedGroups().contains(sharedGroup)) {
        return;
      }
      deleteRosterItem(jid,false);
    }
 else {
      item.removeSharedGroup(sharedGroup);
      if (item.isOnlyShared()) {
        Collection<Group> userGroups=null;
        Collection<Group> sharedGroups=new ArrayList<Group>();
        try {
          User rosterUser=UserManager.getInstance().getUser(getUsername());
          GroupManager groupManager=GroupManager.getInstance();
          userGroups=groupManager.getGroups(rosterUser);
          sharedGroups.addAll(item.getSharedGroups());
          if (rosterManager.hasMutualVisibility(getUsername(),userGroups,jid.getNode(),sharedGroups)) {
            item.setSubStatus(RosterItem.SUB_BOTH);
          }
 else           if (item.getSharedGroups().isEmpty() && !item.getInvisibleSharedGroups().isEmpty()) {
            item.setSubStatus(RosterItem.SUB_FROM);
          }
 else {
            item.setSubStatus(RosterItem.SUB_TO);
          }
        }
 catch (        UserNotFoundException e) {
        }
      }
      broadcast(item);
    }
  }
 catch (  SharedGroupException e) {
  }
catch (  UserNotFoundException e) {
  }
}
