{
  boolean newItem=false;
  RosterItem item=null;
  JID jid=XMPPServer.getInstance().createJID(addedUser,"");
  try {
    item=getRosterItem(jid);
    if (item.getSharedGroups().contains(group)) {
      return;
    }
    newItem=false;
  }
 catch (  UserNotFoundException e) {
    try {
      User user=UserManager.getInstance().getUser(addedUser);
      String nickname="".equals(user.getName()) ? jid.getNode() : user.getName();
      item=new RosterItem(jid,RosterItem.SUB_BOTH,RosterItem.ASK_NONE,RosterItem.RECV_NONE,nickname,null);
      rosterItems.put(item.getJid().toBareJID(),item);
      newItem=true;
    }
 catch (    UserNotFoundException ex) {
      Log.error("Group (" + group.getName() + ") includes non-existent username ("+ addedUser+ ")");
    }
  }
  if (newItem || item.isOnlyShared()) {
    Collection<Group> userGroups=null;
    Collection<Group> sharedGroups=new ArrayList<Group>();
    try {
      User rosterUser=UserManager.getInstance().getUser(getUsername());
      GroupManager groupManager=GroupManager.getInstance();
      userGroups=groupManager.getGroups(rosterUser);
      sharedGroups.addAll(item.getSharedGroups());
      sharedGroups.add(group);
      if (rosterManager.hasMutualVisibility(getUsername(),userGroups,jid.getNode(),sharedGroups)) {
        item.setSubStatus(RosterItem.SUB_BOTH);
      }
 else       if (group.isUser(addedUser) && !group.isUser(getUsername())) {
        item.setSubStatus(RosterItem.SUB_TO);
      }
 else       if (!group.isUser(addedUser) && group.isUser(getUsername())) {
        item.setSubStatus(RosterItem.SUB_FROM);
      }
    }
 catch (    UserNotFoundException e) {
    }
  }
  if (item.getSubStatus() != RosterItem.SUB_FROM) {
    item.addSharedGroup(group);
  }
 else {
    item.addInvisibleSharedGroup(group);
  }
  broadcast(item);
  if (item.getSubStatus() == RosterItem.SUB_BOTH || item.getSubStatus() == RosterItem.SUB_TO) {
    presenceManager.probePresence(username,item.getJid());
  }
}
