{
  presenceManager=XMPPServer.getInstance().getPresenceManager();
  rosterManager=XMPPServer.getInstance().getRosterManager();
  sessionManager=SessionManager.getInstance();
  this.username=username;
  Collection<Group> sharedGroups=null;
  Collection<Group> userGroups=null;
  try {
    User rosterUser=UserManager.getInstance().getUser(getUsername());
    sharedGroups=rosterManager.getSharedGroups(rosterUser);
    userGroups=GroupManager.getInstance().getGroups(rosterUser);
  }
 catch (  UserNotFoundException e) {
    sharedGroups=new ArrayList<Group>();
  }
  rosterItemProvider=RosterItemProvider.getInstance();
  Iterator items=rosterItemProvider.getItems(username);
  while (items.hasNext()) {
    RosterItem item=(RosterItem)items.next();
    for (    Group group : sharedGroups) {
      if (group.isUser(item.getJid())) {
        item.addSharedGroup(group);
        item.setSubStatus(RosterItem.SUB_BOTH);
      }
    }
    rosterItems.put(item.getJid().toBareJID(),item);
  }
  Map<JID,List<Group>> sharedUsers=getSharedUsers(sharedGroups);
  for (  JID jid : sharedUsers.keySet()) {
    try {
      Collection<Group> itemGroups=new ArrayList<Group>();
      User user=UserManager.getInstance().getUser(jid.getNode());
      String nickname="".equals(user.getName()) ? jid.getNode() : user.getName();
      RosterItem item=new RosterItem(jid,RosterItem.SUB_TO,RosterItem.ASK_NONE,RosterItem.RECV_NONE,nickname,null);
      for (      Group group : sharedUsers.get(jid)) {
        if (group.isUser(jid)) {
          item.addSharedGroup(group);
          itemGroups.add(group);
        }
 else {
          item.addInvisibleSharedGroup(group);
        }
      }
      if (rosterManager.hasMutualVisibility(username,userGroups,jid.getNode(),itemGroups)) {
        item.setSubStatus(RosterItem.SUB_BOTH);
      }
 else {
        boolean belongsToGroup=false;
        for (        Group group : sharedUsers.get(jid)) {
          if (group.isUser(jid)) {
            belongsToGroup=true;
          }
        }
        if (!belongsToGroup) {
          item.setSubStatus(RosterItem.SUB_FROM);
        }
      }
      rosterItems.put(item.getJid().toBareJID(),item);
    }
 catch (    UserNotFoundException e) {
      Log.error("Groups (" + sharedUsers.get(jid) + ") include non-existent username ("+ jid.getNode()+ ")");
    }
  }
}
