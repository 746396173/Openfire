def WriteMakeRule(self, outputs, inputs, actions=None, comment=None, order_only=False, force=False, phony=False):
    "Write a Makefile rule, with some extra tricks.\n\n    outputs: a list of outputs for the rule (note: this is not directly\n             supported by make; see comments below)\n    inputs: a list of inputs for the rule\n    actions: a list of shell commands to run for the rule\n    comment: a comment to put in the Makefile above the rule (also useful\n             for making this Python script's code self-documenting)\n    order_only: if true, makes the dependency order-only\n    force: if true, include FORCE_DO_CMD as an order-only dep\n    phony: if true, the rule does not actually generate the named output, the\n           output is just a name to run the rule\n    "
    outputs = map(QuoteSpaces, outputs)
    inputs = map(QuoteSpaces, inputs)
    if comment:
        self.WriteLn(('# ' + comment))
    if phony:
        self.WriteLn(('.PHONY: ' + ' '.join(outputs)))
    if order_only:
        order_insert = '| '
        pick_output = ' '.join(outputs)
    else:
        order_insert = ''
        pick_output = outputs[0]
    if force:
        force_append = ' FORCE_DO_CMD'
    else:
        force_append = ''
    if actions:
        self.WriteLn(('%s: TOOLSET := $(TOOLSET)' % outputs[0]))
    self.WriteLn(('%s: %s%s%s' % (pick_output, order_insert, ' '.join(inputs), force_append)))
    if actions:
        for action in actions:
            self.WriteLn(('\t%s' % action))
    if ((not order_only) and (len(outputs) > 1)):
        self.WriteLn(('%s: %s' % (' '.join(outputs[1:]), outputs[0])))
        self.WriteLn(('%s: ;' % ' '.join(outputs[1:])))
    self.WriteLn()
