{
  List<ClientSession> sessions=new ArrayList<ClientSession>();
  for (  JID address : getRoutes(recipientJID,packet.getFrom())) {
    ClientSession session=getClientRoute(address);
    if (session != null) {
      sessions.add(session);
    }
  }
  List<ClientSession> nonNegativePrioritySessions=getNonNegativeSessions(sessions,0);
  List<ClientSession> highestPrioritySessions=getHighestPrioritySessions(nonNegativePrioritySessions);
  for (  ClientSession session : nonNegativePrioritySessions) {
    if (shouldCarbonCopyToResource(session,packet,isPrivate)) {
      session.process(packet);
    }
  }
  if (highestPrioritySessions.isEmpty()) {
    Log.debug("Unable to route packet. No session is available so store offline. {} ",packet.toXML());
    return false;
  }
 else   if (highestPrioritySessions.size() == 1) {
    if (!shouldCarbonCopyToResource(highestPrioritySessions.get(0),packet,isPrivate)) {
      highestPrioritySessions.get(0).process(packet);
    }
  }
 else {
    if (!JiveGlobals.getBooleanProperty("route.all-resources",false)) {
      Collections.sort(highestPrioritySessions,new Comparator<ClientSession>(){
        public int compare(        ClientSession o1,        ClientSession o2){
          int thisVal=getShowValue(o1);
          int anotherVal=getShowValue(o2);
          return (thisVal < anotherVal ? -1 : (thisVal == anotherVal ? 0 : 1));
        }
        /** 
 * Priorities are: chat, available, away, xa, dnd.
 */
        private int getShowValue(        ClientSession session){
          Presence.Show show=session.getPresence().getShow();
          if (show == Presence.Show.chat) {
            return 1;
          }
 else           if (show == null) {
            return 2;
          }
 else           if (show == Presence.Show.away) {
            return 3;
          }
 else           if (show == Presence.Show.xa) {
            return 4;
          }
 else {
            return 5;
          }
        }
      }
);
      List<ClientSession> targets=new ArrayList<ClientSession>();
      Presence.Show showFilter=highestPrioritySessions.get(0).getPresence().getShow();
      for (      ClientSession session : highestPrioritySessions) {
        if (session.getPresence().getShow() == showFilter) {
          targets.add(session);
        }
 else {
          break;
        }
      }
      Collections.sort(targets,new Comparator<ClientSession>(){
        public int compare(        ClientSession o1,        ClientSession o2){
          return o2.getLastActiveDate().compareTo(o1.getLastActiveDate());
        }
      }
);
      ClientSession session=targets.get(0);
      if (!shouldCarbonCopyToResource(session,packet,isPrivate)) {
        session.process(packet);
      }
    }
 else {
      for (      ClientSession session : highestPrioritySessions) {
        if (!shouldCarbonCopyToResource(session,packet,isPrivate)) {
          session.process(packet);
        }
      }
    }
  }
  return true;
}
