{
  Lock clientLock=CacheFactory.getLock(nodeID,usersCache);
  try {
    clientLock.lock();
    List<String> remoteClientRoutes=new ArrayList<String>();
    for (    Map.Entry<String,ClientRoute> entry : usersCache.entrySet()) {
      if (entry.getValue().getNodeID().equals(nodeID)) {
        remoteClientRoutes.add(entry.getKey());
      }
    }
    for (    Map.Entry<String,ClientRoute> entry : anonymousUsersCache.entrySet()) {
      if (entry.getValue().getNodeID().equals(nodeID)) {
        remoteClientRoutes.add(entry.getKey());
      }
    }
    for (    String route : remoteClientRoutes) {
      removeClientRoute(new JID(route));
    }
  }
  finally {
    clientLock.unlock();
  }
  Lock serverLock=CacheFactory.getLock(nodeID,serversCache);
  try {
    serverLock.lock();
    List<String> remoteServerDomains=new ArrayList<String>();
    for (    Map.Entry<String,byte[]> entry : serversCache.entrySet()) {
      if (entry.getValue().equals(nodeID)) {
        remoteServerDomains.add(entry.getKey());
      }
    }
    for (    String domain : remoteServerDomains) {
      removeServerRoute(new JID(domain));
    }
  }
  finally {
    serverLock.unlock();
  }
  Lock componentLock=CacheFactory.getLock(nodeID,componentsCache);
  try {
    componentLock.lock();
    List<String> remoteComponents=new ArrayList<String>();
    for (    Map.Entry<String,Set<NodeID>> entry : componentsCache.entrySet()) {
      if (entry.getValue().remove(nodeID) && entry.getValue().size() == 0) {
        remoteComponents.add(entry.getKey());
      }
    }
    for (    String jid : remoteComponents) {
      removeComponentRoute(new JID(jid));
    }
  }
  finally {
    componentLock.unlock();
  }
}
