{
  LinkedList<RosterItem> itemList=new LinkedList<RosterItem>();
  Map<Long,RosterItem> itemsByID=new HashMap<Long,RosterItem>();
  Connection con=null;
  PreparedStatement pstmt=null;
  ResultSet rs;
  try {
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(LOAD_ROSTER);
    pstmt.setString(1,username);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      RosterItem item=new RosterItem(rs.getLong(2),new JID(rs.getString(1)),RosterItem.SubType.getTypeFromInt(rs.getInt(3)),RosterItem.AskType.getTypeFromInt(rs.getInt(4)),RosterItem.RecvType.getTypeFromInt(rs.getInt(5)),rs.getString(6),null);
      itemList.add(item);
      itemsByID.put(item.getID(),item);
    }
    rs.close();
    pstmt.close();
    pstmt=null;
    if (!itemList.isEmpty()) {
      StringBuilder sb=new StringBuilder(100);
      sb.append(LOAD_ROSTER_ITEM_GROUPS).append(" WHERE rosterID IN (");
      for (      RosterItem item : itemList) {
        sb.append(item.getID()).append(",");
      }
      sb.setLength(sb.length() - 1);
      sb.append(") ORDER BY rosterID, rank");
      pstmt=con.prepareStatement(sb.toString());
      rs=pstmt.executeQuery();
      while (rs.next()) {
        itemsByID.get(rs.getLong(1)).getGroups().add(rs.getString(2));
      }
      rs.close();
    }
  }
 catch (  SQLException e) {
    Log.error(LocaleUtils.getLocalizedString("admin.error"),e);
  }
 finally {
    DbConnectionManager.closeConnection(pstmt,con);
  }
  return itemList.iterator();
}
