{
  if (update.getFrom() == null) {
    return;
  }
  if (localServer.isLocal(update.getFrom())) {
    boolean keepTrack=false;
    Map<String,Set<String>> map;
    String name=update.getFrom().getNode();
    if (name != null && !"".equals(name)) {
      if (!RosterManager.isRosterServiceEnabled()) {
        keepTrack=true;
      }
 else {
        try {
          Roster roster=rosterManager.getRoster(name);
          RosterItem rosterItem=null;
          try {
            rosterItem=roster.getRosterItem(update.getTo());
          }
 catch (          UserNotFoundException e) {
          }
          if (rosterItem == null || RosterItem.SUB_NONE == rosterItem.getSubStatus() || RosterItem.SUB_TO == rosterItem.getSubStatus()) {
            keepTrack=true;
          }
        }
 catch (        UserNotFoundException e) {
          Log.warn("Presence being sent from unknown user " + name,e);
        }
catch (        PacketException e) {
          Log.error(LocaleUtils.getLocalizedString("admin.error"),e);
        }
      }
    }
 else     if (update.getFrom().getResource() != null) {
      keepTrack=true;
    }
    if (keepTrack) {
      String sender=update.getFrom().toString();
      map=directedPresences.get(sender);
      if (Presence.Type.unavailable.equals(update.getType())) {
        if (map != null) {
          if (routingTable.hasClientRoute(handlerJID)) {
            map.remove(handlerJID.toString());
            if (map.isEmpty()) {
              directedPresences.remove(sender);
            }
          }
 else {
            Set<String> jids=map.get(handlerJID.toString());
            if (jids != null) {
              jids.remove(jid);
              if (jids.isEmpty()) {
                map.remove(handlerJID.toString());
                if (map.isEmpty()) {
                  directedPresences.remove(sender);
                }
              }
            }
          }
        }
      }
 else {
        if (map == null) {
          map=new ConcurrentHashMap<String,Set<String>>();
          directedPresences.put(sender,map);
        }
        if (map.get(handlerJID.toString()) == null) {
          map.put(handlerJID.toString(),new ConcurrentHashSet<String>());
        }
        map.get(handlerJID.toString()).add(jid);
      }
    }
  }
}
