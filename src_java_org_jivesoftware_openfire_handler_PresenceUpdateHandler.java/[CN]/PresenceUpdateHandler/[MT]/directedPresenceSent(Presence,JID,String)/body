{
  if (update.getFrom() == null) {
    return;
  }
  if (localServer.isLocal(update.getFrom())) {
    boolean keepTrack=false;
    String name=update.getFrom().getNode();
    if (name != null && !"".equals(name)) {
      if (!RosterManager.isRosterServiceEnabled()) {
        keepTrack=true;
      }
 else {
        try {
          Roster roster=rosterManager.getRoster(name);
          RosterItem rosterItem=null;
          try {
            rosterItem=roster.getRosterItem(update.getTo());
          }
 catch (          UserNotFoundException e) {
          }
          if (rosterItem == null || RosterItem.SUB_NONE == rosterItem.getSubStatus() || RosterItem.SUB_TO == rosterItem.getSubStatus()) {
            keepTrack=true;
          }
        }
 catch (        UserNotFoundException e) {
          Log.warn("Presence being sent from unknown user " + name,e);
        }
catch (        PacketException e) {
          Log.error(LocaleUtils.getLocalizedString("admin.error"),e);
        }
      }
    }
 else     if (update.getFrom().getResource() != null) {
      keepTrack=true;
    }
    if (keepTrack) {
      String sender=update.getFrom().toString();
      Collection<DirectedPresence> directedPresences=directedPresencesCache.get(sender);
      if (Presence.Type.unavailable.equals(update.getType())) {
        if (directedPresences != null) {
          if (routingTable.hasClientRoute(handlerJID)) {
            for (            DirectedPresence directedPresence : directedPresences) {
              if (directedPresence.getHandler().equals(handlerJID)) {
                directedPresences.remove(directedPresence);
                break;
              }
            }
          }
 else {
            for (            DirectedPresence directedPresence : directedPresences) {
              if (directedPresence.getHandler().equals(handlerJID)) {
                directedPresence.removeReceiver(jid);
                if (directedPresence.isEmpty()) {
                  directedPresences.remove(directedPresence);
                }
                break;
              }
            }
          }
          if (directedPresences.isEmpty()) {
            directedPresencesCache.remove(sender);
            localDirectedPresences.remove(sender);
          }
 else {
            directedPresencesCache.put(sender,directedPresences);
            localDirectedPresences.put(sender,directedPresences);
          }
        }
      }
 else {
        if (directedPresences == null) {
          directedPresences=new ConcurrentLinkedQueue<DirectedPresence>();
        }
        DirectedPresence affectedDirectedPresence=null;
        for (        DirectedPresence directedPresence : directedPresences) {
          if (directedPresence.getHandler().equals(handlerJID)) {
            affectedDirectedPresence=directedPresence;
            break;
          }
        }
        if (affectedDirectedPresence == null) {
          affectedDirectedPresence=new DirectedPresence(handlerJID);
        }
        affectedDirectedPresence.addReceiver(jid);
        directedPresencesCache.put(sender,directedPresences);
        localDirectedPresences.put(sender,directedPresences);
      }
    }
  }
}
