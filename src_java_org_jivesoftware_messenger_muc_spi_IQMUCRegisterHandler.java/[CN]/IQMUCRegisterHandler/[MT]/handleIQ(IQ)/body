{
  Session session=packet.getOriginatingSession();
  IQ reply=null;
  MUCRoom room=mucServer.getChatRoom(packet.getRecipient().getNamePrep());
  if (room == null) {
    reply=packet.createResult();
    reply.setError(XMPPError.Code.NOT_FOUND);
    return reply;
  }
  if (IQ.GET.equals(packet.getType())) {
    reply=packet.createResult();
    String nickname=room.getReservedNickname(packet.getSender().toBareStringPrep());
    if (nickname != null) {
      MetaDataFragment currentRegistration=(MetaDataFragment)probeResult.createDeepCopy();
      currentRegistration.setProperty("query.registered",null);
      XDataFormImpl form=(XDataFormImpl)currentRegistration.getFragment("x","jabber:x:data");
      form.getField("muc#register_roomnick").addValue(nickname);
      reply.setChildFragment(currentRegistration);
    }
 else {
      reply.setChildFragment(probeResult);
    }
  }
 else   if (IQ.SET.equals(packet.getType())) {
    try {
      List presences=new ArrayList();
      reply=packet.createResult();
      XMPPFragment iq=packet.getChildFragment();
      MetaDataFragment metaData=MetaDataFragment.convertToMetaData(iq);
      if (metaData.includesProperty("query.remove")) {
        presences.addAll(room.addNone(packet.getSender().toBareStringPrep(),room.getRole()));
      }
 else {
        Element formElement=((XMPPDOMFragment)iq).getRootElement().element("x");
        if (formElement != null) {
          XDataFormImpl registrationForm=new XDataFormImpl();
          registrationForm.parse(formElement);
          Iterator values=registrationForm.getField("muc#register_roomnick").getValues();
          String nickname=(values.hasNext() ? (String)values.next() : null);
          presences.addAll(room.addMember(packet.getSender().toBareStringPrep(),nickname,room.getRole()));
        }
 else {
          reply.setError(XMPPError.Code.BAD_REQUEST);
        }
      }
      try {
        for (Iterator it=presences.iterator(); it.hasNext(); ) {
          room.send((Presence)it.next());
        }
      }
 catch (      UnauthorizedException e) {
      }
    }
 catch (    ForbiddenException e) {
      reply=packet.createResult();
      reply.setError(XMPPError.Code.FORBIDDEN);
    }
catch (    ConflictException e) {
      reply=packet.createResult();
      reply.setError(XMPPError.Code.CONFLICT);
    }
catch (    Exception e) {
      Log.error(e);
    }
  }
  if (reply != null) {
    session.getConnection().deliver(reply);
  }
  return null;
}
