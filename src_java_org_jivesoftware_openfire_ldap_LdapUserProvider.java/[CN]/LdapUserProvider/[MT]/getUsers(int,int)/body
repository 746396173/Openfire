{
  List<String> usernames=new ArrayList<String>();
  LdapContext ctx=null;
  LdapContext ctx2=null;
  try {
    ctx=manager.getContext(baseDN);
    Control[] searchControl=new Control[]{new SortControl(new String[]{manager.getUsernameField()},Control.NONCRITICAL)};
    ctx.setRequestControls(searchControl);
    SearchControls searchControls=new SearchControls();
    if (manager.isSubTreeSearch()) {
      searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);
    }
 else {
      searchControls.setSearchScope(SearchControls.ONELEVEL_SCOPE);
    }
    searchControls.setReturningAttributes(new String[]{manager.getUsernameField()});
    if (!(Boolean.valueOf(JiveGlobals.getXMLProperty("ldap.clientSideSorting")))) {
      searchControls.setCountLimit(startIndex + numResults);
    }
    String filter=MessageFormat.format(manager.getSearchFilter(),"*");
    NamingEnumeration answer=ctx.search("",filter,searchControls);
    NamingEnumeration answer2=null;
    if (alternateBaseDN != null) {
      ctx2=manager.getContext(alternateBaseDN);
      ctx2.setRequestControls(searchControl);
      answer2=ctx2.search("",filter,searchControls);
    }
    if (Boolean.valueOf(JiveGlobals.getXMLProperty("ldap.clientSideSorting"))) {
      while (answer.hasMoreElements()) {
        String username=(String)((SearchResult)answer.next()).getAttributes().get(manager.getUsernameField()).get();
        String suffix=manager.getUsernameSuffix();
        if (suffix.length() > 0 && username.endsWith(suffix)) {
          username=username.substring(0,username.length() - suffix.length());
        }
        usernames.add(JID.escapeNode(username));
      }
      if (alternateBaseDN != null) {
        while (answer2.hasMoreElements()) {
          String username=(String)((SearchResult)answer2.next()).getAttributes().get(manager.getUsernameField()).get();
          String suffix=manager.getUsernameSuffix();
          if (suffix.length() > 0 && username.endsWith(suffix)) {
            username=username.substring(0,username.length() - suffix.length());
          }
          usernames.add(JID.escapeNode(username));
        }
      }
      Collections.sort(new ArrayList<String>(usernames));
      int endIndex=Math.min(startIndex + numResults,usernames.size() - 1);
      usernames=usernames.subList(startIndex,endIndex);
    }
 else {
      for (int i=0; i < startIndex; i++) {
        if (answer.hasMoreElements()) {
          answer.next();
        }
 else         if (alternateBaseDN != null && answer2.hasMoreElements()) {
          answer2.next();
        }
 else {
          return Collections.emptyList();
        }
      }
      for (int i=0; i < numResults; i++) {
        if (answer.hasMoreElements()) {
          String username=(String)((SearchResult)answer.next()).getAttributes().get(manager.getUsernameField()).get();
          String suffix=manager.getUsernameSuffix();
          if (suffix.length() > 0 && username.endsWith(suffix)) {
            username=username.substring(0,username.length() - suffix.length());
          }
          usernames.add(JID.escapeNode(username));
        }
 else         if (alternateBaseDN != null && answer2.hasMoreElements()) {
          String username=(String)((SearchResult)answer2.next()).getAttributes().get(manager.getUsernameField()).get();
          String suffix=manager.getUsernameSuffix();
          if (suffix.length() > 0 && username.endsWith(suffix)) {
            username=username.substring(0,username.length() - suffix.length());
          }
          usernames.add(JID.escapeNode(username));
        }
 else {
          break;
        }
      }
    }
    answer.close();
  }
 catch (  Exception e) {
    Log.error(e);
  }
 finally {
    try {
      if (ctx != null) {
        ctx.setRequestControls(null);
        ctx.close();
      }
    }
 catch (    Exception ignored) {
    }
    try {
      if (ctx2 != null) {
        ctx2.setRequestControls(null);
        ctx2.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
  return new UserCollection(usernames.toArray(new String[usernames.size()]));
}
