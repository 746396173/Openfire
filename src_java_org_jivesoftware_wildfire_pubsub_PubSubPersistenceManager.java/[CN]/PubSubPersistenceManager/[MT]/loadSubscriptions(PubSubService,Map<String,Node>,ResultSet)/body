{
  try {
    String nodeID=rs.getString(1);
    Node node=nodes.get(nodeID);
    if (node == null) {
      Log.warn("Subscription found for a non-existent node: " + nodeID);
      return;
    }
    String subID=rs.getString(2);
    JID subscriber=new JID(rs.getString(3));
    JID owner=new JID(rs.getString(4));
    if (node.getAffiliate(owner) == null) {
      Log.warn("Subscription found for a non-existent affiliate: " + owner + " in node: "+ nodeID);
      return;
    }
    NodeSubscription.State state=NodeSubscription.State.valueOf(rs.getString(5));
    NodeSubscription subscription=new NodeSubscription(service,node,owner,subscriber,state,subID);
    subscription.setShouldDeliverNotifications(rs.getInt(6) == 1);
    subscription.setUsingDigest(rs.getInt(7) == 1);
    subscription.setDigestFrequency(rs.getInt(8));
    if (rs.getString(9) != null) {
      subscription.setExpire(new Date(Long.parseLong(rs.getString(9).trim())));
    }
    subscription.setIncludingBody(rs.getInt(10) == 1);
    subscription.setPresenceStates(decodeWithComma(rs.getString(11)));
    subscription.setType(NodeSubscription.Type.valueOf(rs.getString(12)));
    subscription.setDepth(rs.getInt(13));
    subscription.setKeyword(rs.getString(14));
    subscription.setSavedToDB(true);
    node.addSubscription(subscription);
  }
 catch (  SQLException sqle) {
    Log.error(sqle);
  }
}
