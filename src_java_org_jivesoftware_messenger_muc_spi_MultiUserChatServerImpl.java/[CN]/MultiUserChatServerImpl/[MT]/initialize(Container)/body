{
  super.initialize(container);
  chatServiceName=JiveGlobals.getProperty("xmpp.muc.service");
  historyStrategy.setContext("xmpp.muc.history");
  String property=JiveGlobals.getProperty("xmpp.muc.sysadmin.jid");
  String[] jids;
  if (property != null) {
    jids=property.split(",");
    for (int i=0; i < jids.length; i++) {
      sysadmins.add(jids[i].trim().toLowerCase());
    }
  }
  roomCreationRestricted=Boolean.parseBoolean(JiveGlobals.getProperty("xmpp.muc.create.anyone","false"));
  property=JiveGlobals.getProperty("xmpp.muc.create.jid");
  if (property != null) {
    jids=property.split(",");
    for (int i=0; i < jids.length; i++) {
      allowedToCreate.add(jids[i].trim().toLowerCase());
    }
  }
  String value=JiveGlobals.getProperty("xmpp.muc.tasks.user.timeout");
  if (value != null) {
    try {
      USER_TIMEOUT=Integer.parseInt(value);
    }
 catch (    NumberFormatException e) {
      Log.error("Wrong number format of property xmpp.muc.tasks.user.timeout",e);
    }
  }
  value=JiveGlobals.getProperty("xmpp.muc.tasks.user.idle");
  if (value != null) {
    try {
      USER_IDLE=Integer.parseInt(value);
    }
 catch (    NumberFormatException e) {
      Log.error("Wrong number format of property xmpp.muc.tasks.user.idle",e);
    }
  }
  value=JiveGlobals.getProperty("xmpp.muc.tasks.log.timeout");
  if (value != null) {
    try {
      LOG_TIMEOUT=Integer.parseInt(value);
    }
 catch (    NumberFormatException e) {
      Log.error("Wrong number format of property xmpp.muc.tasks.log.timeout",e);
    }
  }
  value=JiveGlobals.getProperty("xmpp.muc.tasks.log.batchsize");
  if (value != null) {
    try {
      LOG_BATCH_SIZE=Integer.parseInt(value);
    }
 catch (    NumberFormatException e) {
      Log.error("Wrong number format of property xmpp.muc.tasks.log.batchsize",e);
    }
  }
  if (chatServiceName == null) {
    chatServiceName="conference";
  }
  String serverName=null;
  try {
    XMPPServer server=(XMPPServer)lookup.lookup(XMPPServer.class);
    if (server != null) {
      serverName=server.getServerInfo().getName();
    }
 else {
      serverName=JiveGlobals.getProperty("xmpp.domain");
    }
  }
 catch (  Exception e) {
    Log.error(e);
  }
  if (serverName != null) {
    chatServiceName+="." + serverName;
  }
  chatServiceAddress=new XMPPAddress(null,chatServiceName,null);
  timer.schedule(new UserTimeoutTask(),USER_TIMEOUT,USER_TIMEOUT);
  timer.schedule(new LogConversationTask(),LOG_TIMEOUT,LOG_TIMEOUT);
}
