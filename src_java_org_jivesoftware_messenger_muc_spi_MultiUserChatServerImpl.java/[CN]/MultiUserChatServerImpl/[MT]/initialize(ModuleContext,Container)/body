{
  this.context=modcontext;
  if (context != null) {
    chatServerName=context.getProperty("xmpp.muc.domain");
    historyStrategy.setContext(context,"xmpp.muc.history");
    String[] jids=context.getProperties("xmpp.muc.sysadmin.jid");
    for (int i=0; i < jids.length; i++) {
      sysadmins.add(jids[i].trim().toLowerCase());
    }
    jids=context.getProperties("xmpp.muc.create.jid");
    for (int i=0; i < jids.length; i++) {
      allowedToCreate.add(jids[i].trim().toLowerCase());
    }
    String value=context.getProperty("xmpp.muc.tasks.user.timeout");
    if (value != null) {
      try {
        USER_TIMEOUT=Integer.parseInt(value);
      }
 catch (      NumberFormatException e) {
        Log.error("Wrong number format of property xmpp.muc.tasks.user.timeout",e);
      }
    }
    value=context.getProperty("xmpp.muc.tasks.log.timeout");
    if (value != null) {
      try {
        LOG_TIMEOUT=Integer.parseInt(value);
      }
 catch (      NumberFormatException e) {
        Log.error("Wrong number format of property xmpp.muc.tasks.log.timeout",e);
      }
    }
    value=context.getProperty("xmpp.muc.tasks.log.batchsize");
    if (value != null) {
      try {
        LOG_BATCH_SIZE=Integer.parseInt(value);
      }
 catch (      NumberFormatException e) {
        Log.error("Wrong number format of property xmpp.muc.tasks.log.batchsize",e);
      }
    }
  }
  if (chatServerName == null) {
    chatServerName="conference.127.0.0.1";
  }
  chatServerAddress=new XMPPAddress(null,chatServerName,null);
  timer.schedule(new UserTimeoutTask(),USER_TIMEOUT,USER_TIMEOUT);
  timer.schedule(new LogConversationTask(),LOG_TIMEOUT,LOG_TIMEOUT);
  MUCPersistenceManager.resetRoomInMemory();
  super.initialize(context,container);
}
