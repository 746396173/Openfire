{
  final JID from=packet.getFrom();
  final boolean registered;
  Collection<Registration> registrations=RegistrationManager.getInstance().getRegistrations(from,parent.transportType);
  if (registrations.iterator().hasNext()) {
    registered=true;
  }
 else {
    registered=false;
  }
  if (!registered && !parent.permissionManager.hasAccess(from)) {
    throw new UnauthorizedException(LocaleUtils.getLocalizedString("gateway.base.registrationdeniedbyacls","kraken"));
  }
  String username=null;
  String password=null;
  String nickname=null;
  try {
    if (packet.getChildElement().element("x") != null) {
      final DataForm form=new DataForm(packet.getChildElement().element("x"));
      final List<FormField> fields=form.getFields();
      for (      final FormField field : fields) {
        final String var=field.getVariable();
        if (var.equals("username")) {
          username=field.getValues().get(0);
        }
 else         if (var.equals("password")) {
          password=field.getValues().get(0);
        }
 else         if (var.equals("nick")) {
          nickname=field.getValues().get(0);
        }
      }
    }
  }
 catch (  Exception ex) {
    Log.info("Most likely, no dataform was present " + "in the IQ-register request.",ex);
  }
  final Element userEl=packet.getChildElement().element("username");
  final Element passEl=packet.getChildElement().element("password");
  final Element nickEl=packet.getChildElement().element("nick");
  if (userEl != null) {
    username=userEl.getTextTrim();
  }
  if (passEl != null) {
    password=passEl.getTextTrim();
  }
  if (nickEl != null) {
    nickname=nickEl.getTextTrim();
  }
  username=(username == null || username.equals("")) ? null : username;
  password=(password == null || password.equals("")) ? null : password;
  nickname=(nickname == null || nickname.equals("")) ? null : nickname;
  if (username == null || (parent.isPasswordRequired() && password == null) || (parent.isNicknameRequired() && nickname == null)) {
    Log.info("Cannot process IQ register request, as it " + "fails to provide all data that's required: " + packet.toXML());
    final IQ result=IQ.createResultIQ(packet);
    result.setError(Condition.bad_request);
    parent.sendPacket(result);
    return;
  }
  final boolean rosterlessMode;
  final Element x=packet.getChildElement().element("x");
  if (x != null && x.getNamespaceURI() != null && x.getNamespaceURI().equals(NameSpace.IQ_GATEWAY_REGISTER)) {
    rosterlessMode=true;
    Log.info("Registering " + packet.getFrom() + " as "+ username+ " in rosterless mode.");
  }
 else {
    rosterlessMode=false;
    Log.info("Registering " + packet.getFrom() + " as "+ username+ " (without making use of rosterless mode).");
  }
  try {
    addNewRegistration(from,username,password,nickname,rosterlessMode);
    registrations=RegistrationManager.getInstance().getRegistrations(from,parent.transportType);
    Registration registration=registrations.iterator().next();
    TransportSession session=parent.registrationLoggedIn(registration,from,PresenceType.available,"",-1);
    session.setRegistrationPacket(packet);
    session.detachSession();
    parent.getSessionManager().storeSession(from,session);
  }
 catch (  UserNotFoundException e) {
    Log.warn("Someone attempted to register with the gateway " + "who is not registered with the server: " + from);
    final IQ eresult=IQ.createResultIQ(packet);
    eresult.setError(Condition.forbidden);
    parent.sendPacket(eresult);
    final Message em=new Message();
    em.setType(Message.Type.error);
    em.setTo(packet.getFrom());
    em.setFrom(packet.getTo());
    em.setBody(LocaleUtils.getLocalizedString("gateway.base.registrationdeniednoacct","kraken"));
    parent.sendPacket(em);
  }
catch (  IllegalAccessException e) {
    Log.warn("Someone who is not a user of this server " + "tried to register with the transport: " + from);
    final IQ eresult=IQ.createResultIQ(packet);
    eresult.setError(Condition.forbidden);
    parent.sendPacket(eresult);
    final Message em=new Message();
    em.setType(Message.Type.error);
    em.setTo(packet.getFrom());
    em.setFrom(packet.getTo());
    em.setBody(LocaleUtils.getLocalizedString("gateway.base.registrationdeniedbyhost","kraken"));
    parent.sendPacket(em);
  }
catch (  IllegalArgumentException e) {
    Log.warn("Someone attempted to register with the " + "gateway with an invalid username: " + from);
    final IQ eresult=IQ.createResultIQ(packet);
    eresult.setError(Condition.bad_request);
    parent.sendPacket(eresult);
    final Message em=new Message();
    em.setType(Message.Type.error);
    em.setTo(packet.getFrom());
    em.setFrom(packet.getTo());
    em.setBody(LocaleUtils.getLocalizedString("gateway.base.registrationdeniedbadusername","kraken"));
    parent.sendPacket(em);
  }
}
