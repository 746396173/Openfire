{
  lastPacketTime=System.currentTimeMillis();
  try {
    XMPPAddress recipient=packet.getRecipient();
    String group=recipient.getNamePrep();
    if (group == null) {
      if (Presence.UNAVAILABLE == packet.getType()) {
        server.removeUser(packet.getSender());
      }
    }
 else {
      MUCRole role=roles.get(group.toLowerCase());
      if (role == null) {
        if (recipient.getResource() != null && recipient.getResource().trim().length() > 0) {
          if (packet.getType() == Presence.AVAILABLE || Presence.INVISIBLE == packet.getType()) {
            try {
              MUCRoom room=server.getChatRoom(group,packet.getSender());
              MetaDataFragment mucInfo=(MetaDataFragment)packet.getFragment("x","http://jabber.org/protocol/muc");
              HistoryRequest historyRequest=null;
              String password=null;
              if (mucInfo != null) {
                password=mucInfo.getProperty("x.password");
                if (mucInfo.includesProperty("x.history")) {
                  historyRequest=new HistoryRequest(mucInfo);
                }
              }
              role=room.joinRoom(recipient.getResource().trim(),password,historyRequest,this);
              roles.put(group,role);
              if (room.isLocked() && mucInfo == null) {
                room.unlockRoom(role);
              }
            }
 catch (            UnauthorizedException e) {
              sendErrorPacket(packet,XMPPError.Code.UNAUTHORIZED);
            }
catch (            NotAllowedException e) {
              sendErrorPacket(packet,XMPPError.Code.NOT_ALLOWED);
            }
catch (            UserAlreadyExistsException e) {
              sendErrorPacket(packet,XMPPError.Code.CONFLICT);
            }
catch (            RoomLockedException e) {
              sendErrorPacket(packet,XMPPError.Code.NOT_FOUND);
            }
catch (            ForbiddenException e) {
              sendErrorPacket(packet,XMPPError.Code.FORBIDDEN);
            }
catch (            RegistrationRequiredException e) {
              sendErrorPacket(packet,XMPPError.Code.REGISTRATION_REQUIRED);
            }
catch (            ConflictException e) {
              sendErrorPacket(packet,XMPPError.Code.CONFLICT);
            }
          }
 else {
          }
        }
 else {
          if (packet.getType() == Presence.AVAILABLE || Presence.INVISIBLE == packet.getType()) {
            sendErrorPacket(packet,XMPPError.Code.BAD_REQUEST);
          }
        }
      }
 else {
        if (!role.getChatUser().getAddress().equals(packet.getSender())) {
          sendErrorPacket(packet,XMPPError.Code.CONFLICT);
        }
 else {
          if (Presence.UNAVAILABLE == packet.getType()) {
            try {
              roles.remove(group.toLowerCase());
              role.getChatRoom().leaveRoom(role.getNickname());
            }
 catch (            UserNotFoundException e) {
            }
catch (            Exception e) {
              Log.error(e);
            }
          }
 else {
            try {
              String resource=(recipient.getResource() == null || recipient.getResource().trim().length() == 0 ? null : recipient.getResource().trim());
              if (resource == null || role.getNickname().equalsIgnoreCase(resource)) {
                role.setPresence(packet);
                Presence presence=(Presence)role.getPresence().createDeepCopy();
                presence.setSender(role.getRoleAddress());
                role.getChatRoom().send(presence);
              }
 else {
                if (role.getChatRoom().hasOccupant(resource)) {
                  sendErrorPacket(packet,XMPPError.Code.CONFLICT);
                }
 else {
                  Presence presence=(Presence)role.getPresence().createDeepCopy();
                  presence.setVisible(false);
                  presence.setAvailable(false);
                  presence.setSender(role.getRoleAddress());
                  MetaDataFragment frag=(MetaDataFragment)presence.getFragment("x","http://jabber.org/protocol/muc#user");
                  frag.setProperty("x.item:nick",resource);
                  frag.setProperty("x.status:code","303");
                  role.getChatRoom().send(presence);
                  String oldNick=role.getNickname();
                  role.setPresence(packet);
                  role.changeNickname(resource);
                  role.getChatRoom().nicknameChanged(oldNick,resource);
                  presence=(Presence)role.getPresence().createDeepCopy();
                  presence.setSender(role.getRoleAddress());
                  role.getChatRoom().send(presence);
                }
              }
            }
 catch (            Exception e) {
              Log.error(LocaleUtils.getLocalizedString("admin.error"),e);
            }
          }
        }
      }
    }
  }
 catch (  UnauthorizedException ue) {
    Log.error(LocaleUtils.getLocalizedString("admin.error"),ue);
  }
}
