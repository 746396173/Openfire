{
  super.setFirstByte(new Byte((new Integer(ArrayExtensions.getLength(getSynchronizationAndContributingSources()).intValue())).byteValue()));
  ArrayList list=new ArrayList();
  for (Integer i=Integer.valueOf(0); i.intValue() < ArrayExtensions.getLength(getSynchronizationAndContributingSources()).intValue(); ) {
    ArrayListExtensions.addRange(list,BitAssistant.getIntegerBytesFromLongNetwork(getSynchronizationAndContributingSources()[i.intValue()]));
    Integer integer=i;
    Integer integer1=i=Integer.valueOf(i.intValue() + 1);
    Integer _tmp=integer;
  }
  if (!StringExtensions.isNullOrEmpty(getReasonForLeaving()).booleanValue()) {
    list.add(new Byte((new Byte((new Integer(StringExtensions.getLength(getReasonForLeaving()).intValue())).byteValue())).byteValue()));
    Byte bytes[]=Encoding.getUTF8().getBytes(getReasonForLeaving());
    ArrayListExtensions.addRange(list,bytes);
    for (Integer j=Integer.valueOf(1 + ArrayExtensions.getLength(bytes).intValue()); j.intValue() % 4 > 0; ) {
      list.add(new Byte((byte)0));
      Integer integer2=j;
      Integer integer3=j=Integer.valueOf(j.intValue() + 1);
      Integer _tmp1=integer2;
    }
  }
  super.setPayload((Byte[])list.toArray(new Byte[0]));
}
