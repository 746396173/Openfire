{
  Connection con=null;
  PreparedStatement pstmt=null;
  try {
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(LOAD_ROOM);
    pstmt.setString(1,room.getName());
    ResultSet rs=pstmt.executeQuery();
    if (!rs.next()) {
      throw new IllegalArgumentException("Room " + room.getName() + " was not found in the database.");
    }
    room.setID(rs.getLong(1));
    room.setCreationDate(new Date(Long.parseLong(rs.getString(2).trim())));
    room.setModificationDate(new Date(Long.parseLong(rs.getString(3).trim())));
    room.setNaturalLanguageName(rs.getString(4));
    room.setDescription(rs.getString(5));
    room.setCanOccupantsChangeSubject(rs.getInt(6) == 1 ? true : false);
    room.setMaxUsers(rs.getInt(7));
    room.setPublicRoom(rs.getInt(8) == 1 ? true : false);
    room.setModerated(rs.getInt(9) == 1 ? true : false);
    room.setInvitationRequiredToEnter(rs.getInt(10) == 1 ? true : false);
    room.setCanOccupantsInvite(rs.getInt(11) == 1 ? true : false);
    room.setPassword(rs.getString(12));
    room.setCanAnyoneDiscoverJID(rs.getInt(13) == 1 ? true : false);
    room.setLogEnabled(rs.getInt(14) == 1 ? true : false);
    room.setSubject(rs.getString(15));
    List<String> rolesToBroadcast=new ArrayList<String>();
    String roles=Integer.toBinaryString(rs.getInt(16));
    if (roles.charAt(0) == '1') {
      rolesToBroadcast.add("moderator");
    }
    if (roles.length() > 1 && roles.charAt(1) == '1') {
      rolesToBroadcast.add("participant");
    }
    if (roles.length() > 2 && roles.charAt(2) == '1') {
      rolesToBroadcast.add("visitor");
    }
    room.setRolesToBroadcastPresence(rolesToBroadcast);
    room.setPersistent(true);
    rs.close();
    pstmt.close();
    pstmt=con.prepareStatement(LOAD_HISTORY);
    long from=System.currentTimeMillis() - (86400000 * 2);
    pstmt.setString(1,StringUtils.dateToMillis(new Date(from)));
    pstmt.setLong(2,room.getID());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      Date sentDate=new Date(Long.parseLong(rs.getString(3).trim()));
      if (room.isLogEnabled()) {
        room.getRoomHistory().addOldMessage(rs.getString(1),rs.getString(2),sentDate,rs.getString(4),rs.getString(5));
      }
    }
    rs.close();
    pstmt.close();
    if (!room.getRoomHistory().hasChangedSubject() && room.getSubject() != null && room.getSubject().length() > 0) {
      room.getRoomHistory().addOldMessage(room.getRole().getRoleAddress().toStringPrep(),null,room.getModificationDate(),room.getSubject(),null);
    }
    pstmt=con.prepareStatement(LOAD_AFFILIATIONS);
    pstmt.setLong(1,room.getID());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      String jid=rs.getString(1);
      int affiliation=rs.getInt(2);
      try {
switch (affiliation) {
case MUCRole.OWNER:
          room.addOwner(jid,room.getRole());
        break;
case MUCRole.ADMINISTRATOR:
      room.addAdmin(jid,room.getRole());
    break;
case MUCRole.OUTCAST:
  room.addOutcast(jid,null,room.getRole());
break;
default :
Log.error("Unkown affiliation value " + affiliation + " for user "+ jid+ " in persistent room "+ room.getID());
}
}
 catch (Exception e) {
Log.error(e);
}
}
rs.close();
pstmt.close();
pstmt=con.prepareStatement(LOAD_MEMBERS);
pstmt.setLong(1,room.getID());
rs=pstmt.executeQuery();
while (rs.next()) {
try {
room.addMember(rs.getString(1),rs.getString(2),room.getRole());
}
 catch (Exception e) {
Log.error(e);
}
}
rs.close();
room.setSavedToDB(true);
}
 catch (SQLException sqle) {
Log.error(sqle);
}
 finally {
try {
if (pstmt != null) pstmt.close();
}
 catch (Exception e) {
Log.error(e);
}
try {
if (con != null) con.close();
}
 catch (Exception e) {
Log.error(e);
}
}
}
