{
  Connection con=null;
  PreparedStatement pstmt=null;
  Map<Long,MUCRoom> rooms=new HashMap<Long,MUCRoom>();
  try {
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(LOAD_ALL_ROOMS);
    pstmt.setString(1,StringUtils.dateToMillis(emptyDate));
    ResultSet rs=pstmt.executeQuery();
    MUCRoomImpl room=null;
    while (rs.next()) {
      room=new MUCRoomImpl(chatserver,rs.getString(4),packetRouter);
      room.setID(rs.getLong(1));
      room.setCreationDate(new Date(Long.parseLong(rs.getString(2).trim())));
      room.setModificationDate(new Date(Long.parseLong(rs.getString(3).trim())));
      room.setNaturalLanguageName(rs.getString(5));
      room.setDescription(rs.getString(6));
      room.setLockedDate(new Date(Long.parseLong(rs.getString(7).trim())));
      if (rs.getString(8) != null) {
        room.setEmptyDate(new Date(Long.parseLong(rs.getString(8).trim())));
      }
 else {
        room.setEmptyDate(null);
      }
      room.setCanOccupantsChangeSubject(rs.getInt(9) == 1 ? true : false);
      room.setMaxUsers(rs.getInt(10));
      room.setPublicRoom(rs.getInt(11) == 1 ? true : false);
      room.setModerated(rs.getInt(12) == 1 ? true : false);
      room.setMembersOnly(rs.getInt(13) == 1 ? true : false);
      room.setCanOccupantsInvite(rs.getInt(14) == 1 ? true : false);
      room.setPassword(rs.getString(15));
      room.setCanAnyoneDiscoverJID(rs.getInt(16) == 1 ? true : false);
      room.setLogEnabled(rs.getInt(17) == 1 ? true : false);
      room.setSubject(rs.getString(18));
      List<String> rolesToBroadcast=new ArrayList<String>();
      String roles=Integer.toBinaryString(rs.getInt(19));
      if (roles.charAt(0) == '1') {
        rolesToBroadcast.add("moderator");
      }
      if (roles.length() > 1 && roles.charAt(1) == '1') {
        rolesToBroadcast.add("participant");
      }
      if (roles.length() > 2 && roles.charAt(2) == '1') {
        rolesToBroadcast.add("visitor");
      }
      room.setRolesToBroadcastPresence(rolesToBroadcast);
      room.setPersistent(true);
      rooms.put(room.getID(),room);
    }
    rs.close();
    pstmt.close();
    pstmt=con.prepareStatement(LOAD_ALL_HISTORY);
    long from=System.currentTimeMillis() - (86400000 * 2);
    pstmt.setString(1,StringUtils.dateToMillis(new Date(from)));
    rs=pstmt.executeQuery();
    while (rs.next()) {
      room=(MUCRoomImpl)rooms.get(rs.getLong(1));
      if (room == null) {
        continue;
      }
      Date sentDate=new Date(Long.parseLong(rs.getString(4).trim()));
      try {
        if (room.isLogEnabled()) {
          room.getRoomHistory().addOldMessage(rs.getString(2),rs.getString(3),sentDate,rs.getString(5),rs.getString(6));
        }
      }
 catch (      Exception e) {
        Log.error(e);
      }
    }
    rs.close();
    pstmt.close();
    for (    MUCRoom loadedRoom : rooms.values()) {
      if (!loadedRoom.getRoomHistory().hasChangedSubject() && loadedRoom.getSubject() != null && loadedRoom.getSubject().length() > 0) {
        loadedRoom.getRoomHistory().addOldMessage(loadedRoom.getRole().getRoleAddress().toString(),null,loadedRoom.getModificationDate(),loadedRoom.getSubject(),null);
      }
    }
    pstmt=con.prepareStatement(LOAD_ALL_AFFILIATIONS);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      String jid=rs.getString(2);
      int affiliation=rs.getInt(3);
      room=(MUCRoomImpl)rooms.get(rs.getLong(1));
      if (room == null) {
        continue;
      }
      try {
switch (affiliation) {
case MUCRole.OWNER:
          room.addOwner(jid,room.getRole());
        break;
case MUCRole.ADMINISTRATOR:
      room.addAdmin(jid,room.getRole());
    break;
case MUCRole.OUTCAST:
  room.addOutcast(jid,null,room.getRole());
break;
default :
Log.error("Unkown affiliation value " + affiliation + " for user "+ jid+ " in persistent room "+ room.getID());
}
}
 catch (Exception e) {
Log.error(e);
}
}
rs.close();
pstmt.close();
pstmt=con.prepareStatement(LOAD_ALL_MEMBERS);
rs=pstmt.executeQuery();
while (rs.next()) {
room=(MUCRoomImpl)rooms.get(rs.getLong(1));
if (room == null) {
continue;
}
try {
room.addMember(rs.getString(2),rs.getString(3),room.getRole());
}
 catch (Exception e) {
Log.error(e);
}
}
rs.close();
}
 catch (SQLException sqle) {
Log.error(sqle);
}
 finally {
try {
if (pstmt != null) pstmt.close();
}
 catch (Exception e) {
Log.error(e);
}
try {
if (con != null) con.close();
}
 catch (Exception e) {
Log.error(e);
}
}
for (MUCRoom room : rooms.values()) {
room.setSavedToDB(true);
if (room.getEmptyDate() == null) {
room.setEmptyDate(new Date());
}
}
return rooms.values();
}
