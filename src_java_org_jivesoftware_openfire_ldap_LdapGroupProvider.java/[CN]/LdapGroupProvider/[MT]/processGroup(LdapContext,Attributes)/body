{
  XMPPServer server=XMPPServer.getInstance();
  String serverName=server.getServerInfo().getXMPPDomain();
  Pattern pattern=Pattern.compile("(?i)(^" + manager.getUsernameField() + "=)([^,]+)(.+)");
  SearchControls searchControls=new SearchControls();
  searchControls.setReturningAttributes(new String[]{"distinguishedName",manager.getUsernameField()});
  if (manager.isSubTreeSearch()) {
    searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);
  }
 else {
    searchControls.setSearchScope(SearchControls.ONELEVEL_SCOPE);
  }
  String name;
  String description;
  try {
    name=((String)((a.get(manager.getGroupNameField())).get()));
  }
 catch (  Exception e) {
    name="";
  }
  try {
    description=((String)((a.get(manager.getGroupDescriptionField())).get()));
  }
 catch (  Exception e) {
    description="";
  }
  Set<JID> members=new TreeSet<>();
  Attribute memberField=a.get(manager.getGroupMemberField());
  if (memberField != null) {
    NamingEnumeration ne=memberField.getAll();
    while (ne.hasMore()) {
      String username=(String)ne.next();
      if (!manager.isPosixMode()) {
        try {
          Matcher matcher=pattern.matcher(username);
          if (matcher.matches() && matcher.groupCount() == 3) {
            username=matcher.group(2);
          }
 else {
            LdapName ldapName=new LdapName(username);
            StringBuilder userFilter=new StringBuilder();
            userFilter.append("(&(");
            userFilter.append(ldapName.get(ldapName.size() - 1));
            userFilter.append(')');
            userFilter.append(MessageFormat.format(manager.getSearchFilter(),"*"));
            userFilter.append(')');
            NamingEnumeration usrAnswer=ctx.search("",userFilter.toString(),searchControls);
            if (usrAnswer != null && usrAnswer.hasMoreElements()) {
              SearchResult searchResult=null;
              while (usrAnswer.hasMoreElements()) {
                searchResult=(SearchResult)usrAnswer.nextElement();
                Attributes attrs=searchResult.getAttributes();
                Attribute userdnAttr=attrs.get("distinguishedName");
                if (username.equals((String)userdnAttr.get())) {
                  username=(String)attrs.get(manager.getUsernameField()).get();
                  break;
                }
              }
            }
            usrAnswer.close();
          }
        }
 catch (        Exception e) {
          Log.error(e.getMessage(),e);
        }
      }
      try {
        JID userJID;
        int position=username.indexOf("@" + serverName);
        if (position == -1) {
          String escapedUsername=JID.escapeNode(username);
          if (!escapedUsername.equals(username)) {
            userManager.getUser(escapedUsername);
          }
          userJID=server.createJID(escapedUsername,null);
        }
 else {
          String node=username.substring(0,position);
          String escapedUsername=JID.escapeNode(node);
          userJID=new JID(escapedUsername + "@" + serverName);
        }
        members.add(userJID);
      }
 catch (      UserNotFoundException e) {
        if (manager.isDebugEnabled()) {
          Log.debug("LdapGroupProvider: User not found: " + username);
        }
      }
    }
    ne.close();
  }
  if (manager.isDebugEnabled()) {
    Log.debug("LdapGroupProvider: Adding group \"" + name + "\" with "+ members.size()+ " members.");
  }
  Collection<JID> admins=Collections.emptyList();
  return new Group(name,description,members,admins);
}
