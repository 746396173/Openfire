{
  if (manager.isDebugEnabled()) {
    Log.debug("LdapGroupProvider: Starting to populate groups with users.");
  }
  DirContext ctx=null;
  try {
    TreeMap<String,Group> groups=new TreeMap<String,Group>();
    ctx=manager.getContext();
    SearchControls searchControls=new SearchControls();
    searchControls.setReturningAttributes(new String[]{manager.getUsernameField()});
    if (manager.isSubTreeSearch()) {
      searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);
    }
 else {
      searchControls.setSearchScope(SearchControls.ONELEVEL_SCOPE);
    }
    XMPPServer server=XMPPServer.getInstance();
    String serverName=server.getServerInfo().getName();
    Pattern pattern=Pattern.compile("(?i)(^" + manager.getUsernameField() + "=)([^,]+)(.+)");
    while (answer.hasMoreElements()) {
      String name="";
      try {
        Attributes a=answer.nextElement().getAttributes();
        String description;
        try {
          name=((String)((a.get(manager.getGroupNameField())).get()));
          description=((String)((a.get(manager.getGroupDescriptionField())).get()));
        }
 catch (        Exception e) {
          description="";
        }
        Set<JID> members=new TreeSet<JID>();
        Attribute memberField=a.get(manager.getGroupMemberField());
        if (memberField != null) {
          NamingEnumeration ne=memberField.getAll();
          while (ne.hasMore()) {
            String username=(String)ne.next();
            if (!manager.isPosixMode()) {
              try {
                Matcher matcher=pattern.matcher(username);
                if (matcher.matches() && matcher.groupCount() == 3) {
                  username=matcher.group(2);
                }
 else {
                  LdapName ldapName=new LdapName(username);
                  String userDNPart=ldapName.get(ldapName.size() - 1);
                  NamingEnumeration usrAnswer=ctx.search("",userDNPart,searchControls);
                  if (usrAnswer.hasMoreElements()) {
                    username=(String)((SearchResult)usrAnswer.next()).getAttributes().get(manager.getUsernameField()).get();
                  }
                  usrAnswer.close();
                }
              }
 catch (              Exception e) {
                Log.error(e);
              }
            }
            try {
              JID userJID;
              int position=username.indexOf("@" + serverName);
              if (position == -1) {
                String escapedUsername=JID.escapeNode(username);
                if (!escapedUsername.equals(username)) {
                  userManager.getUser(escapedUsername);
                }
                userJID=server.createJID(escapedUsername,null);
              }
 else {
                String node=username.substring(0,position);
                String escapedUsername=JID.escapeNode(node);
                userJID=new JID(escapedUsername + "@" + serverName);
              }
              members.add(userJID);
            }
 catch (            UserNotFoundException e) {
              if (manager.isDebugEnabled()) {
                Log.debug("LdapGroupProvider: User not found: " + username);
              }
            }
          }
          ne.close();
        }
        if (manager.isDebugEnabled()) {
          Log.debug("LdapGroupProvider: Adding group \"" + name + "\" with "+ members.size()+ " members.");
        }
        Collection<JID> admins=Collections.emptyList();
        Group group=new Group(name,description,members,admins);
        groups.put(name,group);
      }
 catch (      Exception e) {
        e.printStackTrace();
        if (manager.isDebugEnabled()) {
          Log.debug("LdapGroupProvider: Error while populating group, " + name + ".",e);
        }
      }
    }
    if (manager.isDebugEnabled()) {
      Log.debug("LdapGroupProvider: Finished populating group(s) with users.");
    }
    return groups.values();
  }
  finally {
    try {
      if (ctx != null) {
        ctx.close();
      }
    }
 catch (    Exception e) {
    }
  }
}
