{
  final byte[] GIF_MAGIC_87A={0x46,0x38,0x37,0x61};
  final byte[] GIF_MAGIC_89A={0x46,0x38,0x39,0x61};
  byte[] a=new byte[11];
  if (read(a) != 11) {
    return false;
  }
  if ((!equals(a,0,GIF_MAGIC_89A,0,4)) && (!equals(a,0,GIF_MAGIC_87A,0,4))) {
    return false;
  }
  format=FORMAT_GIF;
  width=getShortLittleEndian(a,4);
  height=getShortLittleEndian(a,6);
  int flags=a[8] & 0xff;
  bitsPerPixel=((flags >> 4) & 0x07) + 1;
  if (!determineNumberOfImages) {
    return true;
  }
  if ((flags & 0x80) != 0) {
    int tableSize=(1 << ((flags & 7) + 1)) * 3;
    skip(tableSize);
  }
  numberOfImages=0;
  int blockType;
  do {
    blockType=read();
switch (blockType) {
case (0x2c):
{
        if (read(a,0,9) != 9) {
          return false;
        }
        flags=a[8] & 0xff;
        progressive=(flags & 0x40) != 0;
        int localBitsPerPixel=(flags & 0x07) + 1;
        if (localBitsPerPixel > bitsPerPixel) {
          bitsPerPixel=localBitsPerPixel;
        }
        if ((flags & 0x80) != 0) {
          skip((1 << localBitsPerPixel) * 3);
        }
        skip(1);
        int n;
        do {
          n=read();
          if (n > 0) {
            skip(n);
          }
 else           if (n == -1) {
            return false;
          }
        }
 while (n > 0);
        numberOfImages++;
        break;
      }
case (0x21):
{
      int extensionType=read();
      if (collectComments && extensionType == 0xfe) {
        StringBuffer sb=new StringBuffer();
        int n;
        do {
          n=read();
          if (n == -1) {
            return false;
          }
          if (n > 0) {
            for (int i=0; i < n; i++) {
              int ch=read();
              if (ch == -1) {
                return false;
              }
              sb.append((char)ch);
            }
          }
        }
 while (n > 0);
      }
 else {
        int n;
        do {
          n=read();
          if (n > 0) {
            skip(n);
          }
 else           if (n == -1) {
            return false;
          }
        }
 while (n > 0);
      }
      break;
    }
case (0x3b):
{
    break;
  }
default :
{
  return false;
}
}
}
 while (blockType != 0x3b);
return true;
}
