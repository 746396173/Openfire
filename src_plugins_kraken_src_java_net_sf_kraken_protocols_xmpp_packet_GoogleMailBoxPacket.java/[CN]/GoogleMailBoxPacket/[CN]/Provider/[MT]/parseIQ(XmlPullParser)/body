{
  GoogleMailBoxPacket mailPacket=new GoogleMailBoxPacket();
  try {
    GoogleMailThread thread=null;
    boolean done=false;
    int eventType=parser.getEventType();
    while (!done) {
      if (eventType == XmlPullParser.START_TAG) {
        if (parser.getName().equals("mailbox")) {
          String dateString=parser.getAttributeValue("","result-time");
          try {
            mailPacket.setResultTime(new Date(Long.valueOf(dateString)));
          }
 catch (          Exception ex) {
          }
          try {
            mailPacket.setTotalMatched(Integer.valueOf(parser.getAttributeValue("","total-matched"),0));
          }
 catch (          NumberFormatException ex) {
          }
          String estimateString=parser.getAttributeValue("","total-estimate");
          mailPacket.setTotalIsEstimate(estimateString != null && estimateString.equals("1"));
          mailPacket.setUrl(parser.getAttributeValue("","url"));
        }
 else         if (parser.getName().equals("mail-thread-info")) {
          Long tid=Long.valueOf(parser.getAttributeValue("","tid"));
          Integer numParts=null;
          try {
            numParts=Integer.valueOf(parser.getAttributeValue("","participation"),0);
          }
 catch (          NumberFormatException ex) {
          }
          Integer numMsgs=null;
          try {
            numMsgs=Integer.valueOf(parser.getAttributeValue("","messages"),0);
          }
 catch (          NumberFormatException ex) {
          }
          String url=parser.getAttributeValue("","url");
          String dateString=parser.getAttributeValue("","date");
          Date date=null;
          try {
            date=new Date(Long.valueOf(dateString));
          }
 catch (          Exception ex) {
          }
          thread=new GoogleMailThread(tid,numParts,numMsgs,date,url,new ArrayList<GoogleMailSender>(),null,null,null);
        }
 else         if (parser.getName().equals("sender")) {
          String address=parser.getAttributeValue("","address");
          String name=parser.getAttributeValue("","name");
          String origString=parser.getAttributeValue("","originator");
          String unreadString=parser.getAttributeValue("","unread");
          thread.getSenders().add(new GoogleMailSender(address,name,origString != null && origString.equals("1"),unreadString != null && unreadString.equals("1")));
        }
 else         if (parser.getName().equals("labels")) {
          thread.setLabels(Arrays.asList(parser.nextText().split("|")));
        }
 else         if (parser.getName().equals("subject")) {
          thread.setSubject(parser.nextText());
        }
 else         if (parser.getName().equals("snippet")) {
          thread.setSnippit(parser.nextText());
        }
      }
 else       if (eventType == XmlPullParser.END_TAG) {
        if (parser.getName().equals("mail-thread-info")) {
          mailPacket.addMailThread(thread);
          thread=null;
        }
 else         if (parser.getName().equals("mailbox")) {
          done=true;
          break;
        }
      }
      eventType=parser.next();
    }
  }
 catch (  IOException ex) {
    Log.debug("XMPP: IO exception while parsing mailbox packet:",ex);
  }
catch (  XmlPullParserException ex) {
    Log.debug("XMPP: XML pull exception while parsing mailbox packet:",ex);
  }
catch (  Exception ex) {
    Log.debug("XMPP: Unknown exception while parsing mailbox packet:",ex);
  }
  return mailPacket;
}
