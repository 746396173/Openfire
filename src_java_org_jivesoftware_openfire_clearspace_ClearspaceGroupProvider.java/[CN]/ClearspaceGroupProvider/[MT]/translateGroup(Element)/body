{
  Node groupNode=responseNode.selectSingleNode("return");
  String name=groupNode.selectSingleNode("displayName").getText();
  String displayName=groupNode.selectSingleNode("name").getText();
  long id=Long.parseLong(groupNode.selectSingleNode("ID").getText());
  int type=Integer.parseInt(groupNode.selectSingleNode("typeID").getText());
  String description=null;
  Node tmpNode=groupNode.selectSingleNode("description");
  if (tmpNode != null) {
    description=tmpNode.getText();
  }
  Collection<JID> members=new ArrayList<>();
  Collection<JID> administrators=new ArrayList<>();
  try {
    XMPPServer server=XMPPServer.getInstance();
    List<Element> membersElement=(List<Element>)getGroupMembers(id).elements("return");
    for (    Element memberElement : membersElement) {
      String username=memberElement.element("user").element("username").getText();
      String escapedUsername=JID.escapeNode(username);
      String typeID=memberElement.element("typeID").getText();
      if (TYPE_ID_OWNER.equals(typeID)) {
        administrators.add(server.createJID(escapedUsername,null));
      }
 else       if (TYPE_ID_MEMBER.equals(typeID)) {
        members.add(server.createJID(escapedUsername,null));
      }
 else {
      }
    }
  }
 catch (  GroupNotFoundException e) {
  }
  Map<String,String> properties=new HashMap<>();
  if (type == 0) {
    properties.put("sharedRoster.showInRoster","everybody");
  }
 else {
    properties.put("sharedRoster.showInRoster","onlyGroup");
  }
  properties.put("sharedRoster.displayName",displayName);
  properties.put("sharedRoster.groupList","");
  return new Group(name,description,members,administrators,properties);
}
