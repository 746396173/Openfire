{
  try {
    Request request=requestEvent.getRequest();
    CallIdHeader callIdHeader=(CallIdHeader)request.getHeader(CallIdHeader.NAME);
    String sipCallId=callIdHeader.getCallId();
    SipListener sipListener=findSipListener(requestEvent);
    if (sipListener != null) {
      if (request.getMethod().equals(Request.INVITE)) {
        duplicateInvite(request);
        return;
      }
      sipListener.processRequest(requestEvent);
      return;
    }
 else {
      if (request.getMethod().equals(Request.REGISTER)) {
        handleRegister(request,requestEvent);
      }
 else       if (request.getMethod().equals(Request.OPTIONS)) {
        Response res=messageFactory.createResponse(Response.OK,request);
        sipProvider.sendResponse(res);
        return;
      }
 else       if (!request.getMethod().equals(Request.INVITE)) {
        Logger.writeFile("sipListener could not be found for " + sipCallId + " "+ request.getMethod()+ ".  Ignoring");
        return;
      }
    }
    if (request.getMethod().equals(Request.INVITE)) {
      if (SipIncomingCallAgent.addSipCallId(sipCallId) == false) {
        FromHeader fromHeader=(FromHeader)request.getHeader(FromHeader.NAME);
        ToHeader toHeader=(ToHeader)request.getHeader(ToHeader.NAME);
        String from=fromHeader.getAddress().toString();
        String to=toHeader.getAddress().toString();
        Logger.writeFile("SipServer:  duplicate INVITE from " + from + " to "+ to);
        return;
      }
      CallParticipant cp=new CallParticipant();
      String s=SipUtil.getCallIdFromSdp(request);
      if (s != null) {
        if (Logger.logLevel >= Logger.LOG_MOREINFO) {
          Logger.println("Using callId from SDP in INVITE: " + s);
        }
        cp.setCallId(s);
      }
      s=SipUtil.getConferenceIdFromSdp(request);
      if (s != null) {
        String[] tokens=s.split(":");
        cp.setConferenceId(tokens[0].trim());
        if (tokens.length > 1) {
          cp.setMediaPreference(tokens[1]);
        }
        if (tokens.length > 2) {
          cp.setConferenceDisplayName(tokens[2]);
        }
      }
      if (SipUtil.getUserNameFromSdp(request) != null) {
        cp.setName(SipUtil.getUserNameFromSdp(request));
      }
 else {
        cp.setName(SipUtil.getFromName(requestEvent));
      }
      cp.setDistributedBridge(SipUtil.getDistributedBridgeFromSdp(request));
      cp.setPhoneNumber(SipUtil.getFromPhoneNumber(requestEvent));
      cp.setToPhoneNumber(SipUtil.getToPhoneNumber(requestEvent));
      new IncomingCallHandler(cp,requestEvent);
      return;
    }
  }
 catch (  Exception e) {
    Logger.exception("processRequest",e);
    e.printStackTrace();
  }
}
