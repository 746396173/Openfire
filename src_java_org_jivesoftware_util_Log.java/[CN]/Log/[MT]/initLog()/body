{
  try {
    logDirectory=JiveGlobals.getXMLProperty("log.directory");
    if (logDirectory == null) {
      if (JiveGlobals.getJiveHome() != null) {
        File jiveHome=new File(JiveGlobals.getJiveHome());
        if (jiveHome.exists() && jiveHome.canWrite()) {
          logDirectory=(new File(jiveHome,"logs")).toString();
        }
      }
    }
    if (!logDirectory.endsWith(File.separator)) {
      logDirectory=logDirectory + File.separator;
    }
    File logDir=new File(logDirectory);
    if (!logDir.exists()) {
      logDir.mkdir();
    }
    logNameDebug=logDirectory + "jive.debug.log";
    logNameInfo=logDirectory + "jive.info.log";
    logNameWarn=logDirectory + "jive.warn.log";
    logNameError=logDirectory + "jive.error.log";
    debugPattern=JiveGlobals.getXMLProperty("log.debug.format");
    infoPattern=JiveGlobals.getXMLProperty("log.info.format");
    warnPattern=JiveGlobals.getXMLProperty("log.warn.format");
    errorPattern=JiveGlobals.getXMLProperty("log.error.format");
    try {
      maxDebugSize=Long.parseLong(JiveGlobals.getXMLProperty("log.debug.size"));
    }
 catch (    NumberFormatException e) {
    }
    try {
      maxInfoSize=Long.parseLong(JiveGlobals.getXMLProperty("log.info.size"));
    }
 catch (    NumberFormatException e) {
    }
    try {
      maxWarnSize=Long.parseLong(JiveGlobals.getXMLProperty("log.warn.size"));
    }
 catch (    NumberFormatException e) {
    }
    try {
      maxErrorSize=Long.parseLong(JiveGlobals.getXMLProperty("log.error.size"));
    }
 catch (    NumberFormatException e) {
    }
    debugEnabled="true".equals(JiveGlobals.getXMLProperty("log.debug.enabled"));
  }
 catch (  Exception e) {
  }
  if (debugPattern == null) {
    debugPattern="%{time:yyyy.MM.dd HH:mm:ss} %{message}\\n%{throwable}";
  }
  if (infoPattern == null) {
    infoPattern="%{time:yyyy.MM.dd HH:mm:ss} %{message}\\n%{throwable}";
  }
  if (warnPattern == null) {
    warnPattern="%{time:yyyy.MM.dd HH:mm:ss} %{message}\\n%{throwable}";
  }
  if (errorPattern == null) {
    errorPattern="%{time:yyyy.MM.dd HH:mm:ss} [%{method}] %{message}\\n%{throwable}";
  }
  createLogger(debugPattern,logNameDebug,maxDebugSize,debugLog,Priority.DEBUG);
  createLogger(infoPattern,logNameInfo,maxInfoSize,infoLog,Priority.INFO);
  createLogger(warnPattern,logNameWarn,maxWarnSize,warnLog,Priority.WARN);
  createLogger(errorPattern,logNameError,maxErrorSize,errorLog,Priority.ERROR);
}
