{
  IQ reply=null;
  MUCRoom room=null;
  String name=packet.getTo().getNode();
  if (name != null) {
    room=mucService.getChatRoom(name);
  }
  if (room == null) {
    reply=IQ.createResultIQ(packet);
    reply.setChildElement(packet.getChildElement().createCopy());
    reply.setError(PacketError.Condition.item_not_found);
    return reply;
  }
 else   if (!room.isRegistrationEnabled()) {
    reply=IQ.createResultIQ(packet);
    reply.setChildElement(packet.getChildElement().createCopy());
    reply.setError(PacketError.Condition.not_allowed);
    return reply;
  }
  if (IQ.Type.get == packet.getType()) {
    reply=IQ.createResultIQ(packet);
    String nickname=room.getReservedNickname(packet.getFrom().toBareJID());
    Element currentRegistration=probeResult.createCopy();
    if (nickname != null) {
      ElementUtil.setProperty(currentRegistration,"query.registered",null);
      Element form=currentRegistration.element(QName.get("x","jabber:x:data"));
      Iterator fields=form.elementIterator("field");
      Element field;
      while (fields.hasNext()) {
        field=(Element)fields.next();
        if ("muc#register_roomnick".equals(field.attributeValue("var"))) {
          field.addElement("value").addText(nickname);
        }
      }
      reply.setChildElement(currentRegistration);
    }
 else {
      reply.setChildElement(currentRegistration);
    }
  }
 else   if (IQ.Type.set == packet.getType()) {
    try {
      List<Presence> presences=new ArrayList<Presence>();
      reply=IQ.createResultIQ(packet);
      Element iq=packet.getChildElement();
      if (ElementUtil.includesProperty(iq,"query.remove")) {
        presences.addAll(room.addNone(packet.getFrom().toBareJID(),room.getRole()));
      }
 else {
        Element formElement=iq.element("x");
        if (formElement != null) {
          final DataForm registrationForm=new DataForm(formElement);
          List<String> values=registrationForm.getField("muc#register_roomnick").getValues();
          String nickname=(!values.isEmpty() ? values.get(0) : null);
          presences.addAll(room.addMember(packet.getFrom().toBareJID(),nickname,room.getRole()));
        }
 else {
          reply.setChildElement(packet.getChildElement().createCopy());
          reply.setError(PacketError.Condition.bad_request);
        }
      }
      for (      Presence presence : presences) {
        room.send(presence);
      }
    }
 catch (    ForbiddenException e) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.forbidden);
    }
catch (    ConflictException e) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.conflict);
    }
catch (    Exception e) {
      Log.error(e.getMessage(),e);
    }
  }
  return reply;
}
