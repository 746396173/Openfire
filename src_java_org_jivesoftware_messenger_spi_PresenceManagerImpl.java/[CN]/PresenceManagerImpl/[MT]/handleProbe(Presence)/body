{
  String username=packet.getTo().getNode();
  Roster roster=(Roster)CacheManager.getCache("username2roster").get(username);
  if (roster == null) {
synchronized (username.intern()) {
      roster=(Roster)CacheManager.getCache("username2roster").get(username);
      if (roster == null) {
        roster=new Roster(username);
        CacheManager.getCache("username2roster").put(username,roster);
      }
    }
  }
  try {
    RosterItem item=roster.getRosterItem(packet.getFrom());
    if (item.getSubStatus() == RosterItem.SUB_FROM || item.getSubStatus() == RosterItem.SUB_BOTH) {
      probePresence(packet.getFrom(),packet.getTo());
    }
 else {
      PacketError.Condition error=PacketError.Condition.not_authorized;
      if ((item.getSubStatus() == RosterItem.SUB_NONE && item.getRecvStatus() != RosterItem.RECV_SUBSCRIBE) || (item.getSubStatus() == RosterItem.SUB_TO && item.getRecvStatus() != RosterItem.RECV_SUBSCRIBE)) {
        error=PacketError.Condition.forbidden;
      }
      Presence presenceToSend=new Presence();
      presenceToSend.setError(error);
      presenceToSend.setTo(packet.getFrom());
      presenceToSend.setFrom(packet.getTo());
      deliverer.deliver(presenceToSend);
    }
  }
 catch (  UserNotFoundException e) {
    Presence presenceToSend=new Presence();
    presenceToSend.setError(PacketError.Condition.forbidden);
    presenceToSend.setTo(packet.getFrom());
    presenceToSend.setFrom(packet.getTo());
    deliverer.deliver(presenceToSend);
  }
}
