{
  Iterator iter=onlineUsers.values().iterator();
  List presences=new ArrayList();
  while (iter.hasNext()) {
    Presence presence=(Presence)iter.next();
    if (presence.isAvailable()) {
      presences.add(presence);
    }
  }
switch (sortField) {
case PresenceManager.SORT_ONLINE_TIME:
{
      Collections.sort(presences,new Comparator(){
        public int compare(        Object object1,        Object object2){
          Presence presence1=(Presence)object1;
          Presence presence2=(Presence)object2;
          Session presence1Session=sessionManager.getSession(presence1.getFrom());
          Session presence2Session=sessionManager.getSession(presence2.getFrom());
          if (ascending) {
            return presence1Session.getCreationDate().compareTo(presence2Session.getCreationDate());
          }
 else {
            return presence2Session.getCreationDate().compareTo(presence1Session.getCreationDate());
          }
        }
      }
);
      break;
    }
case PresenceManager.SORT_USERNAME:
{
    Collections.sort(presences,new Comparator(){
      public int compare(      Object object1,      Object object2){
        Presence presence1=(Presence)object1;
        Presence presence2=(Presence)object2;
        String presenceUser1="";
        String presenceUser2="";
        try {
          presenceUser1=userManager.getUser(presence1.getFrom().getNode()).getUsername();
          presenceUser2=userManager.getUser(presence2.getFrom().getNode()).getUsername();
        }
 catch (        UserNotFoundException e) {
          Log.error(LocaleUtils.getLocalizedString("admin.error"),e);
        }
        if (ascending) {
          return presenceUser1.compareTo(presenceUser2);
        }
 else {
          return presenceUser2.compareTo(presenceUser1);
        }
      }
    }
);
    break;
  }
default :
{
}
}
List<User> users=new ArrayList<User>();
for (int i=0; i < presences.size(); i++) {
Presence presence=(Presence)presences.get(i);
try {
users.add(userManager.getUser(presence.getFrom().getNode()));
}
 catch (UserNotFoundException e) {
Log.error(LocaleUtils.getLocalizedString("admin.error"),e);
}
}
if (numResults > users.size()) {
return Collections.unmodifiableCollection(users);
}
 else {
return Collections.unmodifiableCollection(users.subList(0,numResults - 1));
}
}
