{
  int channelOffset;
  if (delayLength < 0) {
    channelOffset=1;
    delayLength=-delayLength;
  }
 else {
    channelOffset=0;
  }
  int[] newContribution=new int[packetLength];
  if (currentContribution == null) {
    int inIx=previousContribution.length - delayLength + channelOffset;
    int outIx=channelOffset;
    for (int i=0; i < delayLength; i+=2) {
      newContribution[outIx]=previousContribution[inIx];
      inIx+=2;
      outIx+=2;
    }
    return newContribution;
  }
  System.arraycopy(currentContribution,0,newContribution,0,packetLength);
  int[] c=new int[newContribution.length - delayLength];
  for (int i=channelOffset; i < c.length; i+=2) {
    c[i]=newContribution[i];
  }
  for (int i=channelOffset; i < c.length; i+=2) {
    newContribution[i + delayLength]=(int)(c[i] * nonDominantChannelVolume);
  }
  if (previousContribution != null) {
    int inIx=packetLength - delayLength + channelOffset;
    int outIx=channelOffset;
    for (int i=0; i < delayLength; i+=2) {
      newContribution[outIx]=(int)(previousContribution[inIx] * nonDominantChannelVolume);
      inIx+=2;
      outIx+=2;
    }
  }
 else {
    for (int i=channelOffset; i < delayLength; i+=2) {
      newContribution[i]=0;
    }
  }
  return newContribution;
}
