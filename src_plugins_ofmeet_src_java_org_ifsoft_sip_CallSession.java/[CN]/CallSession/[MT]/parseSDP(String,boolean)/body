{
  Log.info("parseSDP " + sdp);
  SdpFactory sdpFactory=SdpFactory.getInstance();
  try {
    SessionDescription sd=sdpFactory.createSessionDescription(sdp);
    @SuppressWarnings("unchecked") Vector<MediaDescription> mdesc=(Vector<MediaDescription>)sd.getMediaDescriptions(false);
    for (    MediaDescription md : mdesc) {
      javax.sdp.Media media=md.getMedia();
      if (media.getMediaType().equals("video") && media.getMediaPort() == 0 && vRelay != null) {
        Log.debug("[[" + internalCallId + "]] Video mapping conflict!! (SDP VIDEO PORT = 0)");
      }
      if (media.getMediaType().equals("video") && media.getMediaPort() != 0) {
        Log.info("[[" + internalCallId + "]] Video sdp detected! starting video rtp stream...");
        if (vRelay == null) {
          try {
            vRelay=new RtpRelay(this,true);
          }
 catch (          IOException e) {
            Log.error("unable to create video relay!",e);
          }
        }
        remotePort=media.getMediaPort();
        if (md.getConnection() != null) {
          remoteParty=md.getConnection().getAddress();
        }
 else {
          remoteParty=sd.getConnection().getAddress();
        }
        vRelay.setSipDest(remoteParty,remotePort);
        @SuppressWarnings("unchecked") Vector<Attribute> attributes=(Vector<Attribute>)md.getAttributes(false);
        for (        Attribute attrib : attributes) {
          if (attrib.getName().equals("rtpmap")) {
            Log.debug("[[" + internalCallId + "]] Got attribute value "+ attrib.getValue());
            String fields[]=attrib.getValue().split(" ",2);
            int codec=Integer.parseInt(fields[0]);
            String name=fields[1].split("/")[0];
            int clockRate=Integer.parseInt(fields[1].split("/")[1]);
            Log.info("[[" + internalCallId + "]] Payload "+ codec+ " rate "+ clockRate+ " is mapped to "+ name);
            if (codec >= 96) {
              Payload bitRatePayload=getByName(name,clockRate);
              if (bitRatePayload != null && bitRatePayload instanceof VPayload) {
                VPayload tmp=(VPayload)bitRatePayload;
                VPayload p=new VPayload(codec,tmp.name,clockRate,tmp.bitRate,tmp.width,tmp.height,tmp.framerate);
                if (offer) {
                  offerVPayloads.add(p);
                }
 else {
                  answerVPayloads.add(p);
                }
              }
            }
          }
        }
      }
 else {
        remotePort=media.getMediaPort();
        if (md.getConnection() != null) {
          remoteParty=md.getConnection().getAddress();
        }
 else {
          remoteParty=sd.getConnection().getAddress();
        }
        Log.info("CallSession parseSDP " + remoteParty + " "+ remotePort);
        @SuppressWarnings("unchecked") Vector<String> codecs=(Vector<String>)media.getMediaFormats(false);
        for (        String codec : codecs) {
          int id=Integer.parseInt(codec);
          Log.debug("[[" + internalCallId + "]] Got a codec "+ id);
          if (id < 97) {
            Payload p=getById(id);
            if (p != null) {
              if (offer) {
                offerPayloads.add(p);
              }
 else {
                answerPayloads.add(p);
              }
            }
          }
        }
        @SuppressWarnings("unchecked") Vector<Attribute> attributes=(Vector<Attribute>)md.getAttributes(false);
        for (        Attribute attrib : attributes) {
          if (attrib.getName().equals("rtpmap")) {
            Log.debug("[[" + internalCallId + "]] Got attribute value "+ attrib.getValue());
            String fields[]=attrib.getValue().split(" ",2);
            int codec=Integer.parseInt(fields[0]);
            String name=fields[1].split("/")[0];
            int clockRate=Integer.parseInt(fields[1].split("/")[1]);
            Log.info("[[" + internalCallId + "]] Payload "+ codec+ " rate "+ clockRate+ " is mapped to "+ name);
            if (codec >= 96) {
              Payload bitRatePayload=getByName(name,clockRate);
              if (bitRatePayload != null) {
                Payload p=new Payload(codec,name,clockRate,bitRatePayload.bitRate);
                if (offer) {
                  offerPayloads.add(p);
                }
 else {
                  answerPayloads.add(p);
                }
              }
            }
          }
        }
      }
    }
    try {
      InetAddress remoteAddr=InetAddress.getByName(remoteParty);
      Log.info("CallSession buildSDP " + remoteAddr + " "+ remoteParty+ " "+ remotePort+ "\n"+ sd);
      mediaStream.setTarget(new MediaStreamTarget(new InetSocketAddress(remoteAddr,remotePort),new InetSocketAddress(remoteAddr,remotePort + 1)));
      mediaStream.setDirection(MediaDirection.SENDRECV);
      mediaStream.start();
    }
 catch (    Exception e) {
      Log.error("Error building SDP",e);
    }
    callControl.inviteEvent(true,callId);
  }
 catch (  Exception e) {
    Log.error("Unable to parse SDP!",e);
  }
}
