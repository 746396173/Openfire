{
  IQ reply=IQ.createResultIQ(iq);
  Element childElement=iq.getChildElement();
  String namespace=childElement.getNamespaceURI();
  Element childElementCopy=iq.getChildElement().createCopy();
  reply.setChildElement(childElementCopy);
  if (NAMESPACE.equals(namespace)) {
    if (isEnabled()) {
      Element stun=childElementCopy.addElement("stun");
      if (isLocalEnabled()) {
        StunServerAddress local;
        local=new StunServerAddress(primaryAddress,String.valueOf(primaryPort));
        if (!externalServers.contains(local)) {
          Element server=stun.addElement("server");
          server.addAttribute("host",local.getServer());
          server.addAttribute("udp",local.getPort());
        }
      }
      for (      StunServerAddress stunServerAddress : externalServers) {
        Element server=stun.addElement("server");
        server.addAttribute("host",stunServerAddress.getServer());
        server.addAttribute("udp",stunServerAddress.getPort());
      }
      try {
        String ip=sessionManager.getSession(iq.getFrom()).getHostAddress();
        if (ip != null) {
          Element publicIp=childElementCopy.addElement("publicip");
          publicIp.addAttribute("ip",ip);
        }
      }
 catch (      UnknownHostException e) {
        Log.error(e.getMessage(),e);
      }
    }
  }
 else {
    reply.setError(PacketError.Condition.service_unavailable);
  }
  try {
    Log.debug("STUNService: RETURNED:" + reply.toXML());
  }
 catch (  Exception e) {
    Log.error(e.getMessage(),e);
  }
  return reply;
}
