{
  ServerTransaction serverTransaction=requestEvent.getServerTransaction();
  Dialog dialog=null;
  if (serverTransaction != null) {
    Log.debug("SimpleListener(" + myUsername + ").processRequest:  Getting dialog");
    dialog=serverTransaction.getDialog();
  }
  int responseCode=200;
  Log.debug("SimpleListener(" + myUsername + ").processRequest:  Received a request event:  \n"+ requestEvent.getRequest().toString());
  String fromAddr="";
  Request request=requestEvent.getRequest();
  if (request.getHeader(FromHeader.NAME) != null) {
    FromHeader fromHeader=(FromHeader)request.getHeader(FromHeader.NAME);
    Address fromAddress=fromHeader.getAddress();
    URI fromUri=fromAddress.getURI();
    if (fromUri != null) {
      if (fromUri.isSipURI()) {
        SipURI fromSipUri=(SipURI)fromUri;
        fromAddr=fromSipUri.getUser() + "@" + fromSipUri.getHost();
      }
 else {
        fromAddr=fromUri.toString();
      }
    }
  }
  Log.debug("SimpleListener(" + myUsername + ").processRequest:  FromAddr = "+ fromAddr);
  Log.debug("SimpleListener(" + myUsername + ").processRequest:  Request method = '"+ request.getMethod()+ "'");
  if (request.getMethod().equals(Request.MESSAGE)) {
    Log.debug("SimpleListener(" + myUsername + ").processRequest:  Starting MESSAGE request handling process.");
    JID senderJid=getSession().getTransport().convertIDToJID(fromAddr);
    String msgContent=new String((byte[])request.getContent());
    Log.debug("SimpleListener(" + myUsername + ").processRequest:  Forwarding MESSAGE request as XMPP message, setting from = "+ senderJid+ " and content = '"+ msgContent+ "'");
    getSession().getTransport().sendMessage(getSession().getJID(),senderJid,msgContent);
    getSession().sendResponse(responseCode,request,serverTransaction);
  }
 else   if (request.getMethod().equals(Request.NOTIFY)) {
    SubscriptionStateHeader subscriptionStateHeader=(SubscriptionStateHeader)request.getHeader(SubscriptionStateHeader.NAME);
    Log.debug("SimpleListener(" + myUsername + ").processRequest:  NOTIFY request handling process started.");
    if (subscriptionStateHeader.getState().equalsIgnoreCase(SubscriptionStateHeader.ACTIVE)) {
      Log.debug("SimpleListener(" + myUsername + ").processRequest:  NOTIFY Active!");
      int expires=subscriptionStateHeader.getExpires();
      Log.debug("SimpleListener(" + myUsername + ").processRequest:  NOTIFY Expiry = "+ expires);
      try {
        if (expires > 0) {
          String content="";
          if (request.getContent() != null)           content=new String((byte[])request.getContent());
          if (content.length() > 0) {
            SimplePresence simplePresence=SimplePresence.parseSimplePresence(content);
            try {
              SimpleBuddy buddy=getSession().getBuddyManager().getBuddy(getSession().getTransport().convertIDToJID(fromAddr));
              String verboseStatus=null;
              if (simplePresence.getTupleStatus().isOpen()) {
switch (simplePresence.getRpid()) {
case ON_THE_PHONE:
                  verboseStatus="On Phone";
              }
            }
            buddy.setPresenceAndStatus(((SimpleTransport)getSession().getTransport()).convertSIPStatusToXMPP(simplePresence),verboseStatus);
          }
 catch (          NotFoundException e) {
            Log.debug("SIMPLE: Received presense notification for contact we don't care about: " + fromAddr);
          }
        }
      }
 else {
        Presence p=new Presence();
        p.setType(Presence.Type.unsubscribed);
        p.setTo(getSession().getJID());
        p.setFrom(getSession().getTransport().convertIDToJID(fromAddr));
        getSession().getTransport().sendPacket(p);
      }
      Log.debug("SimpleListener(" + myUsername + ").processRequest:  Sending XMPP presence packet.");
    }
 catch (    Exception ex) {
      Log.debug("SimpleListener(" + myUsername + ").processRequest:  Exception occured when processing NOTIFY packet...",ex);
    }
  }
 else   if (subscriptionStateHeader.getState().equalsIgnoreCase(SubscriptionStateHeader.TERMINATED)) {
    Presence p=new Presence();
    p.setType(Presence.Type.unsubscribed);
    p.setTo(getSession().getJID());
    p.setFrom(getSession().getTransport().convertIDToJID(fromAddr));
    getSession().getTransport().sendPacket(p);
  }
  getSession().sendResponse(responseCode,request,serverTransaction);
}
 else if (request.getMethod().equals(Request.SUBSCRIBE)) {
  Log.debug("SimpleListener for " + myUsername + ":  SUBSCRIBE request handling process.");
  ServerTransaction transaction=getSession().sendResponse(202,request,serverTransaction);
  Log.debug("SimpleListener for " + myUsername + ":  SUBSCRIBE should be followed by a NOTIFY");
  try {
    if (transaction != null)     getSession().sendNotify(transaction.getDialog());
 else     getSession().sendNotify(dialog);
  }
 catch (  Exception e) {
    Log.debug("SimpleListener for " + myUsername + ":  Unable to prepare NOTIFY packet.",e);
  }
}
}
