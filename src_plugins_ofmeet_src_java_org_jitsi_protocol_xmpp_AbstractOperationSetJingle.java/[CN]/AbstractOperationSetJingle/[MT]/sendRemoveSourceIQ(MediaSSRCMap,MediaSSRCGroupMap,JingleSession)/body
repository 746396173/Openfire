{
  JingleIQ removeSourceIq=new JingleIQ();
  removeSourceIq.setAction(JingleAction.SOURCEREMOVE);
  removeSourceIq.setFrom(getOurJID());
  removeSourceIq.setType(IQ.Type.SET);
  for (  String media : ssrcs.getMediaTypes()) {
    ContentPacketExtension content=new ContentPacketExtension();
    content.setName(media);
    RtpDescriptionPacketExtension rtpDesc=new RtpDescriptionPacketExtension();
    rtpDesc.setMedia(media);
    content.addChildExtension(rtpDesc);
    for (    SourcePacketExtension ssrc : ssrcs.getSSRCsForMedia(media)) {
      try {
        rtpDesc.addChildExtension(ssrc.copy());
      }
 catch (      Exception e) {
        logger.error("Copy SSRC error",e);
      }
    }
    removeSourceIq.addContent(content);
  }
  if (ssrcGroupMap != null) {
    for (    String media : ssrcGroupMap.getMediaTypes()) {
      ContentPacketExtension content=removeSourceIq.getContentByName(media);
      RtpDescriptionPacketExtension rtpDesc;
      if (content == null) {
        logger.warn("No SSRCs to be removed when group exists for media: " + media);
        content=new ContentPacketExtension();
        content.setName(media);
        removeSourceIq.addContent(content);
        rtpDesc=new RtpDescriptionPacketExtension();
        rtpDesc.setMedia(media);
        content.addChildExtension(rtpDesc);
      }
 else {
        rtpDesc=content.getFirstChildOfType(RtpDescriptionPacketExtension.class);
      }
      for (      SSRCGroup ssrcGroup : ssrcGroupMap.getSSRCGroupsForMedia(media)) {
        try {
          rtpDesc.addChildExtension(ssrcGroup.getExtensionCopy());
        }
 catch (        Exception e) {
          logger.error("Copy SSRC GROUP error",e);
        }
      }
    }
  }
  String peerSid=session.getSessionID();
  removeSourceIq.setTo(session.getAddress());
  removeSourceIq.setSID(peerSid);
  logger.info("Notify remove SSRC " + session.getAddress() + " SID: "+ peerSid);
  XmppConnection connection=getConnection();
  connection.sendPacket(removeSourceIq);
}
