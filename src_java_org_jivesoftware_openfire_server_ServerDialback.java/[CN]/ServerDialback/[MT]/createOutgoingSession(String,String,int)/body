{
  String hostname=null;
  int realPort=port;
  try {
    Socket socket=new Socket();
    List<DNSUtil.HostAddress> hosts=DNSUtil.resolveXMPPDomain(remoteDomain,port);
    for (Iterator<DNSUtil.HostAddress> it=hosts.iterator(); it.hasNext(); ) {
      try {
        DNSUtil.HostAddress address=it.next();
        hostname=address.getHost();
        realPort=address.getPort();
        Log.debug("ServerDialback: OS - Trying to connect to " + remoteDomain + ":"+ port+ "(DNS lookup: "+ hostname+ ":"+ realPort+ ")");
        socket.connect(new InetSocketAddress(hostname,realPort),RemoteServerManager.getSocketTimeout());
        Log.debug("ServerDialback: OS - Connection to " + remoteDomain + ":"+ port+ " successful");
        break;
      }
 catch (      Exception e) {
        Log.warn("Error trying to connect to remote server: " + remoteDomain + "(DNS lookup: "+ hostname+ ":"+ realPort+ ")",e);
      }
    }
    connection=new SocketConnection(XMPPServer.getInstance().getPacketDeliverer(),socket,false);
    StringBuilder stream=new StringBuilder();
    stream.append("<stream:stream");
    stream.append(" xmlns:stream=\"http://etherx.jabber.org/streams\"");
    stream.append(" xmlns=\"jabber:server\"");
    stream.append(" to=\"").append(remoteDomain).append("\"");
    stream.append(" from=\"").append(localDomain).append("\"");
    stream.append(" xmlns:db=\"jabber:server:dialback\"");
    stream.append(" version=\"1.0\">");
    connection.deliverRawText(stream.toString());
    int soTimeout=socket.getSoTimeout();
    socket.setSoTimeout(RemoteServerManager.getSocketTimeout());
    XMPPPacketReader reader=new XMPPPacketReader();
    reader.setXPPFactory(FACTORY);
    reader.getXPPParser().setInput(new InputStreamReader(ServerTrafficCounter.wrapInputStream(socket.getInputStream()),CHARSET));
    XmlPullParser xpp=reader.getXPPParser();
    for (int eventType=xpp.getEventType(); eventType != XmlPullParser.START_TAG; ) {
      eventType=xpp.next();
    }
    if ("jabber:server:dialback".equals(xpp.getNamespace("db"))) {
      socket.setSoTimeout(soTimeout);
      String id=xpp.getAttributeValue("","id");
      OutgoingServerSocketReader socketReader=new OutgoingServerSocketReader(reader);
      if (authenticateDomain(socketReader,localDomain,remoteDomain,id)) {
        StreamID streamID=new BasicStreamIDFactory().createStreamID(id);
        LocalOutgoingServerSession session=new LocalOutgoingServerSession(localDomain,connection,socketReader,streamID);
        connection.init(session);
        session.setAddress(new JID(null,remoteDomain,null));
        return session;
      }
 else {
        connection.close();
      }
    }
 else {
      Log.debug("ServerDialback: OS - Invalid namespace in packet: " + xpp.getText());
      connection.deliverRawText(new StreamError(StreamError.Condition.invalid_namespace).toXML());
      connection.close();
    }
  }
 catch (  IOException e) {
    Log.debug("ServerDialback: Error connecting to the remote server: " + remoteDomain + "(DNS lookup: "+ hostname+ ":"+ realPort+ ")",e);
    if (connection != null) {
      connection.close();
    }
  }
catch (  Exception e) {
    Log.error("Error creating outgoing session to remote server: " + remoteDomain + "(DNS lookup: "+ hostname+ ")",e);
    if (connection != null) {
      connection.close();
    }
  }
  return null;
}
