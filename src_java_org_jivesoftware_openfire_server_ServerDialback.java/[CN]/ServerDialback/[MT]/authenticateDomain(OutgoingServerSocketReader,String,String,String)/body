{
  final Logger log=LoggerFactory.getLogger(Log.getName() + "[Authenticate domain: " + domain+ " (id "+ id+ ") with hostname: "+ hostname+ "]");
  log.debug("Authenticating domain ...");
  String key=AuthFactory.createDigest(id,getSecretkey());
synchronized (socketReader) {
    log.debug("Sending dialback key and wait for the validation response...");
    StringBuilder sb=new StringBuilder();
    sb.append("<db:result");
    sb.append(" from=\"").append(domain).append("\"");
    sb.append(" to=\"").append(hostname).append("\">");
    sb.append(key);
    sb.append("</db:result>");
    connection.deliverRawText(sb.toString());
    try {
      while (true) {
        Element doc=socketReader.getElement(RemoteServerManager.getSocketTimeout(),TimeUnit.MILLISECONDS);
        if (doc == null) {
          log.debug("Failed to authenticate domain: Time out waiting for validation response.");
          return false;
        }
 else         if ("db".equals(doc.getNamespacePrefix()) && "result".equals(doc.getName())) {
          if ("valid".equals(doc.attributeValue("type"))) {
            log.debug("Authenticated succeeded!");
            return true;
          }
 else {
            log.debug("Failed to authenticate domain: the validation response was received, but did not grant authentication.");
            return false;
          }
        }
 else {
          log.warn("Ignoring unexpected answer while waiting for dialback validation: " + doc.asXML());
        }
      }
    }
 catch (    InterruptedException e) {
      log.debug("Failed to authenticate domain: An interrupt was received while waiting for validation response (is Openfire shutting down?)");
      return false;
    }
  }
}
