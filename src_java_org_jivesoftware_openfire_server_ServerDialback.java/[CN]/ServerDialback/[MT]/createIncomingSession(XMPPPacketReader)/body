{
  XmlPullParser xpp=reader.getXPPParser();
  StringBuilder sb;
  if ("jabber:server:dialback".equals(xpp.getNamespace("db"))) {
    Log.debug("ServerDialback: Processing incoming session.");
    StreamID streamID=sessionManager.nextStreamID();
    sb=new StringBuilder();
    sb.append("<stream:stream");
    sb.append(" xmlns:stream=\"http://etherx.jabber.org/streams\"");
    sb.append(" xmlns=\"jabber:server\" xmlns:db=\"jabber:server:dialback\"");
    sb.append(" id=\"");
    sb.append(streamID.toString());
    sb.append("\">");
    connection.deliverRawText(sb.toString());
    try {
      Element doc=reader.parseDocument().getRootElement();
      if ("db".equals(doc.getNamespacePrefix()) && "result".equals(doc.getName())) {
        String hostname=doc.attributeValue("from");
        String recipient=doc.attributeValue("to");
        Log.debug("ServerDialback: RS - Validating remote domain for incoming session from {} to {}",hostname,recipient);
        if (validateRemoteDomain(doc,streamID)) {
          Log.debug("ServerDialback: RS - Validation of remote domain for incoming session from {} to {} was successful.",hostname,recipient);
          LocalIncomingServerSession session=sessionManager.createIncomingServerSession(connection,streamID,hostname);
          session.addValidatedDomain(hostname);
          session.setLocalDomain(recipient);
          return session;
        }
 else {
          Log.debug("ServerDialback: RS - Validation of remote domain for incoming session from {} to {} was not successful.",hostname,recipient);
          return null;
        }
      }
 else       if ("db".equals(doc.getNamespacePrefix()) && "verify".equals(doc.getName())) {
        verifyReceivedKey(doc,connection);
        connection.close();
        String verifyFROM=doc.attributeValue("from");
        String id=doc.attributeValue("id");
        Log.debug("ServerDialback: AS - Connection closed for host: " + verifyFROM + " id: "+ id);
        return null;
      }
 else {
        Log.debug("ServerDialback: Received an invalid/unknown packet while trying to process an incoming session: {}",doc.asXML());
        connection.deliverRawText(new StreamError(StreamError.Condition.invalid_xml).toXML());
        connection.close();
        return null;
      }
    }
 catch (    Exception e) {
      Log.error("An error occured while creating a server session",e);
      connection.close();
      return null;
    }
  }
 else {
    Log.debug("ServerDialback: Received a stanza in an invalid namespace while trying to process an incoming session: {}",xpp.getNamespace("db"));
    connection.deliverRawText(new StreamError(StreamError.Condition.invalid_namespace).toXML());
    connection.close();
    return null;
  }
}
