{
  JiveGlobals.migrateProperty("hybridAuthProvider.primaryProvider.className");
  JiveGlobals.migrateProperty("hybridAuthProvider.secondaryProvider.className");
  JiveGlobals.migrateProperty("hybridAuthProvider.tertiaryProvider.className");
  JiveGlobals.migrateProperty("hybridAuthProvider.primaryProvider.overrideList");
  JiveGlobals.migrateProperty("hybridAuthProvider.secondaryProvider.overrideList");
  JiveGlobals.migrateProperty("hybridAuthProvider.tertiaryProvider.overrideList");
  String primaryClass=JiveGlobals.getProperty("hybridAuthProvider.primaryProvider.className");
  if (primaryClass == null) {
    Log.error("A primary AuthProvider must be specified. Authentication will be disabled.");
    return;
  }
  try {
    Class c=ClassUtils.forName(primaryClass);
    primaryProvider=(AuthProvider)c.newInstance();
    if (!primaryProvider.isPlainSupported()) {
      Log.error("Provider " + primaryClass + " must support plain authentication. "+ "Authentication disabled.");
      primaryProvider=null;
      return;
    }
    Log.debug("Primary auth provider: " + primaryClass);
  }
 catch (  Exception e) {
    Log.error("Unable to load primary auth provider: " + primaryClass + ". Authentication will be disabled.",e);
    return;
  }
  String secondaryClass=JiveGlobals.getProperty("hybridAuthProvider.secondaryProvider.className");
  if (secondaryClass != null) {
    try {
      Class c=ClassUtils.forName(secondaryClass);
      secondaryProvider=(AuthProvider)c.newInstance();
      if (!secondaryProvider.isPlainSupported()) {
        Log.error("Provider " + secondaryClass + " must support plain authentication. "+ "Authentication disabled.");
        primaryProvider=null;
        secondaryProvider=null;
        return;
      }
      Log.debug("Secondary auth provider: " + secondaryClass);
    }
 catch (    Exception e) {
      Log.error("Unable to load secondary auth provider: " + secondaryClass,e);
    }
  }
  String tertiaryClass=JiveGlobals.getProperty("hybridAuthProvider.tertiaryProvider.className");
  if (tertiaryClass != null) {
    try {
      Class c=ClassUtils.forName(tertiaryClass);
      tertiaryProvider=(AuthProvider)c.newInstance();
      if (!tertiaryProvider.isPlainSupported()) {
        Log.error("Provider " + tertiaryClass + " must support plain authentication. "+ "Authentication disabled.");
        primaryProvider=null;
        secondaryProvider=null;
        tertiaryProvider=null;
        return;
      }
      Log.debug("Tertiary auth provider: " + tertiaryClass);
    }
 catch (    Exception e) {
      Log.error("Unable to load tertiary auth provider: " + tertiaryClass,e);
    }
  }
  String overrideList=JiveGlobals.getProperty("hybridAuthProvider.primaryProvider.overrideList","");
  for (  String user : overrideList.split(",")) {
    primaryOverrides.add(user.trim().toLowerCase());
  }
  if (secondaryProvider != null) {
    overrideList=JiveGlobals.getProperty("hybridAuthProvider.secondaryProvider.overrideList","");
    for (    String user : overrideList.split(",")) {
      secondaryOverrides.add(user.trim().toLowerCase());
    }
  }
  if (tertiaryProvider != null) {
    overrideList=JiveGlobals.getProperty("hybridAuthProvider.tertiaryProvider.overrideList","");
    for (    String user : overrideList.split(",")) {
      tertiaryOverrides.add(user.trim().toLowerCase());
    }
  }
}
