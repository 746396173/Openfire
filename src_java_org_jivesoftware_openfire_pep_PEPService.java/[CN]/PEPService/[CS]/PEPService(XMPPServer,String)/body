{
  this.serviceOwnerJID=bareJID;
  router=server.getPacketRouter();
  adHocCommandManager=new AdHocCommandManager();
  adHocCommandManager.addCommand(new PendingSubscriptionsCommand(this));
  leafDefaultConfiguration=PubSubPersistenceManager.loadDefaultConfiguration(this,true);
  if (leafDefaultConfiguration == null) {
    leafDefaultConfiguration=new DefaultNodeConfiguration(true);
    leafDefaultConfiguration.setAccessModel(AccessModel.presence);
    leafDefaultConfiguration.setPublisherModel(PublisherModel.publishers);
    leafDefaultConfiguration.setDeliverPayloads(true);
    leafDefaultConfiguration.setLanguage("English");
    leafDefaultConfiguration.setMaxPayloadSize(5120);
    leafDefaultConfiguration.setNotifyConfigChanges(true);
    leafDefaultConfiguration.setNotifyDelete(true);
    leafDefaultConfiguration.setNotifyRetract(true);
    leafDefaultConfiguration.setPersistPublishedItems(false);
    leafDefaultConfiguration.setMaxPublishedItems(1);
    leafDefaultConfiguration.setPresenceBasedDelivery(false);
    leafDefaultConfiguration.setSendItemSubscribe(true);
    leafDefaultConfiguration.setSubscriptionEnabled(true);
    leafDefaultConfiguration.setReplyPolicy(null);
    PubSubPersistenceManager.createDefaultConfiguration(this,leafDefaultConfiguration);
  }
  collectionDefaultConfiguration=PubSubPersistenceManager.loadDefaultConfiguration(this,false);
  if (collectionDefaultConfiguration == null) {
    collectionDefaultConfiguration=new DefaultNodeConfiguration(false);
    collectionDefaultConfiguration.setAccessModel(AccessModel.presence);
    collectionDefaultConfiguration.setPublisherModel(PublisherModel.publishers);
    collectionDefaultConfiguration.setDeliverPayloads(false);
    collectionDefaultConfiguration.setLanguage("English");
    collectionDefaultConfiguration.setNotifyConfigChanges(true);
    collectionDefaultConfiguration.setNotifyDelete(true);
    collectionDefaultConfiguration.setNotifyRetract(true);
    collectionDefaultConfiguration.setPresenceBasedDelivery(false);
    collectionDefaultConfiguration.setSubscriptionEnabled(true);
    collectionDefaultConfiguration.setReplyPolicy(null);
    collectionDefaultConfiguration.setAssociationPolicy(CollectionNode.LeafNodeAssociationPolicy.all);
    collectionDefaultConfiguration.setMaxLeafNodes(-1);
    PubSubPersistenceManager.createDefaultConfiguration(this,collectionDefaultConfiguration);
  }
  PubSubPersistenceManager.loadNodes(this);
  if (nodes.isEmpty()) {
    JID creatorJID=new JID(bareJID);
    rootCollectionNode=new CollectionNode(this,null,bareJID,creatorJID);
    rootCollectionNode.addOwner(creatorJID);
    rootCollectionNode.saveToDB();
  }
 else {
    rootCollectionNode=(CollectionNode)getNode(bareJID);
  }
}
