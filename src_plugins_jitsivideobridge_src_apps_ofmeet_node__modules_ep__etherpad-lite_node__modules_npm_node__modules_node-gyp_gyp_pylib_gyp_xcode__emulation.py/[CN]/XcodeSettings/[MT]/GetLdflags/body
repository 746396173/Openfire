def GetLdflags(self, configname, product_dir, gyp_to_build_path, arch=None):
    'Returns flags that need to be passed to the linker.\n\n    Args:\n        configname: The name of the configuration to get ld flags for.\n        product_dir: The directory where products such static and dynamic\n            libraries are placed. This is added to the library search path.\n        gyp_to_build_path: A function that converts paths relative to the\n            current gyp file to paths relative to the build direcotry.\n    '
    self.configname = configname
    ldflags = []
    for ldflag in self._Settings().get('OTHER_LDFLAGS', []):
        ldflags.append(self._MapLinkerFlagFilename(ldflag, gyp_to_build_path))
    if self._Test('DEAD_CODE_STRIPPING', 'YES', default='NO'):
        ldflags.append('-Wl,-dead_strip')
    if self._Test('PREBINDING', 'YES', default='NO'):
        ldflags.append('-Wl,-prebind')
    self._Appendf(ldflags, 'DYLIB_COMPATIBILITY_VERSION', '-compatibility_version %s')
    self._Appendf(ldflags, 'DYLIB_CURRENT_VERSION', '-current_version %s')
    self._AppendPlatformVersionMinFlags(ldflags)
    if ('SDKROOT' in self._Settings()):
        ldflags.append(('-isysroot ' + self._SdkPath()))
    for library_path in self._Settings().get('LIBRARY_SEARCH_PATHS', []):
        ldflags.append(('-L' + gyp_to_build_path(library_path)))
    if ('ORDER_FILE' in self._Settings()):
        ldflags.append((('-Wl,-order_file ' + '-Wl,') + gyp_to_build_path(self._Settings()['ORDER_FILE'])))
    if (arch is not None):
        archs = [arch]
    else:
        archs = self._Settings().get('ARCHS', ['i386'])
    if (len(archs) != 1):
        self._WarnUnimplemented('ARCHS')
        archs = ['i386']
    ldflags.append(('-arch ' + archs[0]))
    ldflags.append(('-L' + product_dir))
    install_name = self.GetInstallName()
    if (install_name and (self.spec['type'] != 'loadable_module')):
        ldflags.append(('-install_name ' + install_name.replace(' ', '\\ ')))
    for rpath in self._Settings().get('LD_RUNPATH_SEARCH_PATHS', []):
        ldflags.append(('-Wl,-rpath,' + rpath))
    if ('SDKROOT' in self._Settings()):
        config = self.spec['configurations'][self.configname]
        framework_dirs = config.get('mac_framework_dirs', [])
        for directory in framework_dirs:
            ldflags.append(('-F' + directory.replace('$(SDKROOT)', self._SdkPath())))
    self.configname = None
    return ldflags
