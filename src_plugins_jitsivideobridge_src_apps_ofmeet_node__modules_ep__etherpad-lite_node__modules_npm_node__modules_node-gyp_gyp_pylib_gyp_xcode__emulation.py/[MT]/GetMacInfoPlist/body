def GetMacInfoPlist(product_dir, xcode_settings, gyp_path_to_build_path):
    "Returns (info_plist, dest_plist, defines, extra_env), where:\n  * |info_plist| is the source plist path, relative to the\n    build directory,\n  * |dest_plist| is the destination plist path, relative to the\n    build directory,\n  * |defines| is a list of preprocessor defines (empty if the plist\n    shouldn't be preprocessed,\n  * |extra_env| is a dict of env variables that should be exported when\n    invoking |mac_tool copy-info-plist|.\n\n  Only call this for mac bundle targets.\n\n  Args:\n      product_dir: Path to the directory containing the output bundle,\n          relative to the build directory.\n      xcode_settings: The XcodeSettings of the current target.\n      gyp_to_build_path: A function that converts paths relative to the\n          current gyp file to paths relative to the build direcotry.\n  "
    info_plist = xcode_settings.GetPerTargetSetting('INFOPLIST_FILE')
    if (not info_plist):
        return (None, None, [], {})
    assert (' ' not in info_plist), ('Spaces in Info.plist filenames not supported (%s)' % info_plist)
    info_plist = gyp_path_to_build_path(info_plist)
    if (xcode_settings.GetPerTargetSetting('INFOPLIST_PREPROCESS', default='NO') == 'YES'):
        defines = shlex.split(xcode_settings.GetPerTargetSetting('INFOPLIST_PREPROCESSOR_DEFINITIONS', default=''))
    else:
        defines = []
    dest_plist = os.path.join(product_dir, xcode_settings.GetBundlePlistPath())
    extra_env = xcode_settings.GetPerTargetSettings()
    return (info_plist, dest_plist, defines, extra_env)
