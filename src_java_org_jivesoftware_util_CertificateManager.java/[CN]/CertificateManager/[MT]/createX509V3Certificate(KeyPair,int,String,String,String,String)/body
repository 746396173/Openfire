{
  PublicKey pubKey=kp.getPublic();
  PrivateKey privKey=kp.getPrivate();
  byte[] serno=new byte[8];
  SecureRandom random=SecureRandom.getInstance("SHA1PRNG");
  random.setSeed((new Date().getTime()));
  random.nextBytes(serno);
  BigInteger serial=(new java.math.BigInteger(serno)).abs();
  X509V3CertificateGenerator certGenerator=new X509V3CertificateGenerator();
  certGenerator.reset();
  certGenerator.setSerialNumber(serial);
  certGenerator.setIssuerDN(new X509Name(issuerDN));
  certGenerator.setNotBefore(new Date(System.currentTimeMillis()));
  certGenerator.setNotAfter(new Date(System.currentTimeMillis() + months * (1000L * 60 * 60* 24* 30)));
  certGenerator.setSubjectDN(new X509Name(subjectDN));
  certGenerator.setPublicKey(pubKey);
  certGenerator.setSignatureAlgorithm(signAlgoritm);
  boolean critical=subjectDN == null || "".equals(subjectDN.trim());
  DERSequence othernameSequence=new DERSequence(new ASN1Encodable[]{new DERObjectIdentifier("1.3.6.1.5.5.7.8.5"),new DERTaggedObject(true,0,new DERUTF8String(domain))});
  GeneralName othernameGN=new GeneralName(GeneralName.otherName,othernameSequence);
  GeneralNames subjectAltNames=new GeneralNames(new DERSequence(new ASN1Encodable[]{othernameGN}));
  certGenerator.addExtension(X509Extensions.SubjectAlternativeName,critical,subjectAltNames);
  X509Certificate cert=certGenerator.generateX509Certificate(privKey,"BC",new SecureRandom());
  cert.checkValidity(new Date());
  cert.verify(pubKey);
  return cert;
}
