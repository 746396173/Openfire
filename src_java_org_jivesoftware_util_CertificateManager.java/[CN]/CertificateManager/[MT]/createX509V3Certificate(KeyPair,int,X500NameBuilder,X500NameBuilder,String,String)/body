{
  PublicKey pubKey=kp.getPublic();
  PrivateKey privKey=kp.getPrivate();
  byte[] serno=new byte[8];
  SecureRandom random=SecureRandom.getInstance("SHA1PRNG");
  random.setSeed((new Date().getTime()));
  random.nextBytes(serno);
  BigInteger serial=(new java.math.BigInteger(serno)).abs();
  X500Name issuerDN=issuerBuilder.build();
  X500Name subjectDN=issuerBuilder.build();
  JcaX509v3CertificateBuilder certBuilder=new JcaX509v3CertificateBuilder(issuerDN,serial,new Date(),new Date(System.currentTimeMillis() + days * (1000L * 60 * 60* 24)),subjectDN,pubKey);
  boolean critical=subjectDN.getRDNs().length == 0;
  ASN1Sequence othernameSequence=new DERSequence(new ASN1Encodable[]{new ASN1ObjectIdentifier("1.3.6.1.5.5.7.8.5"),new DERTaggedObject(true,0,new DERUTF8String(domain))});
  GeneralName othernameGN=new GeneralName(GeneralName.otherName,othernameSequence);
  GeneralNames subjectAltNames=new GeneralNames(new GeneralName[]{othernameGN});
  certBuilder.addExtension(Extension.subjectAlternativeName,critical,subjectAltNames);
  JcaX509ExtensionUtils utils=new JcaX509ExtensionUtils();
  certBuilder.addExtension(Extension.subjectKeyIdentifier,false,utils.createSubjectKeyIdentifier(pubKey));
  certBuilder.addExtension(Extension.authorityKeyIdentifier,false,utils.createAuthorityKeyIdentifier(pubKey));
  try {
    ContentSigner signer=new JcaContentSignerBuilder(signAlgoritm).build(privKey);
    X509CertificateHolder cert=certBuilder.build(signer);
    if (!cert.isValidOn(new Date())) {
      throw new GeneralSecurityException("Certificate validity not valid");
    }
    ContentVerifierProvider verifierProvider=new JcaContentVerifierProviderBuilder().build(pubKey);
    if (!cert.isSignatureValid(verifierProvider)) {
      throw new GeneralSecurityException("Certificate signature not valid");
    }
    return new JcaX509CertificateConverter().getCertificate(cert);
  }
 catch (  OperatorCreationException|CertException e) {
    throw new GeneralSecurityException(e);
  }
}
