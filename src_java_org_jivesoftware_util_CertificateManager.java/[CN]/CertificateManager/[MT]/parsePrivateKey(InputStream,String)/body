{
  if (passPhrase == null) {
    passPhrase="";
  }
  try (Reader reader=new InputStreamReader(pemRepresentation);PEMParser pemParser=new PEMParser(reader)){
    final Object object=pemParser.readObject();
    final JcaPEMKeyConverter converter=new JcaPEMKeyConverter().setProvider("BC");
    final KeyPair kp;
    if (object instanceof PEMEncryptedKeyPair) {
      final PEMDecryptorProvider decProv=new JcePEMDecryptorProviderBuilder().build(passPhrase.toCharArray());
      kp=converter.getKeyPair(((PEMEncryptedKeyPair)object).decryptKeyPair(decProv));
    }
 else     if (object instanceof PKCS8EncryptedPrivateKeyInfo) {
      try {
        final PKCS8EncryptedPrivateKeyInfo encryptedInfo=(PKCS8EncryptedPrivateKeyInfo)object;
        final InputDecryptorProvider provider=new JceOpenSSLPKCS8DecryptorProviderBuilder().build(passPhrase.toCharArray());
        final PrivateKeyInfo privateKeyInfo=encryptedInfo.decryptPrivateKeyInfo(provider);
        return converter.getPrivateKey(privateKeyInfo);
      }
 catch (      PKCSException|OperatorCreationException e) {
        throw new IOException("Unable to decrypt private key.",e);
      }
    }
 else     if (object instanceof PrivateKeyInfo) {
      return converter.getPrivateKey((PrivateKeyInfo)object);
    }
 else {
      kp=converter.getKeyPair((PEMKeyPair)object);
    }
    return kp.getPrivate();
  }
 }
