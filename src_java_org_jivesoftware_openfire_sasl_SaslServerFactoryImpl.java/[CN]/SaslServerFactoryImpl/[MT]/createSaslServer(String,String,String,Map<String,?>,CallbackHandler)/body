{
  if (!Arrays.asList(getMechanismNames(props)).contains(mechanism)) {
    Log.debug("This implementation is unable to create a SaslServer instance for the {} mechanism using the provided properties.",mechanism);
    return null;
  }
switch (mechanism.toUpperCase()) {
case "PLAIN":
    if (cbh != null) {
      Log.debug("Unable to instantiate {} SaslServer: A callbackHandler with support for Password, Name, and AuthorizeCallback required.",mechanism);
      return null;
    }
  return new SaslServerPlainImpl(protocol,serverName,props,cbh);
case "SCRAM-SHA-1":
return new ScramSha1SaslServer();
case "ANONYMOUS":
if (!props.containsKey(LocalSession.class.getCanonicalName())) {
Log.debug("Unable to instantiate {} SaslServer: Provided properties do not contain a LocalSession instance.",mechanism);
return null;
}
 else {
final LocalSession session=(LocalSession)props.get(LocalSession.class.getCanonicalName());
return new AnonymousSaslServer(session);
}
case "EXTERNAL":
if (!props.containsKey(LocalSession.class.getCanonicalName())) {
Log.debug("Unable to instantiate {} SaslServer: Provided properties do not contain a LocalSession instance.",mechanism);
return null;
}
 else {
final Object session=props.get(LocalSession.class.getCanonicalName());
if (session instanceof LocalClientSession) {
return new ExternalClientSaslServer((LocalClientSession)session);
}
if (session instanceof LocalIncomingServerSession) {
return new ExternalServerSaslServer((LocalIncomingServerSession)session);
}
Log.debug("Unable to instantiate {} Sasl Server: Provided properties contains neither LocalClientSession nor LocalIncomingServerSession instance.",mechanism);
return null;
}
case JiveSharedSecretSaslServer.NAME:
return new JiveSharedSecretSaslServer();
default :
throw new IllegalStateException();
}
}
