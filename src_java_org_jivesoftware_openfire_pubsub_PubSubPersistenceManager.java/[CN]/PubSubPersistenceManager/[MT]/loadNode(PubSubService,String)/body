{
  Connection con=null;
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  Map<String,Node> nodes=new HashMap<String,Node>();
  try {
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(LOAD_NODE);
    pstmt.setString(1,service.getServiceID());
    pstmt.setString(2,nodeId);
    rs=pstmt.executeQuery();
    Map<String,String> parentMapping=new HashMap<String,String>();
    if (rs.next()) {
      loadNode(service,nodes,parentMapping,rs);
    }
    DbConnectionManager.fastcloseStmt(rs,pstmt);
    String parentId=parentMapping.get(nodeId);
    if (parentId != null) {
      CollectionNode parent=(CollectionNode)service.getNode(parentId);
      if (parent == null) {
        log.error("Could not find parent node " + parentId + " for node "+ nodeId);
      }
 else {
        nodes.get(nodeId).changeParent(parent);
      }
    }
    pstmt=con.prepareStatement(LOAD_NODE_JIDS);
    pstmt.setString(1,service.getServiceID());
    pstmt.setString(2,nodeId);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      loadAssociatedJIDs(nodes,rs);
    }
    DbConnectionManager.fastcloseStmt(rs,pstmt);
    pstmt=con.prepareStatement(LOAD_NODE_GROUPS);
    pstmt.setString(1,service.getServiceID());
    pstmt.setString(2,nodeId);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      loadAssociatedGroups(nodes,rs);
    }
    DbConnectionManager.fastcloseStmt(rs,pstmt);
    pstmt=con.prepareStatement(LOAD_NODE_AFFILIATIONS);
    pstmt.setString(1,service.getServiceID());
    pstmt.setString(2,nodeId);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      loadAffiliations(nodes,rs);
    }
    DbConnectionManager.fastcloseStmt(rs,pstmt);
    pstmt=con.prepareStatement(LOAD_NODE_SUBSCRIPTIONS);
    pstmt.setString(1,service.getServiceID());
    pstmt.setString(2,nodeId);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      loadSubscriptions(service,nodes,rs);
    }
    DbConnectionManager.fastcloseStmt(rs,pstmt);
  }
 catch (  SQLException sqle) {
    log.error(sqle.getMessage(),sqle);
  }
 finally {
    DbConnectionManager.closeConnection(rs,pstmt,con);
  }
  for (  Node node : nodes.values()) {
    node.setSavedToDB(true);
    service.addNode(node);
  }
}
