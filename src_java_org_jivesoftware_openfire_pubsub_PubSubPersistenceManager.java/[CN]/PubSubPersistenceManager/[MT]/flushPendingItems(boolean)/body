{
  if (sendToCluster) {
    CacheFactory.doSynchronousClusterTask(new FlushTask(),false);
  }
  if (itemsToAdd.getFirst() == null && itemsToDelete.getFirst() == null) {
    return;
  }
  if (log.isDebugEnabled()) {
    log.debug("Flush " + itemsPending.size() + " pending items to database");
  }
  boolean abortTransaction=false;
  LinkedList addList=null;
  LinkedList delList=null;
synchronized (itemsPending) {
    addList=itemsToAdd;
    delList=itemsToDelete;
    itemsToAdd=new LinkedList();
    itemsToDelete=new LinkedList();
    int copied=0;
    for (    String key : itemsPending.keySet()) {
      if (!itemCache.containsKey(key)) {
        itemCache.put(key,(PublishedItem)itemsPending.get(key).object);
        copied++;
      }
    }
    if (log.isDebugEnabled() && copied > 0) {
      log.debug("Added " + copied + " pending items to published item cache");
    }
    itemsPending.clear();
  }
  LinkedListNode addItem=addList.getFirst();
  LinkedListNode delItem=delList.getFirst();
  if ((addItem == null) && (delItem == null))   return;
  Connection con=null;
  PreparedStatement pstmt=null;
  if (delItem != null) {
    try {
      con=DbConnectionManager.getTransactionConnection();
      LinkedListNode delHead=delList.getLast().next;
      pstmt=con.prepareStatement(DELETE_ITEM);
      while (delItem != delHead) {
        PublishedItem item=(PublishedItem)delItem.object;
        pstmt.setString(1,item.getNode().getService().getServiceID());
        pstmt.setString(2,encodeNodeID(item.getNode().getNodeID()));
        pstmt.setString(3,item.getID());
        pstmt.addBatch();
        delItem=delItem.next;
      }
      pstmt.executeBatch();
    }
 catch (    SQLException sqle) {
      log.error(sqle.getMessage(),sqle);
      abortTransaction=true;
    }
 finally {
      DbConnectionManager.closeTransactionConnection(pstmt,con,abortTransaction);
    }
  }
  if (addItem != null) {
    try {
      con=DbConnectionManager.getTransactionConnection();
      LinkedListNode addHead=addList.getLast().next;
      pstmt=con.prepareStatement(ADD_ITEM);
      while (addItem != addHead) {
        PublishedItem item=(PublishedItem)addItem.object;
        pstmt.setString(1,item.getNode().getService().getServiceID());
        pstmt.setString(2,encodeNodeID(item.getNodeID()));
        pstmt.setString(3,item.getID());
        pstmt.setString(4,item.getPublisher().toString());
        pstmt.setString(5,StringUtils.dateToMillis(item.getCreationDate()));
        pstmt.setString(6,item.getPayloadXML());
        pstmt.addBatch();
        addItem=addItem.next;
      }
      pstmt.executeBatch();
    }
 catch (    SQLException sqle) {
      log.error(sqle.getMessage(),sqle);
      abortTransaction=true;
    }
 finally {
      DbConnectionManager.closeTransactionConnection(pstmt,con,abortTransaction);
    }
  }
}
