{
  Lock itemLock=CacheFactory.getLock(ITEM_CACHE,itemCache);
  try {
    itemLock.lock();
    flushPendingItems();
  }
  finally {
    itemLock.unlock();
  }
  Connection con=null;
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  int max=MAX_ROWS_FETCH;
  int maxPublished=node.getMaxPublishedItems();
  if (maxRows != -1)   max=maxPublished == -1 ? Math.min(maxRows,MAX_ROWS_FETCH) : Math.min(maxRows,maxPublished);
 else   if (maxPublished != -1)   max=Math.min(MAX_ROWS_FETCH,maxPublished);
  java.util.LinkedList<PublishedItem> results=new java.util.LinkedList<PublishedItem>();
  boolean descending=JiveGlobals.getBooleanProperty("xmpp.pubsub.order.descending",false);
  try {
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(LOAD_ITEMS);
    pstmt.setMaxRows(max);
    pstmt.setString(1,node.getService().getServiceID());
    pstmt.setString(2,encodeNodeID(node.getNodeID()));
    rs=pstmt.executeQuery();
    int counter=0;
    while (rs.next() && (counter < max)) {
      String itemID=rs.getString(1);
      JID publisher=new JID(rs.getString(2));
      Date creationDate=new Date(Long.parseLong(rs.getString(3).trim()));
      PublishedItem item=new PublishedItem(node,publisher,itemID,creationDate);
      if (rs.getString(4) != null) {
        item.setPayloadXML(rs.getString(4));
      }
      if (descending)       results.add(item);
 else       results.addFirst(item);
      counter++;
    }
  }
 catch (  Exception sqle) {
    log.error(sqle.getMessage(),sqle);
  }
 finally {
    DbConnectionManager.closeConnection(rs,pstmt,con);
  }
  if (results.size() == 0)   return Collections.emptyList();
  return results;
}
