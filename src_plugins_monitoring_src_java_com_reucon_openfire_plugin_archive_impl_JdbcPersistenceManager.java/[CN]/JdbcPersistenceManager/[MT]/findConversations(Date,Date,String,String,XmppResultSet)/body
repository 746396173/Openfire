{
  final TreeMap<Long,Conversation> conversations;
  final StringBuilder querySB;
  final StringBuilder whereSB;
  final StringBuilder limitSB;
  conversations=new TreeMap<Long,Conversation>();
  querySB=new StringBuilder(SELECT_CONVERSATIONS);
  whereSB=new StringBuilder();
  limitSB=new StringBuilder();
  startDate=getAuditedStartDate(startDate);
  if (startDate != null) {
    appendWhere(whereSB,CONVERSATION_START_TIME," >= ?");
  }
  if (endDate != null) {
    appendWhere(whereSB,CONVERSATION_END_TIME," <= ?");
  }
  if (ownerJid != null) {
    appendWhere(whereSB,CONVERSATION_OWNER_JID," = ?");
  }
  if (withJid != null) {
    appendWhere(whereSB,CONVERSATION_WITH_JID," = ?");
  }
  if (xmppResultSet != null) {
    Integer firstIndex=null;
    int max=xmppResultSet.getMax() != null ? xmppResultSet.getMax() : DEFAULT_MAX;
    xmppResultSet.setCount(countConversations(startDate,endDate,ownerJid,withJid,whereSB.toString()));
    if (xmppResultSet.getIndex() != null) {
      firstIndex=xmppResultSet.getIndex();
    }
 else     if (xmppResultSet.getAfter() != null) {
      firstIndex=countConversationsBefore(startDate,endDate,ownerJid,withJid,xmppResultSet.getAfter(),whereSB.toString());
      firstIndex+=1;
    }
 else     if (xmppResultSet.getBefore() != null) {
      firstIndex=countConversationsBefore(startDate,endDate,ownerJid,withJid,xmppResultSet.getBefore(),whereSB.toString());
      firstIndex-=max;
      if (firstIndex < 0) {
        firstIndex=0;
      }
    }
    firstIndex=firstIndex != null ? firstIndex : 0;
    if (DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.sqlserver) {
      limitSB.append(" BETWEEN ").append(firstIndex + 1);
      limitSB.append(" AND ").append(firstIndex + max);
    }
 else {
      limitSB.append(" LIMIT ").append(max);
      limitSB.append(" OFFSET ").append(firstIndex);
    }
    xmppResultSet.setFirstIndex(firstIndex);
  }
  if (whereSB.length() != 0) {
    querySB.append(" WHERE ").append(whereSB);
  }
  querySB.append(SELECT_CONVERSATIONS_GROUP_BY);
  if (DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.sqlserver) {
    querySB.insert(0,"SELECT * FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY " + CONVERSATION_ID + ") AS RowNum FROM ( ");
    querySB.append(") ofConversation ) t2 WHERE RowNum");
  }
 else {
    querySB.append(" ORDER BY ").append(CONVERSATION_ID);
  }
  querySB.append(limitSB);
  Connection con=null;
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(querySB.toString());
    bindConversationParameters(startDate,endDate,ownerJid,withJid,pstmt);
    rs=pstmt.executeQuery();
    Log.debug("findConversations: SELECT_CONVERSATIONS: " + pstmt.toString());
    while (rs.next()) {
      Conversation conv=extractConversation(rs);
      conversations.put(conv.getId(),conv);
    }
  }
 catch (  SQLException sqle) {
    Log.error("Error selecting conversations",sqle);
  }
 finally {
    DbConnectionManager.closeConnection(rs,pstmt,con);
  }
  if (xmppResultSet != null && conversations.size() > 0) {
    xmppResultSet.setFirst(conversations.firstKey());
    xmppResultSet.setLast(conversations.lastKey());
  }
  return conversations.values();
}
