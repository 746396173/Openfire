{
  Request req=evt.getRequest();
  Log.debug("[[SIP]] Got a request " + req.getMethod());
  try {
    SipListener sipListener=findSipListener(evt);
    if (sipListener != null) {
      sipListener.processRequest(evt);
      return;
    }
    if (req.getMethod().equals(Request.MESSAGE)) {
      Log.info("[[SIP]] Forwarding message");
      Log.error("[[SIP]] Forwarding failed!");
    }
 else     if (req.getMethod().equals(Request.SUBSCRIBE)) {
      Log.info("[[SIP]] Received a Subscribe message");
      String callid=((CallIdHeader)req.getHeader(CallIdHeader.NAME)).getCallId();
      FromHeader fh=(FromHeader)req.getHeader("From");
      URI ruri=req.getRequestURI();
      String src=((SipURI)fh.getAddress().getURI()).getUser();
      String dest=((SipURI)ruri).getUser();
      SipSubscription sub=SipSubscriptionManager.getWatcherByCallID(dest,callid);
      if (subscribeRport) {
        ViaHeader viaHeaderr=(ViaHeader)req.getHeader(ViaHeader.NAME);
        int rport=Integer.parseInt(viaHeaderr.getParameter("rport"));
        String received=viaHeaderr.getParameter("received");
        Log.debug("[[SIP]] Forcing Contact RPORT: " + received + ":"+ rport);
        Address localrAddress=SipService.addressFactory.createAddress("sip:" + src + "@"+ received+ ":"+ rport);
        ContactHeader nch=SipService.headerFactory.createContactHeader(localrAddress);
        req.removeHeader("Contact");
        req.addHeader(nch);
      }
      ToHeader th=(ToHeader)req.getHeader("To");
      int expires=((ExpiresHeader)req.getHeader(ExpiresHeader.NAME)).getExpires();
      Response res=SipService.messageFactory.createResponse(Response.ACCEPTED,req);
      if (expires > 0) {
        Log.debug("[[SIP]] New subscription or refresh");
        if (sub == null) {
          if (th.getTag() == null) {
            Log.info("[[SIP]] New Subscription, sending add request to user");
            sub=new SipSubscription(req);
            ((ToHeader)res.getHeader(ToHeader.NAME)).setTag(sub.localTag);
            SipSubscriptionManager.addWatcher(dest,sub);
          }
 else {
            Log.warn("[[SIP]] Rejecting Unknown in-dialog subscribe for " + ruri);
            res=SipService.messageFactory.createResponse(481,req);
          }
        }
 else {
          Log.debug("[[SIP]] Refresh subscribe, sending poll");
        }
      }
 else {
        Log.debug("[[SIP]] Expire subscribe");
        if (sub != null) {
          Log.debug("[[SIP]] Subscription found, removing");
        }
      }
      res.addHeader(req.getHeader(ExpiresHeader.NAME));
      ListeningPoint lp=SipService.sipProvider.getListeningPoint(ListeningPoint.UDP);
      Address localAddress=SipService.addressFactory.createAddress("sip:" + dest + "@"+ lp.getIPAddress()+ ":"+ lp.getPort());
      ContactHeader ch=SipService.headerFactory.createContactHeader(localAddress);
      res.addHeader(ch);
      if (evt.getServerTransaction() == null) {
        ServerTransaction tx=((SipProvider)evt.getSource()).getNewServerTransaction(req);
        tx.sendResponse(res);
      }
 else {
        evt.getServerTransaction().sendResponse(res);
      }
      return;
    }
 else     if (req.getMethod().equals(Request.NOTIFY)) {
      Log.info("[[SIP]] Received a Notify message");
      try {
        String callid=((CallIdHeader)req.getHeader(CallIdHeader.NAME)).getCallId();
        FromHeader fh=(FromHeader)req.getHeader("From");
        URI ruri=req.getRequestURI();
        String src=((SipURI)fh.getAddress().getURI()).getUser();
        String dest=((SipURI)ruri).getUser();
        SipSubscription sub=SipSubscriptionManager.getSubscriptionByCallID(dest,callid);
        if (sub != null) {
          Log.debug("[[SIP]] Subscription found!");
          SubscriptionStateHeader ssh=(SubscriptionStateHeader)req.getHeader(SubscriptionStateHeader.NAME);
          if (ssh.getState().equalsIgnoreCase(SubscriptionStateHeader.PENDING)) {
            Log.debug("[[SIP]] Subscription pending. Updating");
            sub.updateSubscription(req);
          }
 else           if (ssh.getState().equalsIgnoreCase(SubscriptionStateHeader.ACTIVE) && !sub.isActive()) {
            Log.debug("[[SIP]] Subscription accepted. Informing");
            sub.updateSubscription(req);
          }
 else           if (ssh.getState().equalsIgnoreCase(SubscriptionStateHeader.TERMINATED)) {
            Log.debug("[[SIP]] Subscription is over, removing");
            SipSubscriptionManager.removeSubscriptionByCallID(dest,sub.callId);
            Log.debug("[[SIP]] Reason code is " + ssh.getReasonCode());
            if (ssh.getReasonCode() != null && (ssh.getReasonCode().equalsIgnoreCase(SubscriptionStateHeader.TIMEOUT) || ssh.getReasonCode().equalsIgnoreCase(SubscriptionStateHeader.DEACTIVATED))) {
              Log.debug("[[SIP]] Reason is timeout, sending re-subscribe");
              sub=new SipSubscription(dest,src);
              SipSubscriptionManager.addSubscriber(dest,sub);
              sub.sendSubscribe(false);
            }
          }
          if (req.getRawContent() != null) {
            try {
            }
 catch (            Exception e) {
              Log.error("[[SIP]] Error parsing presence document!\n" + req.toString(),e);
            }
          }
 else           if (sub.isActive()) {
          }
          Response res=SipService.messageFactory.createResponse(Response.OK,req);
          ListeningPoint lp=SipService.sipProvider.getListeningPoint(ListeningPoint.UDP);
          Address localAddress=SipService.addressFactory.createAddress("sip:" + dest + "@"+ lp.getIPAddress()+ ":"+ lp.getPort());
          ContactHeader ch=SipService.headerFactory.createContactHeader(localAddress);
          res.addHeader(ch);
          if (evt.getServerTransaction() == null) {
            ServerTransaction tx=((SipProvider)evt.getSource()).getNewServerTransaction(req);
            tx.sendResponse(res);
          }
 else {
            evt.getServerTransaction().sendResponse(res);
          }
        }
 else {
          Response res=SipService.messageFactory.createResponse(481,req);
          ListeningPoint lp=SipService.sipProvider.getListeningPoint(ListeningPoint.UDP);
          Address localAddress=SipService.addressFactory.createAddress("sip:" + dest + "@"+ lp.getIPAddress()+ ":"+ lp.getPort());
          ContactHeader ch=SipService.headerFactory.createContactHeader(localAddress);
          res.addHeader(ch);
          if (evt.getServerTransaction() == null) {
            ServerTransaction tx=((SipProvider)evt.getSource()).getNewServerTransaction(req);
            tx.sendResponse(res);
          }
 else {
            evt.getServerTransaction().sendResponse(res);
          }
        }
      }
 catch (      Exception e) {
        Log.error("[[SIP]] failure while handling NOTIFY message",e);
      }
      return;
    }
 else     if (req.getMethod().equals(Request.INVITE)) {
      if (evt.getDialog() == null) {
        Log.info("[[SIP]] Got initial invite!");
        FromHeader fh=(FromHeader)req.getHeader("From");
        URI ruri=req.getRequestURI();
        String src=((SipURI)fh.getAddress().getURI()).getUser();
        String dest=((SipURI)ruri).getUser();
      }
 else {
        Log.info("[[SIP]] Got a re-invite!");
        CallSession cs=(CallSession)evt.getDialog().getApplicationData();
        if (cs != null) {
          Response res=null;
          if (evt.getServerTransaction() == null) {
            ServerTransaction tx=((SipProvider)evt.getSource()).getNewServerTransaction(req);
            tx.sendResponse(res);
          }
 else {
            evt.getServerTransaction().sendResponse(res);
          }
          return;
        }
      }
    }
 else     if (req.getMethod().equals(Request.BYE)) {
      if (evt.getDialog() != null) {
        Log.info("[[SIP]] Got in dialog bye");
        CallSession cs=(CallSession)evt.getDialog().getApplicationData();
        if (cs != null) {
          cs.sendBye();
        }
        Response res=SipService.messageFactory.createResponse(Response.OK,req);
        if (evt.getServerTransaction() == null) {
          ServerTransaction tx=((SipProvider)evt.getSource()).getNewServerTransaction(req);
          tx.sendResponse(res);
        }
 else {
          evt.getServerTransaction().sendResponse(res);
        }
        return;
      }
    }
 else     if (req.getMethod().equals(Request.CANCEL)) {
      if (evt.getDialog() != null) {
        Log.info("[[SIP]] Got in dialog cancel");
        Response res=SipService.messageFactory.createResponse(Response.OK,req);
        if (evt.getServerTransaction() == null) {
          ServerTransaction tx=((SipProvider)evt.getSource()).getNewServerTransaction(req);
          tx.sendResponse(res);
        }
 else {
          evt.getServerTransaction().sendResponse(res);
        }
        CallSession cs=(CallSession)evt.getDialog().getApplicationData();
        if (cs != null) {
          cs.sendBye();
        }
        return;
      }
    }
 else     if (req.getMethod().equals(Request.ACK)) {
      return;
    }
 else     if (req.getMethod().equals(Request.OPTIONS)) {
      int resp=Response.OK;
      if (optionsmode) {
        if (evt.getDialog() != null) {
          Log.info("[[SIP]] Got in dialog OPTIONS");
          resp=Response.OK;
          CallSession cs=(CallSession)evt.getDialog().getApplicationData();
          if (cs == null) {
            Log.error("[[SIP]] OPTIONS CallSession is null?");
          }
        }
 else {
          Log.info("[[SIP]] Rejecting out-of-dialog OPTIONS");
          resp=Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST;
        }
      }
      try {
        DatagramSocket ds=new DatagramSocket();
        ds.close();
      }
 catch (      SocketException e) {
        Log.error("[[SIP]] No more sockets available",e);
        resp=Response.SERVER_INTERNAL_ERROR;
      }
      Response res=SipService.messageFactory.createResponse(resp,req);
      SipService.sipProvider.sendResponse(res);
      return;
    }
 else     if (req.getMethod().equals(Request.UPDATE)) {
      int resp=Response.OK;
      if (optionsmode) {
        if (evt.getDialog() != null) {
          Log.info("[[SIP]] Got UPDATE request");
          resp=Response.OK;
          CallSession cs=(CallSession)evt.getDialog().getApplicationData();
          if (cs == null) {
            Log.error("[[SIP]] UPDATE CallSession is null?");
          }
          Header require=(Header)req.getHeader(Require.NAME);
          Header sessexp=(Header)req.getHeader("Session-Expires");
          Log.debug("[[SIP]] SESSION-TIMER: " + require + ":"+ sessexp);
        }
 else {
          Log.info("[[SIP]] No Session - Rejecting UPDATE");
          resp=Response.CALL_OR_TRANSACTION_DOES_NOT_EXIST;
        }
      }
      try {
        DatagramSocket ds=new DatagramSocket();
        ds.close();
      }
 catch (      SocketException e) {
        Log.error("[[SIP]] No more sockets available",e);
        resp=Response.SERVER_INTERNAL_ERROR;
      }
      Response res=SipService.messageFactory.createResponse(resp,req);
      SipService.sipProvider.sendResponse(res);
      return;
    }
 else     if (req.getMethod().equals(Request.INFO)) {
      CallSession cs=(CallSession)evt.getDialog().getApplicationData();
      if (cs != null && cs.vRelay != null) {
        cs.vRelay.sendFIR();
        Response res=SipService.messageFactory.createResponse(Response.OK,req);
        if (evt.getServerTransaction() == null) {
          ServerTransaction tx=((SipProvider)evt.getSource()).getNewServerTransaction(req);
          tx.sendResponse(res);
        }
 else {
          evt.getServerTransaction().sendResponse(res);
        }
        return;
      }
    }
    Response res=SipService.messageFactory.createResponse(Response.FORBIDDEN,req);
    if (evt.getServerTransaction() == null) {
      ServerTransaction tx=((SipProvider)evt.getSource()).getNewServerTransaction(req);
      tx.sendResponse(res);
    }
 else {
      evt.getServerTransaction().sendResponse(res);
    }
    Log.error("[[SIP]] Rejecting request");
  }
 catch (  ParseException e) {
    Log.error("[[SIP]] Error processing sip Request!\n" + req.toString(),e);
  }
catch (  TransactionAlreadyExistsException e) {
    Log.error("[[SIP]] Error processing sip Request!\n" + req.toString(),e);
  }
catch (  TransactionUnavailableException e) {
    Log.error("[[SIP]] Error processing sip Request!\n" + req.toString(),e);
  }
catch (  SipException e) {
    Log.error("[[SIP]] Error processing sip Request!\n" + req.toString(),e);
  }
catch (  InvalidArgumentException e) {
    Log.error("[[SIP]] Error processing sip Request!\n" + req.toString(),e);
  }
catch (  Exception e) {
    Log.error("[[SIP]] Error processing sip Request!\n" + req.toString(),e);
  }
}
