{
  String[] propName=parsePropertyName(name);
  Element element=document.getRootElement();
  for (int i=0; i < propName.length - 1; i++) {
    if (element.element(propName[i]) == null) {
      element.addElement(propName[i]);
    }
    element=element.element(propName[i]);
  }
  String childName=propName[propName.length - 1];
  List toRemove=new ArrayList();
  Iterator iter=element.elementIterator(childName);
  while (iter.hasNext()) {
    toRemove.add(iter.next());
  }
  for (iter=toRemove.iterator(); iter.hasNext(); ) {
    element.remove((Element)iter.next());
  }
  for (  String value : values) {
    Element childElement=element.addElement(childName);
    if (value.startsWith("<![CDATA[")) {
      Iterator it=childElement.nodeIterator();
      while (it.hasNext()) {
        Node node=(Node)it.next();
        if (node instanceof CDATA) {
          childElement.remove(node);
          break;
        }
      }
      childElement.addCDATA(value.substring(9,value.length() - 3));
    }
 else {
      childElement.setText(value);
    }
  }
  saveProperties();
  Map<String,Object> params=new HashMap<String,Object>();
  params.put("value",values);
  PropertyEventDispatcher.dispatchEvent(name,PropertyEventDispatcher.EventType.xml_property_set,params);
}
