{
  Log.debug("Received presence packet: " + packet.toXML());
  List<Packet> reply=new ArrayList<Packet>();
  JID from=packet.getFrom();
  JID to=packet.getTo();
  if (to == null) {
    packet.setTo(getJID());
    to=getJID();
  }
  if (packet.getType() == Presence.Type.error) {
    return reply;
  }
  try {
    if (to.getNode() == null) {
      Collection<Registration> registrations=RegistrationManager.getInstance().getRegistrations(from,this.transportType);
      if (registrations.isEmpty()) {
        Log.debug("Unable to find registration.");
        Presence p=new Presence();
        p.setTo(from);
        p.setFrom(to);
        p.setError(PacketError.Condition.forbidden);
        p.setType(Presence.Type.unavailable);
        reply.add(p);
        return reply;
      }
      if (JiveGlobals.getBooleanProperty("plugin.gateway." + getType() + ".registrationstrict",false) && !permissionManager.hasAccess(from)) {
        Log.debug("Attempt to log in by restricted account: " + from);
        Presence p=new Presence();
        p.setTo(from);
        p.setFrom(to);
        p.setError(PacketError.Condition.forbidden);
        p.setType(Presence.Type.unavailable);
        reply.add(p);
        return reply;
      }
      Registration registration=registrations.iterator().next();
      if (packet.getType() == null) {
        TransportSession<B> session;
        Lock l=CacheFactory.getLock(registration.getJID() + "@" + transportType.toString()+ "ns",sessionRouter.sessionLocations);
        try {
          l.lock();
          session=sessionManager.getSession(from);
          if (session.hasResource(from.getResource())) {
            Log.debug("An existing resource has changed status: " + from);
            if (session.getPriority(from.getResource()) != packet.getPriority()) {
              session.updatePriority(from.getResource(),packet.getPriority());
            }
            if (session.isHighestPriority(from.getResource())) {
              session.updateStatus(getPresenceType(packet),packet.getStatus());
            }
          }
 else {
            Log.debug("A new resource has come online: " + from);
            session.addResource(from.getResource(),packet.getPriority());
            session.getBuddyManager().sendAllAvailablePresences(from);
            if (session.isHighestPriority(from.getResource())) {
              session.updateStatus(getPresenceType(packet),packet.getStatus());
            }
          }
          session.attachSession();
        }
 catch (        NotFoundException e) {
          Log.debug("A new session has come online: " + from);
          session=this.registrationLoggedIn(registration,from,getPresenceType(packet),packet.getStatus(),packet.getPriority());
          sessionManager.storeSession(from,session);
        }
 finally {
          l.unlock();
        }
      }
 else       if (packet.getType() == Presence.Type.unavailable) {
        TransportSession<B> session;
        try {
          session=sessionManager.getSession(from);
          String resource=from.getResource();
          if (session.hasResource(resource)) {
            if (session.getResourceCount() > 1) {
              if (session.isHighestPriority(resource)) {
                Log.debug("A high priority resource (of multiple) has gone offline: " + from);
                session.removeResource(resource);
                Presence p=new Presence(Presence.Type.probe);
                p.setTo(session.getJIDWithHighestPriority());
                p.setFrom(this.getJID());
                sendPacket(p);
              }
 else {
                Log.debug("A low priority resource (of multiple) has gone offline: " + from);
                session.removeResource(resource);
              }
            }
 else {
              Log.debug("A final resource has gone offline: " + from);
              this.registrationLoggedOut(session);
              sessionManager.removeSession(from);
            }
          }
        }
 catch (        NotFoundException e) {
          Log.debug("Ignoring unavailable presence for inactive seession.");
        }
      }
 else       if (packet.getType() == Presence.Type.probe) {
        TransportSession<B> session;
        try {
          session=sessionManager.getSession(from);
          session.sendPresence(from);
        }
 catch (        NotFoundException e) {
          Log.debug("Ignoring probe presence for inactive session.");
        }
      }
 else {
        Log.debug("Ignoring this packet:" + packet.toString());
      }
    }
 else {
      try {
        TransportSession<B> session=sessionManager.getSession(from);
        if (packet.getType() == Presence.Type.probe) {
          if (session.isLoggedIn()) {
            try {
              TransportBuddy buddy=session.getBuddyManager().getBuddy(to);
              buddy.sendPresence(from);
            }
 catch (            NotFoundException e) {
              Presence p=new Presence();
              p.setTo(from);
              p.setFrom(to);
              p.setType(Presence.Type.unavailable);
              sendPacket(p);
            }
          }
        }
 else         if (packet.getType() == Presence.Type.subscribe) {
          Presence p=new Presence();
          p.setType(Presence.Type.subscribed);
          p.setTo(from);
          p.setFrom(to);
          sendPacket(p);
        }
 else         if (packet.getType() == Presence.Type.unsubscribe) {
          Presence p=new Presence();
          p.setType(Presence.Type.unsubscribed);
          p.setTo(from);
          p.setFrom(to);
          sendPacket(p);
        }
 else         if (packet.getType() == Presence.Type.subscribed) {
          session.acceptAddContact(packet.getTo());
        }
 else {
        }
      }
 catch (      NotFoundException e) {
        Log.debug("User not found while processing " + "presence stanza: " + packet.toXML(),e);
      }
    }
  }
 catch (  Exception e) {
    Log.debug("Exception while processing packet: ",e);
  }
  return reply;
}
