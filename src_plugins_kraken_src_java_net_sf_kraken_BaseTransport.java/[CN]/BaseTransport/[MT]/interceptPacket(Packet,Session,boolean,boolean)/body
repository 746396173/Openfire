{
  if (!(packet instanceof IQ)) {
    return;
  }
  if (((IQ)packet).getType().equals(IQ.Type.result)) {
    if (processed || incoming) {
      return;
    }
    Element child=packet.getElement().element("query");
    if (child == null) {
      return;
    }
    if (child.getNamespaceURI() == null) {
      return;
    }
    if (!child.getNamespaceURI().equals(NameSpace.DISCO_ITEMS)) {
      return;
    }
    JID to=packet.getTo();
    if (to.getNode() == null) {
      return;
    }
    JID from=packet.getFrom();
    if (!XMPPServer.getInstance().isLocal(from)) {
      return;
    }
    if (RegistrationManager.getInstance().isRegistered(to,transportType)) {
      return;
    }
    if (permissionManager.hasAccess(to)) {
      return;
    }
    Iterator iter=child.elementIterator();
    while (iter.hasNext()) {
      Element elem=(Element)iter.next();
      try {
        if (elem.attribute("jid").getText().equals(this.jid.toString())) {
          child.remove(elem);
        }
      }
 catch (      Exception e) {
      }
    }
    return;
  }
  if (((IQ)packet).getType().equals(IQ.Type.set)) {
    if (!incoming) {
      return;
    }
    Element child=packet.getElement().element("query");
    if (child == null) {
      return;
    }
    if (!child.getNamespaceURI().equals(NameSpace.IQ_ROSTER)) {
      return;
    }
    Iterator iter=child.elementIterator();
    while (iter.hasNext()) {
      Element elem=(Element)iter.next();
      if (!elem.getName().equals("item")) {
        continue;
      }
      String jidStr;
      String nickname=null;
      String sub=null;
      ArrayList<String> groups=new ArrayList<String>();
      try {
        jidStr=elem.attributeValue("jid");
      }
 catch (      Exception e) {
        continue;
      }
      JID jid=new JID(jidStr);
      if (!jid.getDomain().equals(this.getJID().toString())) {
        continue;
      }
      if (jid.getNode() == null) {
        return;
      }
      try {
        nickname=elem.attributeValue("name");
      }
 catch (      Exception e) {
      }
      try {
        sub=elem.attributeValue("subscription");
      }
 catch (      Exception e) {
      }
      Iterator groupIter=elem.elementIterator();
      while (groupIter.hasNext()) {
        Element groupElem=(Element)groupIter.next();
        if (!groupElem.getName().equals("group")) {
          continue;
        }
        groups.add(groupElem.getText());
      }
      if (sub != null && sub.equals("remove")) {
        try {
          TransportSession trSession=sessionManager.getSession(session.getAddress().getNode());
          if (!trSession.isRosterLocked(jid.toString())) {
            Log.debug(getType().toString() + ": contact delete " + session.getAddress().getNode()+ ":"+ jid);
            trSession.getBuddyManager().removeBuddy(convertJIDToID(jid));
          }
        }
 catch (        NotFoundException e) {
        }
      }
 else {
        try {
          TransportSession trSession=sessionManager.getSession(session.getAddress().getNode());
          if (!trSession.isRosterLocked(jid.toString())) {
            try {
              TransportBuddy buddy=trSession.getBuddyManager().getBuddy(jid);
              Log.debug(getType().toString() + ": contact update " + session.getAddress().getNode()+ ":"+ jid+ ":"+ nickname+ ":"+ groups);
              buddy.setNicknameAndGroups(nickname,groups);
            }
 catch (            NotFoundException e) {
              Log.debug(getType().toString() + ": contact add " + session.getAddress().getNode()+ ":"+ jid+ ":"+ nickname+ ":"+ groups);
              trSession.addContact(jid,nickname,groups);
            }
          }
        }
 catch (        NotFoundException e) {
        }
      }
    }
  }
}
