{
  Log.debug("Syncing Legacy Roster: " + legacyitems);
  try {
    Roster roster=rosterManager.getRoster(userjid.getNode());
    try {
      TransportSession<B> session=sessionManager.getSession(userjid.getNode());
      session.lockRoster();
    }
 catch (    NotFoundException e) {
    }
    Map<JID,TransportBuddy> legacymap=new HashMap<JID,TransportBuddy>();
    for (    TransportBuddy buddy : legacyitems) {
      legacymap.put(buddy.getJID(),buddy);
    }
    for (    RosterItem ri : roster.getRosterItems()) {
      if (!ri.getJid().getDomain().equals(this.jid.getDomain())) {
        continue;
      }
      if (ri.getJid().getNode() == null) {
        continue;
      }
      JID jid=new JID(ri.getJid().toBareJID());
      if (legacymap.containsKey(jid)) {
        Log.debug("ROSTERSYNC: We found, updating " + jid.toString());
        TransportBuddy buddy=legacymap.get(jid);
        try {
          if (buddy.getAskType() != null && buddy.getSubType() != null) {
            this.addOrUpdateRosterItem(userjid,buddy.getName(),buddy.getNickname(),buddy.getGroups(),buddy.getSubType(),buddy.getAskType());
          }
 else {
            this.addOrUpdateRosterItem(userjid,buddy.getName(),buddy.getNickname(),buddy.getGroups());
          }
        }
 catch (        UserNotFoundException e) {
          Log.debug("Failed updating roster item",e);
        }
        legacymap.remove(jid);
      }
 else {
        Log.debug("ROSTERSYNC: We did not find, removing " + jid.toString());
        try {
          this.removeFromRoster(userjid,jid);
        }
 catch (        UserNotFoundException e) {
          Log.debug("Failed removing roster item",e);
        }
      }
    }
    for (    TransportBuddy buddy : legacymap.values()) {
      Log.debug("ROSTERSYNC: We have new, adding " + buddy.getName());
      try {
        this.addOrUpdateRosterItem(userjid,buddy.getName(),buddy.getNickname(),buddy.getGroups());
      }
 catch (      UserNotFoundException e) {
        Log.debug("Failed adding new roster item",e);
      }
    }
    try {
      TransportSession<B> session=sessionManager.getSession(userjid.getNode());
      session.unlockRoster();
    }
 catch (    NotFoundException e) {
    }
  }
 catch (  UserNotFoundException e) {
    throw new UserNotFoundException("Could not find roster for " + userjid.toString());
  }
}
