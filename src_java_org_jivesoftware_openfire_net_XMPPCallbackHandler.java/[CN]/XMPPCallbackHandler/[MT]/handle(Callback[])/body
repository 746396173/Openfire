{
  String realm;
  String name=null;
  for (  Callback callback : callbacks) {
    if (callback instanceof RealmCallback) {
      realm=((RealmCallback)callback).getText();
      if (realm == null) {
        realm=((RealmCallback)callback).getDefaultText();
      }
      Log.debug("XMPPCallbackHandler: RealmCallback: " + realm);
    }
 else     if (callback instanceof NameCallback) {
      name=((NameCallback)callback).getName();
      if (name == null) {
        name=((NameCallback)callback).getDefaultName();
      }
      Log.debug("XMPPCallbackHandler: NameCallback: " + name);
    }
 else     if (callback instanceof PasswordCallback) {
      try {
        ((PasswordCallback)callback).setPassword(AuthFactory.getPassword(name).toCharArray());
        Log.debug("XMPPCallbackHandler: PasswordCallback");
      }
 catch (      UserNotFoundException e) {
        throw new IOException(e.toString());
      }
catch (      UnsupportedOperationException uoe) {
        throw new IOException(uoe.toString());
      }
    }
 else     if (callback instanceof VerifyPasswordCallback) {
      Log.debug("XMPPCallbackHandler: VerifyPasswordCallback");
      VerifyPasswordCallback vpcb=(VerifyPasswordCallback)callback;
      try {
        AuthToken at=AuthFactory.authenticate(name,new String(vpcb.getPassword()));
        vpcb.setVerified((at != null));
      }
 catch (      UnauthorizedException e) {
        vpcb.setVerified(false);
      }
    }
 else     if (callback instanceof AuthorizeCallback) {
      Log.debug("XMPPCallbackHandler: AuthorizeCallback");
      AuthorizeCallback authCallback=((AuthorizeCallback)callback);
      String principal=authCallback.getAuthenticationID();
      String username=authCallback.getAuthorizationID();
      if (username != null && username.contains("@")) {
        username=username.substring(0,username.lastIndexOf("@"));
      }
      if (principal.equals(username)) {
        username=AuthorizationManager.map(principal);
        if (Log.isDebugEnabled()) {
          Log.debug("XMPPCallbackHandler: no username requested, using " + username);
        }
      }
      if (AuthorizationManager.authorize(username,principal)) {
        if (Log.isDebugEnabled()) {
          Log.debug("XMPPCallbackHandler: " + principal + " authorized to "+ username);
        }
        authCallback.setAuthorized(true);
        authCallback.setAuthorizedID(username);
      }
 else {
        if (Log.isDebugEnabled()) {
          Log.debug("XMPPCallbackHandler: " + principal + " not authorized to "+ username);
        }
        authCallback.setAuthorized(false);
      }
    }
 else {
      if (Log.isDebugEnabled()) {
        Log.debug("XMPPCallbackHandler: Callback: " + callback.getClass().getSimpleName());
      }
      throw new UnsupportedCallbackException(callback,"Unrecognized Callback");
    }
  }
}
