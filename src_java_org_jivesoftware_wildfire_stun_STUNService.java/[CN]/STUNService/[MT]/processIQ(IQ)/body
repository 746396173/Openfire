{
  IQ reply=IQ.createResultIQ(iq);
  Element childElement=iq.getChildElement();
  String namespace=childElement.getNamespaceURI();
  Element childElementCopy=iq.getChildElement().createCopy();
  reply.setChildElement(childElementCopy);
  if ("http://jabber.org/protocol/disco#info".equals(namespace)) {
    reply=XMPPServer.getInstance().getIQDiscoInfoHandler().handleIQ(iq);
    router.route(reply);
    return;
  }
 else   if ("http://jabber.org/protocol/disco#items".equals(namespace)) {
    reply=XMPPServer.getInstance().getIQDiscoItemsHandler().handleIQ(iq);
    router.route(reply);
    return;
  }
 else   if (NAMESPACE.equals(namespace)) {
    if (isEnabled()) {
      Element stun=childElementCopy.addElement("stun");
      if (isLocalEnabled()) {
        StunServerAddress local=null;
        local=new StunServerAddress(primaryAddress,String.valueOf(primaryPort));
        if (!externalServers.contains(local)) {
          Element server=stun.addElement("server");
          server.addAttribute("host",local.getServer());
          server.addAttribute("udp",local.getPort());
        }
      }
      for (      StunServerAddress stunServerAddress : externalServers) {
        Element server=stun.addElement("server");
        server.addAttribute("host",stunServerAddress.getServer());
        server.addAttribute("udp",stunServerAddress.getPort());
      }
    }
  }
 else {
    reply.setError(PacketError.Condition.service_unavailable);
  }
  try {
    Log.debug("RETURNED:" + reply.toXML());
    router.route(reply);
  }
 catch (  Exception e) {
    Log.error(e);
  }
}
