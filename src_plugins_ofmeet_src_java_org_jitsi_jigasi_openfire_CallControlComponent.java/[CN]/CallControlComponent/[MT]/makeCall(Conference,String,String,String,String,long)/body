{
  Log.info("CallControlComponent - makeCall " + confJid + " "+ to+ " "+ callId);
  try {
    String callerId=(new JID(confJid)).getNode();
    String focusJid=conference.getFocus();
    CallSession cs=new CallSession(conference,hostName,this,callId,focusJid,confJid);
    callSessions.put(callId,cs);
    boolean toSip=to.indexOf("sip:") == 0;
    boolean toPhone=to.indexOf("tel:") == 0;
    boolean toMulticast=to.indexOf("mrtp:") == 0;
    String from="sip:" + callerId + "@"+ hostName;
    if (!toSip && !toPhone && !toMulticast) {
      String sipUri=null;
      if (to.length() == 8) {
        toSip=true;
        to="sip:8835100" + to + "@81.201.82.25";
      }
 else {
        if (to.indexOf("+") != 0)         to="+" + to;
        Log.info("CallControlComponent - makeCall looking up " + to);
        ENUM mEnum=new ENUM("e164.arpa");
        Rule[] rules=mEnum.lookup(to);
        for (        Rule rule : rules) {
          String temp=rule.evaluate();
          Log.info("CallControlComponent - makeCall found " + temp);
          if (temp.indexOf("sip:") == 0)           sipUri=temp;
        }
        if (sipUri != null) {
          toSip=true;
          to=sipUri;
        }
 else {
          to="tel:" + to;
          toPhone=true;
        }
      }
    }
    if (toSip) {
      from="sip:" + callerId + "@"+ hostName;
      Log.info("CallControlComponent - makeCall with direct sip " + to + " "+ from);
    }
 else     if (toPhone) {
      to=to.substring(4);
      if (registrations.containsKey(to)) {
        to=registrations.get(to);
        from="sip:" + callerId + "@"+ hostName;
        Log.info("CallControlComponent - makeCall with registration " + to + " "+ from);
      }
 else {
        String outboundProxy=JiveGlobals.getProperty("voicebridge.default.proxy.outboundproxy",null);
        String sipUsername=JiveGlobals.getProperty("voicebridge.default.proxy.sipauthuser",null);
        if (outboundProxy != null && sipUsername != null && !"".equals(outboundProxy.trim()) && !"".equals(sipUsername.trim())) {
          to="sip:" + to + "@"+ outboundProxy;
          from="sip:" + sipUsername + "@"+ outboundProxy;
          Log.info("CallControlComponent - makeCall with outbound proxy " + to + " "+ from);
        }
 else {
          Log.error("SIP proxy not setup with voicebridge.default.proxy.outboundproxy and voicebridge.default.proxy.sipauthuser");
          return;
        }
      }
    }
 else     if (toMulticast) {
      String params[]=to.split(":");
      InetAddress remoteAddr=InetAddress.getByName(params[1]);
      cs.mediaStream.setTarget(new MediaStreamTarget(new InetSocketAddress(remoteAddr,Integer.parseInt(params[2])),null));
      cs.mediaStream.setDirection(MediaDirection.SENDONLY);
      cs.mediaStream.start();
    }
    cs.jabberLocal=from;
    cs.username=username;
    cs.startTimestamp=startTimestamp;
    if (!toMulticast) {
      cs.jabberRemote=to;
      SipService.sendInvite(cs);
    }
 else {
      cs.jabberRemote="multicast";
      inviteEvent(true,callId);
    }
  }
 catch (  Exception e) {
    Log.error("CallControlComponent makeCall",e);
  }
}
