{
  Log.info("CallControlComponent - makeCall " + focusJid + " "+ confJid+ " "+ to+ " "+ callId);
  try {
    String hostname=XMPPServer.getInstance().getServerInfo().getHostname();
    String callerId=(new JID(confJid)).getNode();
    MediaService mediaService=LibJitsi.getMediaService();
    MediaStream mediaStream=mediaService.createMediaStream(null,org.jitsi.service.neomedia.MediaType.AUDIO,mediaService.createSrtpControl(SrtpControlType.MIKEY));
    mediaStream.setName("rayo-" + System.currentTimeMillis());
    Content content=conference.getOrCreateContent("audio");
    boolean audioMixer="true".equals(JiveGlobals.getProperty("org.jitsi.videobridge.ofmeet.audio.mixer","false"));
    if (audioMixer) {
      mediaStream.setSSRCFactory(ssrcFactory);
      mediaStream.setDevice(content.getMixer());
    }
 else {
      mediaStream.setRTPTranslator(content.getRTPTranslator());
    }
    content.createRtpChannel(null);
    CallSession cs=new CallSession(mediaStream,hostname,this,callId,focusJid.toString(),confJid);
    callSessions.put(callId,cs);
    boolean toSip=to.indexOf("sip:") == 0;
    boolean toPhone=to.indexOf("tel:") == 0;
    String from=null;
    if (!toSip && !toPhone) {
      to="tel:" + to;
      toPhone=true;
    }
    if (toSip) {
      from="sip:" + callerId + "@"+ hostname;
    }
 else {
      to=to.substring(4);
      if (registrations.containsKey(to)) {
        to=registrations.get(to);
        from="sip:" + callerId + "@"+ hostname;
        Log.info("CallControlComponent - makeCall with registration " + to + " "+ from);
      }
 else {
        String outboundProxy=JiveGlobals.getProperty("voicebridge.default.proxy.outboundproxy",null);
        String sipUsername=JiveGlobals.getProperty("voicebridge.default.proxy.sipauthuser",null);
        if (outboundProxy != null && sipUsername != null) {
          to="sip:" + to + "@"+ outboundProxy;
          from="sip:" + sipUsername + "@"+ outboundProxy;
          Log.info("CallControlComponent - makeCall with outbound proxy " + to + " "+ from);
        }
 else {
          Log.error("SIP proxy not setup with voicebridge.default.proxy.outboundproxy and voicebridge.default.proxy.sipauthuser");
          return;
        }
      }
    }
    cs.jabberRemote=to;
    cs.jabberLocal=from;
    SipService.sendInvite(cs);
  }
 catch (  Exception e) {
    Log.error("CallControlComponent makeCall",e);
  }
}
