{
  lastPacketTime=System.currentTimeMillis();
  JID recipient=packet.getTo();
  String group=recipient.getNode();
  if (group == null) {
    if (packet.isRequest()) {
      sendErrorPacket(packet,PacketError.Condition.feature_not_implemented);
    }
    Log.warn(LocaleUtils.getLocalizedString("muc.error.not-supported") + " " + packet.toString());
  }
 else {
    MUCRole role=roles.get(group);
    if (role == null) {
      Log.debug("Ignoring stanza received from a non-occupant of '{}': {}",group,packet.toXML());
      if (packet.isRequest()) {
        sendErrorPacket(packet,PacketError.Condition.bad_request);
      }
    }
 else     if (IQ.Type.result == packet.getType() || IQ.Type.error == packet.getType()) {
      if (packet.getTo().getResource() != null) {
        try {
          role.getChatRoom().sendPrivatePacket(packet,role);
        }
 catch (        NotFoundException|ForbiddenException e) {
        }
      }
    }
 else {
      if (!role.getUserAddress().equals(packet.getFrom())) {
        sendErrorPacket(packet,PacketError.Condition.conflict);
      }
 else {
        try {
          Element query=packet.getElement().element("query");
          if (query != null && "http://jabber.org/protocol/muc#owner".equals(query.getNamespaceURI())) {
            role.getChatRoom().getIQOwnerHandler().handleIQ(packet,role);
          }
 else           if (query != null && "http://jabber.org/protocol/muc#admin".equals(query.getNamespaceURI())) {
            role.getChatRoom().getIQAdminHandler().handleIQ(packet,role);
          }
 else {
            if (packet.getTo().getResource() != null) {
              role.getChatRoom().sendPrivatePacket(packet,role);
            }
 else {
              sendErrorPacket(packet,PacketError.Condition.bad_request);
            }
          }
        }
 catch (        ForbiddenException e) {
          sendErrorPacket(packet,PacketError.Condition.forbidden);
        }
catch (        NotFoundException e) {
          sendErrorPacket(packet,PacketError.Condition.recipient_unavailable);
        }
catch (        ConflictException e) {
          sendErrorPacket(packet,PacketError.Condition.conflict);
        }
catch (        NotAllowedException e) {
          sendErrorPacket(packet,PacketError.Condition.not_allowed);
        }
catch (        CannotBeInvitedException e) {
          sendErrorPacket(packet,PacketError.Condition.not_acceptable);
        }
catch (        Exception e) {
          sendErrorPacket(packet,PacketError.Condition.internal_server_error);
          Log.error(e.getMessage(),e);
        }
      }
    }
  }
}
