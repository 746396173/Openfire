{
  Iterator<String> values;
  String booleanValue;
  List<String> list;
  FormField field;
  field=completedForm.getField("muc#roomconfig_roomadmins");
  boolean adminsSent=field != null;
  List<String> admins=new ArrayList<String>();
  if (field != null) {
    values=field.getValues();
    while (values.hasNext()) {
      admins.add(values.next());
    }
  }
  field=completedForm.getField("muc#roomconfig_roomowners");
  boolean ownersSent=field != null;
  List<String> owners=new ArrayList<String>();
  if (field != null) {
    values=field.getValues();
    while (values.hasNext()) {
      owners.add(values.next());
    }
  }
  if (ownersSent && owners.isEmpty()) {
    throw new ConflictException();
  }
  List<Presence> presences=new ArrayList<Presence>(admins.size() + owners.size());
  room.lock.writeLock().lock();
  try {
    field=completedForm.getField("muc#roomconfig_roomname");
    if (field != null) {
      values=field.getValues();
      room.setNaturalLanguageName((values.hasNext() ? values.next() : " "));
    }
    field=completedForm.getField("muc#roomconfig_roomdesc");
    if (field != null) {
      values=field.getValues();
      room.setDescription((values.hasNext() ? values.next() : " "));
    }
    field=completedForm.getField("muc#roomconfig_changesubject");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      room.setCanOccupantsChangeSubject(("1".equals(booleanValue)));
    }
    field=completedForm.getField("muc#roomconfig_maxusers");
    if (field != null) {
      values=field.getValues();
      room.setMaxUsers((values.hasNext() ? Integer.parseInt(values.next()) : 30));
    }
    field=completedForm.getField("muc#roomconfig_presencebroadcast");
    if (field != null) {
      values=field.getValues();
      list=new ArrayList<String>();
      while (values.hasNext()) {
        list.add(values.next());
      }
      room.setRolesToBroadcastPresence(list);
    }
    field=completedForm.getField("muc#roomconfig_publicroom");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      room.setPublicRoom(("1".equals(booleanValue)));
    }
    field=completedForm.getField("muc#roomconfig_persistentroom");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      boolean isPersistent=("1".equals(booleanValue));
      if (room.isPersistent() && !isPersistent) {
        MUCPersistenceManager.deleteFromDB(room);
      }
      room.setPersistent(isPersistent);
    }
    field=completedForm.getField("muc#roomconfig_moderatedroom");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      room.setModerated(("1".equals(booleanValue)));
    }
    field=completedForm.getField("muc#roomconfig_membersonly");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      presences.addAll(room.setMembersOnly(("1".equals(booleanValue))));
    }
    field=completedForm.getField("muc#roomconfig_allowinvites");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      room.setCanOccupantsInvite(("1".equals(booleanValue)));
    }
    field=completedForm.getField("muc#roomconfig_passwordprotectedroom");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      boolean isPasswordProtected="1".equals(booleanValue);
      if (isPasswordProtected) {
        field=completedForm.getField("muc#roomconfig_roomsecret");
        if (field != null) {
          values=completedForm.getField("muc#roomconfig_roomsecret").getValues();
          room.setPassword((values.hasNext() ? values.next() : null));
        }
      }
 else {
        room.setPassword(null);
      }
    }
    field=completedForm.getField("muc#roomconfig_whois");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      room.setCanAnyoneDiscoverJID(("anyone".equals(booleanValue)));
    }
    field=completedForm.getField("muc#roomconfig_enablelogging");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      room.setLogEnabled(("1".equals(booleanValue)));
    }
    field=completedForm.getField("x-muc#roomconfig_reservednick");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      room.setLoginRestrictedToNickname(("1".equals(booleanValue)));
    }
    field=completedForm.getField("x-muc#roomconfig_canchangenick");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      room.setChangeNickname(("1".equals(booleanValue)));
    }
    field=completedForm.getField("x-muc#roomconfig_registration");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? values.next() : "1");
      room.setRegistrationEnabled(("1".equals(booleanValue)));
    }
    room.setModificationDate(new Date());
    if (room.isPersistent()) {
      room.saveToDB();
    }
    presences.addAll(room.addOwners(owners,senderRole));
    presences.addAll(room.addAdmins(admins,senderRole));
    if (ownersSent) {
      List<String> ownersToRemove=new ArrayList<String>(room.owners);
      ownersToRemove.removeAll(admins);
      ownersToRemove.removeAll(owners);
      for (      String jid : ownersToRemove) {
        presences.addAll(room.addMember(jid,null,senderRole));
      }
    }
    if (adminsSent) {
      List<String> adminsToRemove=new ArrayList<String>(room.admins);
      adminsToRemove.removeAll(admins);
      adminsToRemove.removeAll(owners);
      for (      String jid : adminsToRemove) {
        presences.addAll(room.addMember(jid,null,senderRole));
      }
    }
    if (!room.isPersistent() && room.getOccupantsCount() == 0) {
      room.destroyRoom(null,null);
    }
  }
  finally {
    room.lock.writeLock().unlock();
  }
  for (  Object presence : presences) {
    room.send((Presence)presence);
  }
}
