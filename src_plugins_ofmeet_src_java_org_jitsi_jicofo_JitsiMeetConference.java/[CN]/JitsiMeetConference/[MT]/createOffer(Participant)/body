{
  List<ContentPacketExtension> contents=new ArrayList<ContentPacketExtension>();
  boolean enableFirefoxHacks=config == null || config.enableFirefoxHacks() == null ? false : config.enableFirefoxHacks();
  contents.add(JingleOfferFactory.createContentForMedia(MediaType.AUDIO,enableFirefoxHacks));
  contents.add(JingleOfferFactory.createContentForMedia(MediaType.VIDEO,enableFirefoxHacks));
  boolean openSctp=config == null || config.openSctp() == null ? true : config.openSctp();
  if (openSctp) {
    contents.add(JingleOfferFactory.createContentForMedia(MediaType.DATA,enableFirefoxHacks));
  }
  boolean useBundle=peer.hasBundleSupport();
  ColibriConferenceIQ peerChannels=allocateChannels(peer,contents);
  if (peerChannels == null)   return null;
  peer.setColibriChannelsInfo(peerChannels);
  for (  ContentPacketExtension cpe : contents) {
    ColibriConferenceIQ.Content colibriContent=peerChannels.getContent(cpe.getName());
    if (colibriContent == null)     continue;
    for (    ColibriConferenceIQ.Channel channel : colibriContent.getChannels()) {
      IceUdpTransportPacketExtension transport;
      if (useBundle) {
        ColibriConferenceIQ.ChannelBundle bundle=peerChannels.getChannelBundle(channel.getChannelBundleId());
        if (bundle == null) {
          logger.error("No bundle for " + channel.getChannelBundleId());
          continue;
        }
        transport=bundle.getTransport();
        if (!transport.isRtcpMux()) {
          transport.addChildExtension(new RtcpmuxPacketExtension());
        }
      }
 else {
        transport=channel.getTransport();
      }
      try {
        IceUdpTransportPacketExtension empty=cpe.getFirstChildOfType(IceUdpTransportPacketExtension.class);
        cpe.getChildExtensions().remove(empty);
        cpe.addChildExtension(IceUdpTransportPacketExtension.cloneTransportAndCandidates(transport,true));
      }
 catch (      Exception e) {
        logger.error(e,e);
      }
    }
    for (    ColibriConferenceIQ.SctpConnection sctpConn : colibriContent.getSctpConnections()) {
      IceUdpTransportPacketExtension transport;
      if (useBundle) {
        ColibriConferenceIQ.ChannelBundle bundle=peerChannels.getChannelBundle(sctpConn.getChannelBundleId());
        if (bundle == null) {
          logger.error("No bundle for " + sctpConn.getChannelBundleId());
          continue;
        }
        transport=bundle.getTransport();
      }
 else {
        transport=sctpConn.getTransport();
      }
      try {
        IceUdpTransportPacketExtension empty=cpe.getFirstChildOfType(IceUdpTransportPacketExtension.class);
        cpe.getChildExtensions().remove(empty);
        IceUdpTransportPacketExtension copy=IceUdpTransportPacketExtension.cloneTransportAndCandidates(transport,true);
        SctpMapExtension sctpMap=new SctpMapExtension();
        sctpMap.setPort(5000);
        sctpMap.setProtocol(SctpMapExtension.Protocol.WEBRTC_CHANNEL);
        sctpMap.setStreams(1024);
        copy.addChildExtension(sctpMap);
        cpe.addChildExtension(copy);
      }
 catch (      Exception e) {
        logger.error(e,e);
      }
    }
    RtpDescriptionPacketExtension rtpDescPe=JingleUtils.getRtpDescription(cpe);
    if (rtpDescPe != null) {
      if (useBundle) {
        rtpDescPe.addChildExtension(new RtcpmuxPacketExtension());
      }
      List<SourcePacketExtension> mediaSources=getAllSSRCs(cpe.getName());
      for (      SourcePacketExtension ssrc : mediaSources) {
        try {
          rtpDescPe.addChildExtension(ssrc.copy());
        }
 catch (        Exception e) {
          logger.error("Copy SSRC error",e);
        }
      }
      List<SourceGroupPacketExtension> sourceGroups=getAllSSRCGroups(cpe.getName());
      for (      SourceGroupPacketExtension ssrcGroup : sourceGroups) {
        rtpDescPe.addChildExtension(ssrcGroup);
      }
      for (      ColibriConferenceIQ.Channel channel : colibriContent.getChannels()) {
        SourcePacketExtension ssrcPe=channel.getSources().size() > 0 ? channel.getSources().get(0) : null;
        if (ssrcPe != null) {
          try {
            String contentName=colibriContent.getName();
            SourcePacketExtension ssrcCopy=ssrcPe.copy();
            ssrcCopy.addParameter(new ParameterPacketExtension("cname","mixed"));
            ssrcCopy.addParameter(new ParameterPacketExtension("label","mixedlabel" + contentName + "0"));
            ssrcCopy.addParameter(new ParameterPacketExtension("msid","mixedmslabel mixedlabel" + contentName + "0"));
            ssrcCopy.addParameter(new ParameterPacketExtension("mslabel","mixedmslabel"));
            rtpDescPe.addChildExtension(ssrcCopy);
          }
 catch (          Exception e) {
            logger.error("Copy SSRC error",e);
          }
        }
      }
    }
  }
  return contents;
}
