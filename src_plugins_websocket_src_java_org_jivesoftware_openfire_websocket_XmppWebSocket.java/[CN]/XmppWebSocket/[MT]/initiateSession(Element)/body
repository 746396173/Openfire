{
  String host=stanza.attributeValue("to");
  StreamError streamError=null;
  Locale language=Locale.forLanguageTag(stanza.attributeValue("lang","en"));
  if (STREAM_FOOTER.equals(stanza.getName())) {
    closeStream(null);
  }
 else   if (!STREAM_HEADER.equals(stanza.getName())) {
    streamError=new StreamError(StreamError.Condition.unsupported_stanza_type);
    Log.warn("Closing session due to incorrect stream header. Tag: " + stanza.getName());
  }
 else   if (!FRAMING_NAMESPACE.equals(stanza.getNamespace().getURI())) {
    streamError=new StreamError(StreamError.Condition.invalid_namespace);
    Log.warn("Closing session due to invalid namespace in stream header. Namespace: " + stanza.getNamespace().getURI());
  }
 else   if (STREAM_FOOTER.equals(stanza.getName())) {
    closeStream(null);
  }
 else   if (!validateHost(host)) {
    streamError=new StreamError(StreamError.Condition.host_unknown);
    Log.warn("Closing session due to incorrect hostname in stream header. Host: " + host);
  }
 else {
    xmppSession=SessionManager.getInstance().createClientSession(wsConnection,language);
    xmppSession.setSessionData("ws",Boolean.TRUE);
  }
  if (streamError == null) {
    openStream(language.toLanguageTag(),stanza.attributeValue("from"));
    configureStream();
  }
 else {
    closeStream(streamError);
  }
}
