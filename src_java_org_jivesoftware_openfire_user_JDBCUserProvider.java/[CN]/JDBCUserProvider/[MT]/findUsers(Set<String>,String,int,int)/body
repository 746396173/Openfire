{
  if (searchSQL == null) {
    throw new UnsupportedOperationException();
  }
  if (fields.isEmpty()) {
    return Collections.emptyList();
  }
  if (!getSearchFields().containsAll(fields)) {
    throw new IllegalArgumentException("Search fields " + fields + " are not valid.");
  }
  if (query == null || "".equals(query)) {
    return Collections.emptyList();
  }
  query="%" + query.replace('*','%') + "%";
  if (query.endsWith("%%")) {
    query=query.substring(0,query.length() - 1);
  }
  List<String> usernames=new ArrayList<String>(50);
  Connection con=null;
  PreparedStatement pstmt=null;
  int queries=0;
  ResultSet rs=null;
  try {
    StringBuilder sql=new StringBuilder(90);
    sql.append(searchSQL);
    boolean first=true;
    if (fields.contains("Username")) {
      sql.append(" ");
      sql.append(usernameField);
      sql.append(" LIKE ?");
      queries++;
      first=false;
    }
    if (fields.contains("Name")) {
      if (!first) {
        sql.append(" AND");
      }
      sql.append(" ");
      sql.append(nameField);
      sql.append(" LIKE ?");
      queries++;
      first=false;
    }
    if (fields.contains("Email")) {
      if (!first) {
        sql.append(" AND");
      }
      sql.append(" ");
      sql.append(emailField);
      sql.append(" LIKE ?");
      queries++;
    }
    con=getConnection();
    if ((startIndex == 0) && (numResults == Integer.MAX_VALUE)) {
      pstmt=con.prepareStatement(sql.toString());
      for (int i=1; i <= queries; i++) {
        pstmt.setString(i,query);
      }
      rs=pstmt.executeQuery();
      while (rs.next()) {
        usernames.add(rs.getString(1));
      }
    }
 else {
      pstmt=DbConnectionManager.createScrollablePreparedStatement(con,sql.toString());
      DbConnectionManager.limitRowsAndFetchSize(pstmt,startIndex,numResults);
      for (int i=1; i <= queries; i++) {
        pstmt.setString(i,query);
      }
      rs=pstmt.executeQuery();
      DbConnectionManager.scrollResultSet(rs,startIndex);
      int count=0;
      while (rs.next() && count < numResults) {
        usernames.add(rs.getString(1));
        count++;
      }
    }
    if (Log.isDebugEnabled()) {
      Log.debug("Results: " + usernames.size());
      LogResults(usernames);
    }
  }
 catch (  SQLException e) {
    Log.error(e.getMessage(),e);
  }
 finally {
    DbConnectionManager.closeConnection(rs,pstmt,con);
  }
  return new UserCollection(usernames.toArray(new String[usernames.size()]));
}
