{
  if (buffer == null) {
    byteBuffer.position(byteBuffer.limit());
    return;
  }
  invalidateBuffer();
  if (buffer.length() > maxBufferSize) {
    buffer=null;
    final ProtocolDecoderException ex=new ProtocolDecoderException("Stopped parsing never ending stanza");
    ex.setHexdump("(redacted hex dump of never ending stanza)");
    throw ex;
  }
  CharBuffer charBuffer=CharBuffer.allocate(byteBuffer.capacity());
  encoder.reset();
  encoder.decode(byteBuffer.buf(),charBuffer,false);
  char[] buf=new char[charBuffer.position()];
  charBuffer.flip();
  charBuffer.get(buf);
  int readChar=buf.length;
  if (readChar == 0) {
    return;
  }
  buffer.append(buf);
  char ch;
  boolean isHighSurrogate=false;
  for (int i=0; i < readChar; i++) {
    ch=buf[i];
    if (ch < 0x20 && ch != 0x9 && ch != 0xA && ch != 0xD && ch != 0x0) {
      buffer=null;
      throw new XMLNotWellFormedException("Character is invalid in: " + ch);
    }
    if (isHighSurrogate) {
      if (Character.isLowSurrogate(ch)) {
        isHighSurrogate=false;
      }
 else {
        buffer=null;
        throw new Exception("Found high surrogate not followed by low surrogate");
      }
    }
 else     if (Character.isHighSurrogate(ch)) {
      isHighSurrogate=true;
    }
 else     if (Character.isLowSurrogate(ch)) {
      buffer=null;
      throw new Exception("Found low surrogate char without a preceding high surrogate");
    }
    if (status == XMLLightweightParser.TAIL) {
      if (depth < 1 && ch == head.charAt(tailCount)) {
        tailCount++;
        if (tailCount == head.length()) {
          int end=buffer.length() - readChar + (i + 1);
          String msg=buffer.substring(startLastMsg,end);
          foundMsg(msg);
          startLastMsg=end;
        }
      }
 else {
        tailCount=0;
        status=XMLLightweightParser.INSIDE;
      }
    }
 else     if (status == XMLLightweightParser.PRETAIL) {
      if (ch == XMLLightweightParser.CDATA_START[cdataOffset]) {
        cdataOffset++;
        if (cdataOffset == XMLLightweightParser.CDATA_START.length) {
          status=XMLLightweightParser.INSIDE_CDATA;
          cdataOffset=0;
          continue;
        }
      }
 else {
        cdataOffset=0;
        status=XMLLightweightParser.INSIDE;
      }
      if (ch == '/') {
        status=XMLLightweightParser.TAIL;
        depth--;
      }
 else       if (ch == '!') {
        status=XMLLightweightParser.INSIDE;
      }
 else {
        depth++;
      }
    }
 else     if (status == XMLLightweightParser.VERIFY_CLOSE_TAG) {
      if (ch == '>') {
        depth--;
        status=XMLLightweightParser.OUTSIDE;
        if (depth < 1) {
          int end=buffer.length() - readChar + (i + 1);
          String msg=buffer.substring(startLastMsg,end);
          foundMsg(msg);
          startLastMsg=end;
        }
      }
 else       if (ch == '<') {
        status=XMLLightweightParser.PRETAIL;
        insideChildrenTag=true;
      }
 else {
        status=XMLLightweightParser.INSIDE;
      }
    }
 else     if (status == XMLLightweightParser.INSIDE_PARAM_VALUE) {
      if (ch == '"') {
        status=XMLLightweightParser.INSIDE;
      }
    }
 else     if (status == XMLLightweightParser.INSIDE_CDATA) {
      if (ch == XMLLightweightParser.CDATA_END[cdataOffset]) {
        cdataOffset++;
        if (cdataOffset == XMLLightweightParser.CDATA_END.length) {
          status=XMLLightweightParser.OUTSIDE;
          cdataOffset=0;
        }
      }
 else       if (cdataOffset == XMLLightweightParser.CDATA_END.length - 1 && ch == XMLLightweightParser.CDATA_END[cdataOffset - 1]) {
      }
 else {
        cdataOffset=0;
      }
    }
 else     if (status == XMLLightweightParser.INSIDE) {
      if (ch == XMLLightweightParser.CDATA_START[cdataOffset]) {
        cdataOffset++;
        if (cdataOffset == XMLLightweightParser.CDATA_START.length) {
          status=XMLLightweightParser.INSIDE_CDATA;
          cdataOffset=0;
          continue;
        }
      }
 else {
        cdataOffset=0;
        status=XMLLightweightParser.INSIDE;
      }
      if (ch == '"') {
        status=XMLLightweightParser.INSIDE_PARAM_VALUE;
      }
 else       if (ch == '>') {
        status=XMLLightweightParser.OUTSIDE;
        if (insideRootTag && ("stream:stream>".equals(head.toString()) || ("?xml>".equals(head.toString())) || ("flash:stream>".equals(head.toString())))) {
          int end=buffer.length() - readChar + (i + 1);
          while (startLastMsg < end && '<' != buffer.charAt(startLastMsg)) {
            startLastMsg++;
          }
          String msg=buffer.substring(startLastMsg,end);
          foundMsg(msg);
          startLastMsg=end;
        }
        insideRootTag=false;
      }
 else       if (ch == '/') {
        status=XMLLightweightParser.VERIFY_CLOSE_TAG;
      }
    }
 else     if (status == XMLLightweightParser.HEAD) {
      if (ch == ' ' || ch == '>') {
        head.append('>');
        if (ch == '>')         status=XMLLightweightParser.OUTSIDE;
 else         status=XMLLightweightParser.INSIDE;
        insideRootTag=true;
        insideChildrenTag=false;
        continue;
      }
 else       if (ch == '/' && head.length() > 0) {
        status=XMLLightweightParser.VERIFY_CLOSE_TAG;
        depth--;
      }
      head.append(ch);
    }
 else     if (status == XMLLightweightParser.INIT) {
      if (ch == '<') {
        status=XMLLightweightParser.HEAD;
        depth=1;
      }
 else {
        startLastMsg++;
      }
    }
 else     if (status == XMLLightweightParser.OUTSIDE) {
      if (ch == '<') {
        status=XMLLightweightParser.PRETAIL;
        cdataOffset=1;
        insideChildrenTag=true;
      }
    }
  }
  if (head.length() > 0 && ("/stream:stream>".equals(head.toString()) || ("/flash:stream>".equals(head.toString())))) {
    foundMsg("</stream:stream>");
  }
}
