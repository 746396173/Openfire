{
  IQ response=IQ.createResultIQ(myPacket);
  List<Node> nodes=findNodesInDocument(myPacket.getElement().getDocument(),"//roster:item");
  for (  Node n : nodes) {
    Roster roster;
    String jid=n.valueOf("@jid");
    String name=n.valueOf("@name");
    String subvalue=n.valueOf("@subscription");
    if (JiveGlobals.getBooleanProperty("plugin.remoteroster.ignoreSubdomains",true) && jid.equals(subdomain) && subvalue.equals("both"))     throw new PacketRejectedException();
    if (subvalue.equals("both")) {
      try {
        roster=_rosterManager.getRoster(username);
        List<String> grouplist=new ArrayList<String>();
        List<Node> groupnodes=findNodesInDocument(n.getDocument(),"//roster:group");
        for (        Node ne : groupnodes) {
          String groupName=ne.getText();
          grouplist.add(groupName);
        }
        boolean rosterPersistent=JiveGlobals.getBooleanProperty("plugin.remoteroster.persistent",true);
        Log.debug("Adding/Updating Contact " + jid + " to roster of "+ username);
        try {
          RosterItem item=roster.getRosterItem(new JID(jid));
          item.setGroups(grouplist);
          roster.updateRosterItem(item);
          continue;
        }
 catch (        UserNotFoundException exc) {
        }
        RosterItem item=roster.createRosterItem(new JID(jid),name,grouplist,false,rosterPersistent);
        item.setSubStatus(RosterItem.SUB_BOTH);
        roster.updateRosterItem(item);
      }
 catch (      Exception e) {
        Log.info("Could not add user to Roster although no entry should exist..." + username,e);
      }
      dispatchPacket(response);
    }
 else     if (subvalue.equals("remove")) {
      if (JiveGlobals.getBooleanProperty("plugin.remoteroster.persistent",false) && jid.equals(subdomain)) {
        deleteSubdomainItemsFromRoster(username,subdomain);
      }
      throw new PacketRejectedException();
    }
  }
}
