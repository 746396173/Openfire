{
  String nodeID=itemsElement.attributeValue("node");
  String subID=itemsElement.attributeValue("subid");
  Node node;
  if (nodeID == null) {
    Element pubsubError=DocumentHelper.createElement(QName.get("nodeid-required","http://jabber.org/protocol/pubsub#errors"));
    sendErrorPacket(iq,PacketError.Condition.bad_request,pubsubError);
    return;
  }
 else {
    node=service.getNode(nodeID);
    if (node == null) {
      sendErrorPacket(iq,PacketError.Condition.item_not_found,null);
      return;
    }
  }
  if (node.isCollectionNode()) {
    Element pubsubError=DocumentHelper.createElement(QName.get("unsupported","http://jabber.org/protocol/pubsub#errors"));
    pubsubError.addAttribute("feature","retrieve-items");
    sendErrorPacket(iq,PacketError.Condition.feature_not_implemented,pubsubError);
    return;
  }
  JID subscriberJID=iq.getFrom();
  JID owner=subscriberJID.asBareJID();
  AccessModel accessModel=node.getAccessModel();
  if (!accessModel.canAccessItems(node,owner,subscriberJID)) {
    sendErrorPacket(iq,accessModel.getSubsriptionError(),accessModel.getSubsriptionErrorDetail());
    return;
  }
  NodeAffiliate affiliate=node.getAffiliate(owner);
  if (affiliate != null && affiliate.getAffiliation() == NodeAffiliate.Affiliation.outcast) {
    sendErrorPacket(iq,PacketError.Condition.forbidden,null);
    return;
  }
  NodeSubscription subscription=null;
  if (node.isMultipleSubscriptionsEnabled() && (node.getSubscriptions(owner).size() > 1)) {
    if (subID == null) {
      Element pubsubError=DocumentHelper.createElement(QName.get("subid-required","http://jabber.org/protocol/pubsub#errors"));
      sendErrorPacket(iq,PacketError.Condition.bad_request,pubsubError);
      return;
    }
 else {
      subscription=node.getSubscription(subID);
      if (subscription == null) {
        Element pubsubError=DocumentHelper.createElement(QName.get("invalid-subid","http://jabber.org/protocol/pubsub#errors"));
        sendErrorPacket(iq,PacketError.Condition.not_acceptable,pubsubError);
        return;
      }
    }
  }
  if (subscription != null && !subscription.isActive()) {
    Element pubsubError=DocumentHelper.createElement(QName.get("not-subscribed","http://jabber.org/protocol/pubsub#errors"));
    sendErrorPacket(iq,PacketError.Condition.not_authorized,pubsubError);
    return;
  }
  LeafNode leafNode=(LeafNode)node;
  boolean forceToIncludePayload=false;
  List<PublishedItem> items;
  String max_items=itemsElement.attributeValue("max_items");
  int recentItems=0;
  if (max_items != null) {
    try {
      recentItems=Integer.parseInt(max_items);
    }
 catch (    NumberFormatException e) {
      Log.warn("Assuming that all items were requested",e);
      max_items=null;
    }
  }
  if (max_items != null) {
    items=new ArrayList<>(leafNode.getPublishedItems(recentItems));
  }
 else {
    List requestedItems=itemsElement.elements("item");
    if (requestedItems.isEmpty()) {
      items=new ArrayList<>(leafNode.getPublishedItems());
    }
 else {
      items=new ArrayList<>();
      forceToIncludePayload=true;
      for (Iterator it=requestedItems.iterator(); it.hasNext(); ) {
        Element element=(Element)it.next();
        String itemID=element.attributeValue("id");
        PublishedItem item=leafNode.getPublishedItem(itemID);
        if (item != null) {
          items.add(item);
        }
      }
    }
  }
  if (subscription != null && subscription.getKeyword() != null) {
    for (Iterator<PublishedItem> it=items.iterator(); it.hasNext(); ) {
      PublishedItem item=it.next();
      if (!subscription.isKeywordMatched(item)) {
        it.remove();
      }
    }
  }
  leafNode.sendPublishedItems(iq,items,forceToIncludePayload);
}
