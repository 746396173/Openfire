{
  SystemTray tray=null;
  try {
    tray=SystemTray.getSystemTray();
  }
 catch (  Throwable e) {
    System.err.println("Error loading system tray library, system tray support disabled.");
  }
  try {
    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (System.getProperty("app.name") != null) {
    appName=System.getProperty("app.name");
  }
 else {
    appName="Openfire";
  }
  binDir=new File("").getAbsoluteFile();
  if (System.getProperty("appdir") != null) {
    binDir=new File(System.getProperty("appdir"));
  }
  configFile=new File(new File(binDir.getParent(),"conf"),"openfire.xml");
  frame=new DroppableFrame(){
    @Override public void fileDropped(    File file){
      String fileName=file.getName();
      if (fileName.endsWith(".jar") || fileName.endsWith(".war")) {
        installPlugin(file);
      }
    }
  }
;
  frame.setTitle(appName);
  ImageIcon splash;
  JPanel mainPanel=new JPanel();
  JLabel splashLabel=null;
  cardPanel.setLayout(cardLayout);
  try {
    splash=new ImageIcon(getClass().getClassLoader().getResource("splash.gif"));
    splashLabel=new JLabel("",splash,JLabel.CENTER);
    onIcon=new ImageIcon(getClass().getClassLoader().getResource("openfire_on-16x16.gif"));
    offIcon=new ImageIcon(getClass().getClassLoader().getResource("openfire_off-16x16.gif"));
    frame.setIconImage(offIcon.getImage());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  mainPanel.setLayout(new BorderLayout());
  cardPanel.setBackground(Color.white);
  final JButton startButton=new JButton("Start");
  startButton.setActionCommand("Start");
  final JButton stopButton=new JButton("Stop");
  stopButton.setActionCommand("Stop");
  final JButton browserButton=new JButton("Launch Admin");
  browserButton.setActionCommand("Launch Admin");
  final JButton quitButton=new JButton("Quit");
  quitButton.setActionCommand("Quit");
  toolbar.setLayout(new GridBagLayout());
  toolbar.add(startButton,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));
  toolbar.add(stopButton,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));
  toolbar.add(browserButton,new GridBagConstraints(2,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));
  toolbar.add(quitButton,new GridBagConstraints(3,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));
  mainPanel.add(cardPanel,BorderLayout.CENTER);
  mainPanel.add(toolbar,BorderLayout.SOUTH);
  PopupMenu menu=new PopupMenu(appName + " Menu");
  final MenuItem showMenuItem=new MenuItem("Hide");
  showMenuItem.setActionCommand("Hide/Show");
  menu.add(showMenuItem);
  final MenuItem startMenuItem=new MenuItem("Start");
  startMenuItem.setActionCommand("Start");
  menu.add(startMenuItem);
  final MenuItem stopMenuItem=new MenuItem("Stop");
  stopMenuItem.setActionCommand("Stop");
  menu.add(stopMenuItem);
  final MenuItem browserMenuItem=new MenuItem("Launch Admin");
  browserMenuItem.setActionCommand("Launch Admin");
  menu.add(browserMenuItem);
  menu.addSeparator();
  final MenuItem quitMenuItem=new MenuItem("Quit");
  quitMenuItem.setActionCommand("Quit");
  menu.add(quitMenuItem);
  browserButton.setEnabled(false);
  stopButton.setEnabled(false);
  browserMenuItem.setEnabled(false);
  stopMenuItem.setEnabled(false);
  ActionListener actionListener=new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      if ("Start".equals(e.getActionCommand())) {
        frame.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        startButton.setEnabled(false);
        stopButton.setEnabled(true);
        startMenuItem.setEnabled(false);
        stopMenuItem.setEnabled(true);
        startApplication();
        frame.setIconImage(onIcon.getImage());
        trayIcon.setImage(onIcon.getImage());
        Thread thread=new Thread(){
          @Override public void run(){
            try {
              sleep(8000);
            }
 catch (            InterruptedException ie) {
            }
            if (stopButton.isEnabled()) {
              browserButton.setEnabled(true);
              browserMenuItem.setEnabled(true);
              frame.setCursor(Cursor.getDefaultCursor());
            }
          }
        }
;
        thread.start();
      }
 else       if ("Stop".equals(e.getActionCommand())) {
        stopApplication();
        frame.setIconImage(offIcon.getImage());
        trayIcon.setImage(offIcon.getImage());
        frame.setCursor(Cursor.getDefaultCursor());
        browserButton.setEnabled(false);
        startButton.setEnabled(true);
        stopButton.setEnabled(false);
        browserMenuItem.setEnabled(false);
        startMenuItem.setEnabled(true);
        stopMenuItem.setEnabled(false);
      }
 else       if ("Launch Admin".equals(e.getActionCommand())) {
        launchBrowser();
      }
 else       if ("Quit".equals(e.getActionCommand())) {
        stopApplication();
        System.exit(0);
      }
 else       if ("Hide/Show".equals(e.getActionCommand()) || "PressAction".equals(e.getActionCommand())) {
        if (frame.isVisible()) {
          frame.setVisible(false);
          frame.setState(Frame.ICONIFIED);
          showMenuItem.setLabel("Show");
        }
 else {
          frame.setVisible(true);
          frame.setState(Frame.NORMAL);
          showMenuItem.setLabel("Hide");
        }
      }
    }
  }
;
  startButton.addActionListener(actionListener);
  stopButton.addActionListener(actionListener);
  browserButton.addActionListener(actionListener);
  quitButton.addActionListener(actionListener);
  quitMenuItem.addActionListener(actionListener);
  browserMenuItem.addActionListener(actionListener);
  stopMenuItem.addActionListener(actionListener);
  startMenuItem.addActionListener(actionListener);
  showMenuItem.addActionListener(actionListener);
  trayIcon=new TrayIcon(offIcon.getImage(),appName,menu);
  trayIcon.setImageAutoSize(true);
  trayIcon.addActionListener(actionListener);
  if (tray != null) {
    tray.add(trayIcon);
  }
  frame.addWindowListener(new WindowAdapter(){
    @Override public void windowClosing(    WindowEvent e){
      stopApplication();
      System.exit(0);
    }
    @Override public void windowIconified(    WindowEvent e){
      frame.setVisible(false);
      showMenuItem.setLabel("Show");
    }
  }
);
  cardPanel.add("main",splashLabel);
  frame.getContentPane().add(mainPanel,BorderLayout.CENTER);
  frame.pack();
  frame.setSize(400,300);
  frame.setResizable(true);
  GraphicUtils.centerWindowOnScreen(frame);
  frame.setVisible(true);
  final ImageIcon icon=new ImageIcon(getClass().getClassLoader().getResource("splash2.gif"));
  pane=new DroppableTextPane(){
    @Override public void paintComponent(    Graphics g){
      final Dimension size=pane.getSize();
      int x=(size.width - icon.getIconWidth()) / 2;
      int y=(size.height - icon.getIconHeight()) / 2;
      g.setColor(Color.white);
      g.fillRect(0,0,size.width,size.height);
      g.drawImage(icon.getImage(),x,y,null);
      setOpaque(false);
      super.paintComponent(g);
    }
    @Override public void fileDropped(    File file){
      String fileName=file.getName();
      if (fileName.endsWith(".jar") || fileName.endsWith(".war")) {
        installPlugin(file);
      }
    }
  }
;
  pane.setEditable(false);
  final JPanel bevelPanel=new JPanel();
  bevelPanel.setBackground(Color.white);
  bevelPanel.setLayout(new BorderLayout());
  bevelPanel.setBorder(BorderFactory.createLoweredBevelBorder());
  bevelPanel.add(new JScrollPane(pane),BorderLayout.CENTER);
  cardPanel.add("running",bevelPanel);
  startButton.doClick();
}
