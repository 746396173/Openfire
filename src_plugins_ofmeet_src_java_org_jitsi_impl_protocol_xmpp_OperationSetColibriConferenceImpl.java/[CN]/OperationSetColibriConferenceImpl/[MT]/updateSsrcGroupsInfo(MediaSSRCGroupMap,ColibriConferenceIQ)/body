{
  ColibriConferenceIQ updateIq=new ColibriConferenceIQ();
  updateIq.setID(conferenceState.getID());
  updateIq.setType(IQ.Type.SET);
  updateIq.setTo(jitsiVideobridge);
  boolean updateNeeded=false;
  for (  ColibriConferenceIQ.Content content : localChannelsInfo.getContents()) {
    String contentName=content.getName();
    if ("video".compareToIgnoreCase(contentName) != 0) {
      continue;
    }
    ColibriConferenceIQ.Content reqContent=new ColibriConferenceIQ.Content(content.getName());
    boolean hasChannels=false;
    for (    ColibriConferenceIQ.Channel channel : content.getChannels()) {
      ColibriConferenceIQ.Channel reqChannel=new ColibriConferenceIQ.Channel();
      reqChannel.setID(channel.getID());
      List<SSRCGroup> groups=ssrcGroups.getSSRCGroupsForMedia(content.getName());
      for (      SSRCGroup group : groups) {
        try {
          reqChannel.addSourceGroup(group.getExtensionCopy());
          hasChannels=true;
          updateNeeded=true;
        }
 catch (        Exception e) {
          logger.error("Error copying extension",e);
        }
      }
      if (groups.isEmpty()) {
        reqChannel.addSourceGroup(SourceGroupPacketExtension.createSimulcastGroup());
        hasChannels=true;
        updateNeeded=true;
      }
      reqContent.addChannel(reqChannel);
    }
    if (hasChannels) {
      updateIq.addContent(reqContent);
    }
  }
  if (updateNeeded) {
    connection.sendPacketAndGetReply(updateIq);
  }
}
