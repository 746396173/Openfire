{
  httpsConnector=null;
  try {
    if (securePort > 0 && CertificateManager.isRSACertificate(SSLConfig.getKeyStore(),"*")) {
      if (!CertificateManager.isRSACertificate(SSLConfig.getKeyStore(),XMPPServer.getInstance().getServerInfo().getXMPPDomain())) {
        Log.warn("HTTP binding: Using RSA certificates but they are not valid for " + "the hosted domain");
      }
      final SslContextFactory sslContextFactory=new SslContextFactory(SSLConfig.getKeystoreLocation());
      sslContextFactory.setTrustStorePassword(SSLConfig.getc2sTrustPassword());
      sslContextFactory.setTrustStoreType(SSLConfig.getStoreType());
      sslContextFactory.setTrustStore(SSLConfig.getc2sTruststoreLocation());
      sslContextFactory.setKeyStorePassword(SSLConfig.getKeyPassword());
      sslContextFactory.setKeyStoreType(SSLConfig.getStoreType());
      String certPol=JiveGlobals.getProperty("xmpp.client.cert.policy","disabled");
      if (certPol.equals("needed")) {
        sslContextFactory.setNeedClientAuth(true);
        sslContextFactory.setWantClientAuth(true);
      }
 else       if (certPol.equals("wanted")) {
        sslContextFactory.setNeedClientAuth(false);
        sslContextFactory.setWantClientAuth(true);
      }
 else {
        sslContextFactory.setNeedClientAuth(false);
        sslContextFactory.setWantClientAuth(false);
      }
      final SslSelectChannelConnector sslConnector=new SslSelectChannelConnector(sslContextFactory);
      sslConnector.setHost(getBindInterface());
      sslConnector.setPort(securePort);
      httpsConnector=sslConnector;
    }
  }
 catch (  Exception e) {
    Log.error("Error creating SSL connector for Http bind",e);
  }
}
