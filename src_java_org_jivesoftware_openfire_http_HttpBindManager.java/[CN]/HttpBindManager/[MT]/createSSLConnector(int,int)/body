{
  httpsConnector=null;
  try {
    final IdentityStoreConfig identityStoreConfig=SSLConfig.getInstance().getIdentityStoreConfig(Purpose.BOSH_C2S);
    final KeyStore keyStore=identityStoreConfig.getStore();
    if (securePort > 0 && identityStoreConfig.getStore().aliases().hasMoreElements()) {
      if (!identityStoreConfig.containsDomainCertificate("RSA")) {
        Log.warn("HTTP binding: Using RSA certificates but they are not valid for " + "the hosted domain");
      }
      final TrustStoreConfig trustStoreConfig=SSLConfig.getInstance().getTrustStoreConfig(Purpose.BOSH_C2S);
      final SslContextFactory sslContextFactory=new SslContextFactory();
      sslContextFactory.setTrustStorePath(trustStoreConfig.getCanonicalPath());
      sslContextFactory.setTrustStorePassword(trustStoreConfig.getPassword());
      sslContextFactory.setTrustStoreType(trustStoreConfig.getType());
      sslContextFactory.setKeyStorePath(identityStoreConfig.getCanonicalPath());
      sslContextFactory.setKeyStorePassword(identityStoreConfig.getPassword());
      sslContextFactory.setKeyStoreType(identityStoreConfig.getType());
      sslContextFactory.addExcludeProtocols("SSLv3");
      String certPol=JiveGlobals.getProperty(HTTP_BIND_AUTH_PER_CLIENTCERT_POLICY,"disabled");
      if (certPol.equals("needed")) {
        sslContextFactory.setNeedClientAuth(true);
        sslContextFactory.setWantClientAuth(true);
      }
 else       if (certPol.equals("wanted")) {
        sslContextFactory.setNeedClientAuth(false);
        sslContextFactory.setWantClientAuth(true);
      }
 else {
        sslContextFactory.setNeedClientAuth(false);
        sslContextFactory.setWantClientAuth(false);
      }
      HttpConfiguration httpsConfig=new HttpConfiguration();
      httpsConfig.setSecureScheme("https");
      httpsConfig.setSecurePort(securePort);
      configureProxiedConnector(httpsConfig);
      httpsConfig.addCustomizer(new SecureRequestCustomizer());
      ServerConnector sslConnector=null;
      if ("npn".equals(JiveGlobals.getXMLProperty("spdy.protocol",""))) {
        sslConnector=new HTTPSPDYServerConnector(httpBindServer,sslContextFactory);
      }
 else {
        sslConnector=new ServerConnector(httpBindServer,null,null,null,-1,bindThreads,new SslConnectionFactory(sslContextFactory,"http/1.1"),new HttpConnectionFactory(httpsConfig));
      }
      sslConnector.setHost(getBindInterface());
      sslConnector.setPort(securePort);
      httpsConnector=sslConnector;
    }
  }
 catch (  Exception e) {
    Log.error("Error creating SSL connector for Http bind",e);
  }
}
