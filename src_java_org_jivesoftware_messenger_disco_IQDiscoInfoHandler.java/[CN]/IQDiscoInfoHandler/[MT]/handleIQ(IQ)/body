{
  IQ reply=(IQ)packet.createDeepCopy();
  reply.setType(IQ.RESULT);
  reply.setRecipient(packet.getSender());
  reply.setSender(packet.getRecipient());
  DiscoInfoProvider infoProvider=getProvider(packet.getRecipient().getHost());
  if (infoProvider != null) {
    String name=packet.getRecipient().getName();
    if (name == null || name.trim().length() == 0) {
      name=null;
    }
    XMPPFragment iq=packet.getChildFragment();
    MetaDataFragment metaData=MetaDataFragment.convertToMetaData(iq);
    String node=metaData.getProperty("query:node");
    if (infoProvider.hasInfo(name,node,packet.getSender())) {
      Element queryElement=((XMPPDOMFragment)reply.getChildFragment()).getRootElement();
      Element identity;
      Iterator identities=infoProvider.getIdentities(name,node,packet.getSender());
      while (identities.hasNext()) {
        identity=(Element)identities.next();
        queryElement.add((Element)identity.clone());
      }
      Element featureElement;
      Iterator features=infoProvider.getFeatures(name,node,packet.getSender());
      while (features.hasNext()) {
        featureElement=DocumentHelper.createElement("feature");
        featureElement.addAttribute("var",(String)features.next());
        queryElement.add(featureElement);
      }
      XDataForm dataForm=infoProvider.getExtendedInfo(name,node,packet.getSender());
      if (dataForm != null) {
        queryElement.add(dataForm.asXMLElement());
      }
    }
 else {
      reply.setError(XMPPError.Code.NOT_FOUND);
    }
  }
 else {
    reply.setError(XMPPError.Code.NOT_FOUND);
  }
  return reply;
}
