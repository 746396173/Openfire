{
  String t="c=IN IP4 ";
  int start=sdpData.indexOf(t);
  int finish=sdpData.indexOf("\r",start);
  if (start < 0 || finish < 0) {
    throw new ParseException("Invalid remote SDP",0);
  }
  String remoteHost=sdpData.substring(start + t.length(),finish).trim();
  t="m=audio";
  start=sdpData.indexOf(t);
  String s=sdpData.substring(start + t.length());
  t="RTP/AVP ";
  finish=s.indexOf(t);
  String port=s.substring(0,finish).trim();
  if (start < 0 || finish < 0) {
    throw new ParseException("Invalid remote SDP",0);
  }
  int remotePort;
  try {
    remotePort=Integer.parseInt(port);
  }
 catch (  NumberFormatException e) {
    Logger.println("Invalid remote port in sdp " + port + " sdpData "+ sdpData);
    throw new ParseException("Invalid remote port in sdp " + port + " sdpData "+ sdpData,0);
  }
  start=finish + t.length();
  finish=s.indexOf("\r\n");
  s=s.substring(start,finish);
  String[] payloads=s.split("[\" \"]");
  String[] sdp=sdpData.split("[\r\n]");
  MediaInfo mediaInfo=new MediaInfo(RtpPacket.PCMU_PAYLOAD,0,8000,1,false);
  supportedMedia.add(mediaInfo);
  byte telephoneEventPayload=0;
  for (int i=0; i < sdp.length; i++) {
    s=sdp[i];
    if (s.indexOf("a=rtpmap:") != 0) {
      continue;
    }
    RtpmapParser rtpmapParser=new RtpmapParser(s);
    mediaInfo=rtpmapParser.getMediaInfo();
    if (mediaInfo == null) {
      continue;
    }
    if (mediaInfo.isTelephoneEventPayload()) {
      telephoneEventPayload=mediaInfo.getPayload();
    }
    supportedMedia.add(mediaInfo);
  }
  mediaInfo=null;
  boolean preferredMediaSpecified=false;
  t="a=PreferredPayload:";
  if ((start=sdpData.indexOf(t)) >= 0) {
    s=sdpData.substring(start + t.length());
    finish=s.indexOf("\r\n");
    if (finish > 0) {
      int payload;
      s=s.substring(0,finish);
      payload=Integer.parseInt(s);
      try {
        mediaInfo=getMediaInfo(payload);
      }
 catch (      ParseException e) {
      }
      preferredMediaSpecified=true;
    }
  }
  if (mediaInfo == null) {
    for (int i=0; i < payloads.length; i++) {
      int payload=0;
      try {
        payload=Integer.parseInt(payloads[i]);
      }
 catch (      NumberFormatException e) {
        Logger.println("Invalid payload in rtpmap: " + payloads[i]);
        throw new ParseException("Invalid payload int rtpmap: " + payloads[i],0);
      }
      if (payload != 0 && (payload < 96 || payload > 127)) {
        continue;
      }
      MediaInfo m=null;
      try {
        m=getMediaInfo(payload);
      }
 catch (      ParseException e) {
        Logger.println("ignoring undefined payload " + payload);
        continue;
      }
      if (m.isTelephoneEventPayload()) {
        continue;
      }
      if (mediaInfo == null || mediaInfo.getSampleRate() < m.getSampleRate()) {
        mediaInfo=m;
      }
 else       if (mediaInfo.getSampleRate() == m.getSampleRate()) {
        if (mediaInfo.getChannels() < m.getChannels()) {
          mediaInfo=m;
        }
      }
    }
  }
  if (mediaInfo == null) {
    Logger.println("No suitable media payload in sdp data " + sdpData);
    throw new ParseException("No suitable media payload in sdp data " + sdpData,0);
  }
  sdpInfo=new SdpInfo(remoteHost,remotePort,telephoneEventPayload,supportedMedia,mediaInfo,preferredMediaSpecified);
  t="a=transmitPayload:";
  if ((start=sdpData.indexOf(t)) >= 0) {
    s=sdpData.substring(start + t.length());
    finish=s.indexOf("\r\n");
    if (finish > 0) {
      int payload;
      s=s.substring(0,finish);
      payload=Integer.parseInt(s);
      try {
        sdpInfo.setTransmitMediaInfo(getMediaInfo(payload));
        Logger.println("Set xmit mediaInfo to " + sdpInfo.getTransmitMediaInfo());
      }
 catch (      ParseException e) {
      }
    }
  }
  int ix;
  t="a=transmitMediaInfoOk";
  if ((ix=sdpData.indexOf(t)) >= 0) {
    sdpInfo.setTransmitMediaInfoOk(true);
  }
  t="a=userName:";
  if ((ix=sdpData.indexOf(t)) >= 0) {
    String userName=sdpData.substring(ix + t.length());
    finish=userName.indexOf("\n");
    if (finish > 0) {
      sdpInfo.setUserName(userName.substring(0,finish).trim());
    }
 else {
      sdpInfo.setUserName(userName.substring(0).trim());
    }
  }
  t="a=callId:";
  if ((ix=sdpData.indexOf(t)) >= 0) {
    String callId=sdpData.substring(ix + t.length());
    finish=callId.indexOf("\n");
    if (finish > 0) {
      sdpInfo.setCallId(callId.substring(0,finish).trim());
    }
  }
  t="a=conferenceId:";
  if ((ix=sdpData.indexOf(t)) >= 0) {
    String conferenceId=sdpData.substring(ix + t.length());
    finish=conferenceId.indexOf("\n");
    if (finish > 0) {
      sdpInfo.setConferenceId(conferenceId.substring(0,finish).trim());
    }
 else {
      sdpInfo.setConferenceId(conferenceId.substring(0).trim());
    }
  }
  if (sdpData.indexOf("a=distributedBridge") >= 0) {
    sdpInfo.setDistributedBridge();
  }
  t="a=rtcpAddress:";
  if ((ix=sdpData.indexOf(t)) >= 0) {
    s=sdpData.substring(ix + t.length());
    finish=s.indexOf("\n");
    if (finish > 0) {
      s=s.substring(0,finish).trim();
    }
 else {
      s=s.substring(0).trim();
    }
    String[] tokens=s.split(":");
    if (tokens.length != 2) {
      throw new ParseException("Invalid rtcp address in sdp " + " sdpData " + sdpData,0);
    }
    try {
      sdpInfo.setRtcpAddress(new InetSocketAddress(InetAddress.getByName(tokens[0]),Integer.parseInt(tokens[1])));
    }
 catch (    UnknownHostException e) {
      throw new ParseException("Invalid rtcp host address in sdp " + " sdpData " + sdpData,0);
    }
catch (    NumberFormatException e) {
      throw new ParseException("Invalid rtcp port in sdp " + " sdpData " + sdpData,0);
    }
  }
  return sdpInfo;
}
