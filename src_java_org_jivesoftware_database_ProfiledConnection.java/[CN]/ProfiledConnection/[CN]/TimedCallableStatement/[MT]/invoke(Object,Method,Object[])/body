{
  if (method.equals(execute) || method.equals(executeQuery) || method.equals(executeUpdate)|| method.equals(executeBatch)) {
    long t1=System.currentTimeMillis();
    Object result=method.invoke(cstmt,args);
    long t2=System.currentTimeMillis();
switch (type) {
case select:
      addQuery(Type.select,sql,t2 - t1);
    break;
case update:
  addQuery(Type.update,sql,t2 - t1);
break;
case insert:
addQuery(Type.insert,sql,t2 - t1);
break;
case delete:
addQuery(Type.delete,sql,t2 - t1);
break;
}
return result;
}
 else if (method.equals(executeWithParam) || method.equals(executeQueryWithParam) || method.equals(executeUpdateWithParam)) {
long t1=System.currentTimeMillis();
Object result=method.invoke(cstmt,args);
long t2=System.currentTimeMillis();
String sql=((String)args[0]).toLowerCase().trim();
if (sql.startsWith("insert")) {
addQuery(Type.insert,sql,t2 - t1);
}
 else if (sql.startsWith("update")) {
addQuery(Type.update,sql,t2 - t1);
}
 else if (sql.startsWith("delete")) {
addQuery(Type.delete,sql,t2 - t1);
}
 else {
addQuery(Type.select,sql,t2 - t1);
}
return result;
}
try {
return method.invoke(cstmt,args);
}
 catch (InvocationTargetException ite) {
throw ite.getCause();
}
}
