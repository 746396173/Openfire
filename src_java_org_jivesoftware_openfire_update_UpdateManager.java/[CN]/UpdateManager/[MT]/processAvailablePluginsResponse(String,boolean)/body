{
  availablePlugins=new HashMap<>();
  SAXReader xmlReader=new SAXReader();
  xmlReader.setEncoding("UTF-8");
  Element xmlResponse=xmlReader.read(new StringReader(response)).getRootElement();
  Iterator plugins=xmlResponse.elementIterator("plugin");
  while (plugins.hasNext()) {
    Element plugin=(Element)plugins.next();
    String pluginName=plugin.attributeValue("name");
    String latestVersion=plugin.attributeValue("latest");
    String icon=plugin.attributeValue("icon");
    String readme=plugin.attributeValue("readme");
    String changelog=plugin.attributeValue("changelog");
    String url=plugin.attributeValue("url");
    String licenseType=plugin.attributeValue("licenseType");
    String description=plugin.attributeValue("description");
    String author=plugin.attributeValue("author");
    String minServerVersion=plugin.attributeValue("minServerVersion");
    String fileSize=plugin.attributeValue("fileSize");
    AvailablePlugin available=new AvailablePlugin(pluginName,description,latestVersion,author,icon,changelog,readme,licenseType,minServerVersion,url,fileSize);
    availablePlugins.put(pluginName,available);
  }
  buildPluginsUpdateList();
  if (notificationsEnabled && isNotificationEnabled() && !pluginUpdates.isEmpty()) {
    Collection<JID> admins=XMPPServer.getInstance().getAdmins();
    for (    Update update : pluginUpdates) {
      Message notification=new Message();
      notification.setFrom(serverName);
      notification.setBody(getNotificationMessage() + " " + update.getComponentName()+ " "+ update.getLatestVersion());
      for (      JID jid : admins) {
        notification.setTo(jid);
        router.route(notification);
      }
    }
  }
  saveAvailablePluginsInfo();
}
