{
  if (message != null) {
    JID recipientJID=message.getTo();
    if (recipientJID == null || serverAddress.equals(recipientJID) || recipientJID.getNode() == null || !UserManager.getInstance().isRegisteredUser(recipientJID.getNode())) {
      return;
    }
    PrivacyList list=PrivacyListManager.getInstance().getDefaultPrivacyList(recipientJID.getNode());
    if (list != null && list.shouldBlockPacket(message)) {
      Message result=message.createCopy();
      result.setTo(message.getFrom());
      result.setError(PacketError.Condition.service_unavailable);
      XMPPServer.getInstance().getRoutingTable().routePacket(message.getFrom(),result,true);
      return;
    }
    if (recipientJID.getResource() == null) {
      if (message.getType() == Message.Type.headline || message.getType() == Message.Type.error) {
        return;
      }
 else       if (message.getType() == Message.Type.groupchat) {
        bounce(message);
        return;
      }
    }
 else {
      if (message.getType() == Message.Type.normal || message.getType() == Message.Type.groupchat || message.getType() == Message.Type.headline) {
        if (type == Type.bounce) {
          bounce(message);
        }
        return;
      }
 else       if (message.getType() == Message.Type.error) {
        return;
      }
    }
switch (type) {
case bounce:
      bounce(message);
    break;
case store:
  store(message);
break;
case store_and_bounce:
if (underQuota(message)) {
store(message);
}
 else {
bounce(message);
}
break;
case store_and_drop:
if (underQuota(message)) {
store(message);
}
break;
case drop:
break;
}
}
}
