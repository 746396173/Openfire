{
  final PatternRun run=new PatternRun();
  final int start=index++;
  if ('+' == pattern[index])   index++;
 else   if ('-' == pattern[index]) {
    run.m_rightJustify=true;
    index++;
  }
  if (Character.isDigit(pattern[index])) {
    int total=0;
    while (Character.isDigit(pattern[index])) {
      total=total * 10 + (pattern[index] - '0');
      index++;
    }
    run.m_minSize=total;
  }
  if (index < pattern.length && '.' == pattern[index]) {
    index++;
    if (Character.isDigit(pattern[index])) {
      int total=0;
      while (Character.isDigit(pattern[index])) {
        total=total * 10 + (pattern[index] - '0');
        index++;
      }
      run.m_maxSize=total;
    }
  }
  if (index >= pattern.length || '{' != pattern[index]) {
    throw new IllegalArgumentException("Badly formed pattern at character " + index);
  }
  int typeStart=index;
  while (index < pattern.length && pattern[index] != ':' && pattern[index] != '}') {
    index++;
  }
  int typeEnd=index - 1;
  final String type=new String(pattern,typeStart + 1,typeEnd - typeStart);
  run.m_type=getTypeIdFor(type);
  if (index < pattern.length && pattern[index] == ':') {
    index++;
    while (index < pattern.length && pattern[index] != '}')     index++;
    final int length=index - typeEnd - 2;
    if (0 != length) {
      run.m_format=new String(pattern,typeEnd + 2,length);
    }
  }
  if (index >= pattern.length || '}' != pattern[index]) {
    throw new IllegalArgumentException("Unterminated type in pattern at character " + index);
  }
  index++;
  stack.push(run);
  return index - start;
}
