{
  try {
    byte[] typeArray=new byte[2];
    System.arraycopy(data,0,typeArray,0,2);
    int type=Utility.twoBytesToInteger(typeArray);
    byte[] lengthArray=new byte[2];
    System.arraycopy(data,2,lengthArray,0,2);
    int lengthValue=Utility.twoBytesToInteger(lengthArray);
    byte[] valueArray=new byte[lengthValue];
    System.arraycopy(data,4,valueArray,0,lengthValue);
    MessageAttribute ma;
switch (type) {
case MAPPEDADDRESS:
      ma=MappedAddress.parse(valueArray);
    break;
case RESPONSEADDRESS:
  ma=ResponseAddress.parse(valueArray);
break;
case CHANGEREQUEST:
ma=ChangeRequest.parse(valueArray);
break;
case SOURCEADDRESS:
ma=SourceAddress.parse(valueArray);
break;
case CHANGEDADDRESS:
ma=ChangedAddress.parse(valueArray);
break;
case USERNAME:
ma=Username.parse(valueArray);
break;
case PASSWORD:
ma=Password.parse(valueArray);
break;
case MESSAGEINTEGRITY:
ma=MessageIntegrity.parse(valueArray);
break;
case ERRORCODE:
ma=ErrorCode.parse(valueArray);
break;
case UNKNOWNATTRIBUTE:
ma=UnknownAttribute.parse(valueArray);
break;
case REFLECTEDFROM:
ma=ReflectedFrom.parse(valueArray);
break;
default :
if (type <= 0x7fff) {
throw new UnknownMessageAttributeException("Unkown mandatory message attribute",intToType(type));
}
 else {
logger.finer("MessageAttribute with type " + type + " unkown.");
ma=Dummy.parse(valueArray);
break;
}
}
return ma;
}
 catch (UtilityException ue) {
throw new MessageAttributeParsingException("Parsing error");
}
}
