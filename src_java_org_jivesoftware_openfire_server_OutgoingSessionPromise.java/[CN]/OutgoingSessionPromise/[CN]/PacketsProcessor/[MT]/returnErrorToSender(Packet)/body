{
  XMPPServer server=XMPPServer.getInstance();
  JID from=packet.getFrom();
  JID to=packet.getTo();
  if (!server.isLocal(from) && !XMPPServer.getInstance().matchesComponent(from) && !server.isLocal(to)&& !XMPPServer.getInstance().matchesComponent(to)) {
    return;
  }
  try {
    if (packet instanceof IQ) {
      IQ reply=new IQ();
      reply.setID(packet.getID());
      reply.setTo(from);
      reply.setFrom(to);
      reply.setChildElement(((IQ)packet).getChildElement().createCopy());
      reply.setError(PacketError.Condition.remote_server_not_found);
      routingTable.routePacket(reply.getTo(),reply,true);
    }
 else     if (packet instanceof Presence) {
      final List<JID> routes=new ArrayList<JID>();
      if (to.getResource() == null) {
        routes.addAll(routingTable.getRoutes(to,null));
      }
 else {
        routes.add(to);
      }
      for (      JID route : routes) {
        Presence reply=new Presence();
        reply.setID(packet.getID());
        reply.setTo(from);
        reply.setFrom(route);
        reply.setError(PacketError.Condition.remote_server_not_found);
        routingTable.routePacket(reply.getTo(),reply,true);
      }
    }
 else     if (packet instanceof Message) {
      Message reply=new Message();
      reply.setID(packet.getID());
      reply.setTo(from);
      reply.setFrom(to);
      reply.setType(((Message)packet).getType());
      reply.setThread(((Message)packet).getThread());
      reply.setError(PacketError.Condition.remote_server_not_found);
      routingTable.routePacket(reply.getTo(),reply,true);
    }
  }
 catch (  Exception e) {
    Log.warn("Error returning error to sender. Original packet: " + packet,e);
  }
}
