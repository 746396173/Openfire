{
  while (!isDone()) {
    Packet packet=packetQueue.poll();
    if (packet != null) {
      if (failureTimestamp > 0) {
        if (System.currentTimeMillis() - failureTimestamp < 5000) {
          returnErrorToSender(packet);
          Log.debug("OutgoingSessionPromise: Error sending packet to remote server (fast discard): " + packet);
          continue;
        }
 else {
          failureTimestamp=-1;
        }
      }
      try {
        sendPacket(packet);
      }
 catch (      Exception e) {
        returnErrorToSender(packet);
        Log.debug("OutgoingSessionPromise: Error sending packet to remote server: " + packet,e);
        failureTimestamp=System.currentTimeMillis();
      }
    }
  }
  promise.processorDone(this);
}
