{
  serversCache=CacheFactory.createCache(RoutingTableImpl.S2S_CACHE_NAME);
  routingTable=XMPPServer.getInstance().getRoutingTable();
  int maxThreads=JiveGlobals.getIntProperty(ConnectionSettings.Server.QUEUE_MAX_THREADS,20);
  int queueSize=JiveGlobals.getIntProperty(ConnectionSettings.Server.QUEUE_SIZE,50);
  if (maxThreads < 10) {
    maxThreads=10;
  }
  threadPool=new ThreadPoolExecutor(maxThreads / 4,maxThreads,60,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(queueSize),new ThreadPoolExecutor.CallerRunsPolicy());
  Thread thread=new Thread(new Runnable(){
    @Override public void run(){
      while (!shutdown) {
        try {
          if (threadPool.getActiveCount() < threadPool.getMaximumPoolSize()) {
            final Packet packet=packets.take();
            boolean newProcessor=false;
            PacketsProcessor packetsProcessor;
            String domain=packet.getTo().getDomain();
synchronized (domain.intern()) {
              packetsProcessor=packetsProcessors.get(domain);
              if (packetsProcessor == null) {
                packetsProcessor=new PacketsProcessor(OutgoingSessionPromise.this,domain);
                packetsProcessors.put(domain,packetsProcessor);
                newProcessor=true;
              }
              packetsProcessor.addPacket(packet);
            }
            if (newProcessor) {
              threadPool.execute(packetsProcessor);
            }
          }
 else {
            Thread.sleep(200);
          }
        }
 catch (        InterruptedException e) {
        }
catch (        Exception e) {
          Log.error(e.getMessage(),e);
        }
      }
    }
  }
,"Queued Packets Processor");
  thread.setDaemon(true);
  thread.start();
}
