{
  final boolean flag=object instanceof OnHookCommand;
  Log.info("RayoComponent handleOnOffHook " + flag);
  try {
    CallHandler handler=CallHandler.findCall(callId);
    if (handler != null) {
      handler.cancelRequest("Reseting handset to " + (flag ? "on" : "off") + "hook");
      handler=null;
    }
    if (!flag) {
      Handset handset=((OffHookCommand)object).getHandset();
      String mediaPreference="PCMU/8000/1";
      if (handset.codec == null || "OPUS".equals(handset.codec))       mediaPreference="PCM/48000/2";
      CallParticipant cp=new CallParticipant();
      cp.setCallId(callId);
      cp.setConferenceId(handset.mixer);
      cp.setDisplayName("rayo-handset-" + System.currentTimeMillis());
      cp.setName(cp.getDisplayName());
      cp.setVoiceDetection(true);
      cp.setCallOwner(JID.unescapeNode(callId));
      if (handset.group != null && !"".equals(handset.group)) {
        ConferenceManager.getConference(handset.mixer,mediaPreference,handset.group,false);
        ConferenceManager.setDisplayName(handset.mixer,handset.group);
      }
      if (channel == null) {
        cp.setMediaPreference("PCMU/8000/1");
        cp.setPhoneNumber(handset.sipuri);
        cp.setAutoAnswer(true);
        cp.setProtocol("SIP");
      }
 else {
        cp.setMediaPreference(mediaPreference);
        cp.setRelayChannel(channel);
        cp.setProtocol("WebRtc");
      }
      OutgoingCallHandler callHandler=new OutgoingCallHandler(this,cp);
      callHandler.start();
      if (channel != null) {
        channel.setCallHandler(callHandler);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}
