{
  Log.info("RayoComponent handleHandsetDialCommand " + iq.getFrom());
  IQ reply=IQ.createResultIQ(iq);
  Map<String,String> headers=command.getHeaders();
  String from=command.getFrom().toString();
  String to=command.getTo().toString();
  boolean toPhone=to.indexOf("sip:") == 0 || to.indexOf("tel:") == 0;
  boolean toXmpp=to.indexOf("xmpp:") == 0;
  String callId=headers.get("call-id");
  String callerName=headers.get("caller-name");
  String calledName=headers.get("called-name");
  String handsetId=iq.getFrom().toString();
  JoinCommand join=command.getJoin();
  if (join != null) {
    if (join.getType() == JoinDestinationType.CALL) {
    }
 else {
    }
    reply.setError(PacketError.Condition.feature_not_implemented);
  }
 else {
    if (callId == null) {
      callId="rayo-call-" + System.currentTimeMillis();
      headers.put("call-id",callId);
    }
    if (callerName == null) {
      callerName=iq.getFrom().getNode();
      headers.put("caller-name",callerName);
    }
    if (calledName == null) {
      calledName=to;
      headers.put("called-name",calledName);
    }
    if (toPhone) {
      CallParticipant cp=new CallParticipant();
      cp.setVoiceDetection(true);
      cp.setCallOwner(handsetId);
      cp.setMediaPreference("PCMU/8000/1");
      cp.setProtocol("SIP");
      cp.setCallId(callId);
      cp.setDisplayName(callerName);
      cp.setPhoneNumber(to);
      cp.setName(calledName);
      cp.setHeaders(headers);
      reply=doPhoneAndPcCall(JID.escapeNode(handsetId),cp,reply);
    }
 else     if (toXmpp) {
      String destination=to.substring(5);
      String mixer=JID.escapeNode(destination);
      Presence presence=new Presence();
      presence.setFrom(mixer + "@rayo." + getDomain());
      presence.setTo(new JID(destination));
      headers.put("mixer-name",mixer);
      OfferEvent offer=new OfferEvent(callId);
      try {
        offer.setFrom(new URI("xmpp:" + iq.getFrom().toString()));
        offer.setTo(new URI(to));
      }
 catch (      URISyntaxException e) {
        reply.setError(PacketError.Condition.feature_not_implemented);
        return reply;
      }
      offer.setHeaders(headers);
      presence.getElement().add(rayoProvider.toXML(offer));
      sendPacket(presence);
    }
 else {
      reply.setError(PacketError.Condition.feature_not_implemented);
    }
  }
  return reply;
}
