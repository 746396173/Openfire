{
  Log.info("RayoComponent handleJoinCommand " + iq.getFrom());
  IQ reply=IQ.createResultIQ(iq);
  String mixer=null;
  if (command.getType() == JoinDestinationType.CALL) {
  }
 else {
    mixer=command.getTo();
  }
  if (mixer != null) {
    try {
      ConferenceManager conferenceManager=ConferenceManager.findConferenceManager(mixer);
      if (CallHandler.findCall("colibri-" + mixer) == null) {
        attachVideobridge(mixer,iq.getFrom(),conferenceManager.getMediaInfo().toString());
        if (conferenceManager.getMemberList().size() == 1) {
          String recording=mixer + "-" + System.currentTimeMillis()+ ".au";
          conferenceManager.recordConference(true,recording,"au");
          sendMucMessage(mixer,recording,iq.getFrom(),"started voice recording");
        }
      }
      sendMucMessage(mixer,null,iq.getFrom(),iq.getFrom().getNode() + " joined voice conversation");
    }
 catch (    ParseException pe) {
      try {
        ConferenceManager conferenceManager=ConferenceManager.getConference(mixer,"PCM/48000/2",mixer,false);
        String recording=mixer + "-" + System.currentTimeMillis()+ ".au";
        conferenceManager.recordConference(true,recording,"au");
        sendMucMessage(mixer,recording,iq.getFrom(),"started voice recording");
        attachVideobridge(mixer,iq.getFrom(),"PCM/48000/2");
      }
 catch (      Exception e) {
        reply.setError(PacketError.Condition.item_not_found);
      }
    }
catch (    Exception e) {
      reply.setError(PacketError.Condition.item_not_found);
    }
  }
 else {
    reply.setError(PacketError.Condition.feature_not_implemented);
  }
  return reply;
}
