{
  Log.info("RayoComponent handleOnOffHookCommand");
  IQ reply=IQ.createResultIQ(iq);
  if (object instanceof OnHookCommand) {
    String key=iq.getTo().getNode();
    if (key != null) {
      RelayChannel channel=plugin.getRelayChannel(iq.getTo().getNode());
      if (channel != null) {
        handleOnOffHook(object,channel);
      }
 else {
        reply.setError(PacketError.Condition.item_not_found);
      }
    }
 else {
      reply.setError(PacketError.Condition.item_not_found);
    }
  }
 else {
    final Handset handset=((OffHookCommand)object).getHandset();
    final RelayChannel channel=plugin.createRelayChannel(iq.getFrom(),handset);
    if (channel != null) {
      final Element childElement=reply.setChildElement("ref","urn:xmpp:rayo:1");
      childElement.addAttribute(HOST,LocalIPResolver.getLocalIP());
      childElement.addAttribute(LOCAL_PORT,Integer.toString(channel.getPortA()));
      childElement.addAttribute(REMOTE_PORT,Integer.toString(channel.getPortB()));
      childElement.addAttribute(ID,channel.getAttachment());
      childElement.addAttribute(URI,"handset:" + channel.getAttachment() + "@rayo."+ getDomain()+ "/"+ iq.getFrom().getNode());
      Log.debug("Created handset channel {}:{}, {}:{}, {}:{}",new Object[]{HOST,LocalIPResolver.getLocalIP(),LOCAL_PORT,Integer.toString(channel.getPortA()),REMOTE_PORT,Integer.toString(channel.getPortB())});
      handleOnOffHook(object,channel);
    }
 else {
      reply.setError(PacketError.Condition.internal_server_error);
    }
  }
  return reply;
}
