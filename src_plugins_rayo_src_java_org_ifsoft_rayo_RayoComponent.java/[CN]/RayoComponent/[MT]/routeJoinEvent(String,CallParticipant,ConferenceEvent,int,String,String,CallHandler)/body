{
  Log.info("RayoComponent routeJoinEvent " + callee + " "+ callId+ " "+ groupName+ " "+ memberCount+ " "+ farParty);
  if (callee == null)   return;
  Presence presence=new Presence();
  presence.setFrom(callId + "@rayo." + getDomain());
  presence.setTo(callee);
  Map<String,String> headers=callParticipant.getHeaders();
  headers.put("call_owner",callParticipant.getCallOwner());
  headers.put("call_action",conferenceEvent.equals(ConferenceEvent.MEMBER_LEFT) ? "leave" : "join");
  headers.put("call_protocol",callParticipant.getProtocol());
  headers.put("mixer_name",conferenceEvent.getConferenceId());
  headers.put("group_name",groupName);
  if (memberCount > 2) {
    Log.info("RayoComponent routeJoinEvent conferenced state " + memberCount);
    if (conferenceEvent.equals(ConferenceEvent.MEMBER_LEFT)) {
      UnjoinedEvent event=new UnjoinedEvent(null,conferenceEvent.getConferenceId(),JoinDestinationType.MIXER);
      presence.getElement().add(rayoProvider.toXML(event));
    }
 else {
      JoinedEvent event=new JoinedEvent(null,conferenceEvent.getConferenceId(),JoinDestinationType.MIXER);
      presence.getElement().add(rayoProvider.toXML(event));
    }
    sendPacket(presence);
  }
 else {
    if (memberCount == 2) {
      Log.info("RayoComponent routeJoinEvent answered state " + callId + " "+ conferenceEvent.getCallId());
      if (conferenceEvent.equals(ConferenceEvent.MEMBER_LEFT)) {
        Log.info("RayoComponent routeJoinEvent someone left ");
        if (callId.equals(conferenceEvent.getCallId()) == false) {
          Log.info("RayoComponent routeJoinEvent handset leaving ");
          presence.getElement().add(rayoProvider.toXML(new AnsweredEvent(null,headers)));
          sendPacket(presence);
        }
 else {
          Log.info("RayoComponent routeJoinEvent far party leaving ");
        }
      }
 else {
        Log.info("RayoComponent routeJoinEvent someone joined ");
        if (callId.equals(conferenceEvent.getCallId())) {
          Log.info("RayoComponent routeJoinEvent far party joined ");
          presence.getElement().add(rayoProvider.toXML(new AnsweredEvent(null,headers)));
          sendPacket(presence);
        }
 else {
          Log.info("RayoComponent routeJoinEvent handset joined ");
          if (farParty != null) {
            CallParticipant fp=farParty.getCallParticipant();
            if (fp.isHeld()) {
              Log.info("RayoComponent routeJoinEvent on hold ");
              fp.setHeld(false);
              presence.getElement().add(rayoProvider.toXML(new AnsweredEvent(null,headers)));
              sendPacket(presence);
            }
 else {
              Log.info("RayoComponent routeJoinEvent not held " + fp.getProtocol() + " "+ fp);
              if ("WebRtc".equals(fp.getProtocol()) == false) {
                Log.info("RayoComponent routeJoinEvent handset joing sip call");
                presence.getElement().add(rayoProvider.toXML(new AnsweredEvent(null,headers)));
                sendPacket(presence);
              }
            }
          }
        }
      }
    }
 else     if (memberCount == 1) {
      if (conferenceEvent.equals(ConferenceEvent.MEMBER_LEFT)) {
        if (callId.equals(conferenceEvent.getCallId()) == false) {
          if (farParty != null) {
            CallParticipant fp=farParty.getCallParticipant();
            if (fp.isHeld()) {
              presence.getElement().add(handsetProvider.toXML(new OnHoldEvent()));
              sendPacket(presence);
            }
          }
        }
 else {
          if (callParticipant.isHeld()) {
            presence.getElement().add(handsetProvider.toXML(new OnHoldEvent()));
            sendPacket(presence);
          }
 else {
            finishCallRecord(callParticipant);
            presence.getElement().add(rayoProvider.toXML(new EndEvent(null,EndEvent.Reason.valueOf("HANGUP"),headers)));
            sendPacket(presence);
          }
        }
      }
    }
 else {
      presence.getElement().add(rayoProvider.toXML(new EndEvent(null,EndEvent.Reason.valueOf("HANGUP"),headers)));
      sendPacket(presence);
    }
  }
}
