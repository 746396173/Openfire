{
  Log.info("Incoming SIP, call route to user " + cp.getToPhoneNumber());
  JID foundUser=findUser(cp.getToPhoneNumber());
  String callId="rayo-incoming-" + System.currentTimeMillis();
  cp.setCallId(callId);
  cp.setMediaPreference("PCMU/8000/1");
  cp.setConferenceId(callId);
  ConferenceManager conferenceManager=ConferenceManager.getConference(callId,cp.getMediaPreference(),cp.getToPhoneNumber(),false);
  conferenceManager.setCallId(callId);
  Map<String,String> headers=cp.getHeaders();
  headers.put("mixer_name",callId);
  headers.put("call_protocol","SIP");
  headers.put("group_name",cp.getToPhoneNumber());
  if (foundUser != null) {
    cp.setCallOwner(foundUser.toString());
    routeSIPCall(foundUser,cp,callId,headers);
    return true;
  }
  try {
    Group group=GroupManager.getInstance().getGroup(cp.getToPhoneNumber());
    conferenceManager.setGroupName(cp.getToPhoneNumber());
    for (    JID memberJID : group.getMembers()) {
      Collection<ClientSession> sessions=SessionManager.getInstance().getSessions(memberJID.getNode());
      for (      ClientSession session : sessions) {
        routeSIPCall(session.getAddress(),cp,callId,headers);
      }
    }
    return true;
  }
 catch (  GroupNotFoundException e) {
    if (XMPPServer.getInstance().getMultiUserChatManager().getMultiUserChatService("conference").hasChatRoom(cp.getToPhoneNumber())) {
      MUCRoom room=XMPPServer.getInstance().getMultiUserChatManager().getMultiUserChatService("conference").getChatRoom(cp.getToPhoneNumber());
      if (room != null) {
        for (        MUCRole role : room.getOccupants()) {
          routeSIPCall(role.getUserAddress(),cp,callId,headers);
        }
      }
      return true;
    }
 else {
      return false;
    }
  }
}
