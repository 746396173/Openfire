{
  try {
    String algorithm=JiveGlobals.getProperty("xmpp.socket.ssl.algorithm","TLS");
    s2sContext=SSLContext.getInstance(algorithm);
    c2sContext=SSLContext.getInstance(algorithm);
    KeyManagerFactory keyFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
    keyFactory.init(keyStore,SSLConfig.getKeyPassword().toCharArray());
    TrustManagerFactory s2sTrustFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    s2sTrustFactory.init(s2sTrustStore);
    s2sContext.init(keyFactory.getKeyManagers(),s2sTrustFactory.getTrustManagers(),new java.security.SecureRandom());
    s2sFactory=s2sContext.getServerSocketFactory();
    if (s2sTrustStore == c2sTrustStore) {
      c2sContext=s2sContext;
      c2sFactory=s2sFactory;
    }
 else {
      TrustManagerFactory c2sTrustFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
      c2sTrustFactory.init(c2sTrustStore);
      c2sContext.init(keyFactory.getKeyManagers(),s2sTrustFactory.getTrustManagers(),new java.security.SecureRandom());
      c2sFactory=c2sContext.getServerSocketFactory();
    }
  }
 catch (  Exception e) {
    Log.error("SSLConfig factory setup problem.\n" + "  storeType: [" + storeType + "]\n"+ "  keyStoreLocation: ["+ keyStoreLocation+ "]\n"+ "  keypass: ["+ keypass+ "]\n"+ "  s2sTrustStoreLocation: ["+ s2sTrustStoreLocation+ "]\n"+ "  s2sTrustpass: ["+ s2sTrustpass+ "]"+ "  c2sTrustStoreLocation: ["+ c2sTrustStoreLocation+ "]\n"+ "  c2sTrustpass: ["+ c2sTrustpass+ "]",e);
    keyStore=null;
    s2sTrustStore=null;
    c2sTrustStore=null;
    s2sFactory=null;
    c2sFactory=null;
  }
}
