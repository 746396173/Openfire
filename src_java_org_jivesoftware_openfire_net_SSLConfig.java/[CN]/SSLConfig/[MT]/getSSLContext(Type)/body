{
  final String algorithm=JiveGlobals.getProperty(ConnectionSettings.Client.TLS_ALGORITHM,"TLS");
  final Purpose idPurpose;
  final Purpose trustPurpose;
switch (type) {
case SOCKET_S2S:
    idPurpose=Purpose.SOCKETBASED_IDENTITYSTORE;
  trustPurpose=Purpose.SOCKETBASED_S2S_TRUSTSTORE;
break;
case SOCKET_C2S:
idPurpose=Purpose.SOCKETBASED_IDENTITYSTORE;
trustPurpose=Purpose.SOCKETBASED_C2S_TRUSTSTORE;
break;
case BOSH_C2S:
idPurpose=Purpose.BOSHBASED_IDENTITYSTORE;
trustPurpose=Purpose.BOSHBASED_C2S_TRUSTSTORE;
break;
case ADMIN:
idPurpose=Purpose.ADMINISTRATIVE_IDENTITYSTORE;
trustPurpose=Purpose.ADMINISTRATIVE_TRUSTSTORE;
break;
case WEBADMIN:
idPurpose=Purpose.WEBADMIN_IDENTITYSTORE;
trustPurpose=Purpose.WEBADMIN_TRUSTSTORE;
break;
default :
throw new IllegalStateException("Unsupported type: " + type);
}
final KeyManager[] keyManagers=((IdentityStoreConfig)getInstance().getStoreConfig(idPurpose)).getKeyManagers();
final TrustManager[] trustManagers=((TrustStoreConfig)getInstance().getStoreConfig(trustPurpose)).getTrustManagers();
final SSLContext sslContext=SSLContext.getInstance(algorithm);
sslContext.init(keyManagers,trustManagers,new SecureRandom());
return sslContext;
}
