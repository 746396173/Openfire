{
  try {
    MessageHeader receiveMH=MessageHeader.parseHeader(origData);
    if (receiveMH.getType() == MessageHeaderType.BindingErrorResponse) {
      return;
    }
    receiveMH.parseAttributes(origData);
    if (receiveMH.getType() == MessageHeaderType.BindingRequest) {
      MessageHeader sendMH=new MessageHeader(MessageHeaderType.BindingResponse);
      sendMH.setTransactionID(receiveMH.getTransactionID());
      MappedAddress ma=new MappedAddress();
      ma.setAddress(new Address(((InetSocketAddress)src).getAddress().getAddress()));
      ma.setPort(((InetSocketAddress)src).getPort());
      sendMH.addMessageAttribute(ma);
      SourceAddress sa=new SourceAddress();
      sa.setAddress(new Address(SipService.getLocalIP()));
      sa.setPort(socket.socket().getLocalPort());
      sendMH.addMessageAttribute(sa);
      MessageAttribute usernameMA=receiveMH.getMessageAttribute(MessageAttributeType.Username);
      if (usernameMA != null) {
        sendMH.addMessageAttribute(usernameMA);
      }
      byte[] data=sendMH.getBytes();
      socket.send(ByteBuffer.wrap(data),src);
synchronized (transmitters) {
        boolean reflexive=true;
        String me=null;
        Username user=(Username)receiveMH.getMessageAttribute(MessageAttributeType.Username);
        for (        String key : transmitters.keySet()) {
          if (user == null)           break;
          StunTransmitter st=transmitters.get(key);
          if (user.getUsername().startsWith(st.localUser)) {
            me=st.localUser;
            if (RTP_DEBUG) {
              Log.debug("Local User found " + me);
            }
          }
          if (src.equals(st.dest)) {
            reflexive=false;
            break;
          }
        }
        if (reflexive && me != null) {
          Log.info("Reflexive detected " + user.getUsername());
          String remote=user.getUsername().substring(me.length());
          Log.info("Remote = " + remote + " me = "+ me);
          sendBind(remote,me,((InetSocketAddress)src).getAddress().getHostAddress(),((InetSocketAddress)src).getPort(),socket == jabberSocket ? false : true);
        }
      }
    }
 else     if (receiveMH.getType() == MessageHeaderType.BindingResponse) {
synchronized (transmitters) {
        if ((this.jabberDest == null && socket == jabberSocket) || (this.jabberDestRtcp == null && socket == jabberSocketRtcp)) {
          if (socket == jabberSocket) {
            this.jabberDest=src;
          }
 else {
            this.jabberDestRtcp=src;
          }
          Username user=(Username)receiveMH.getMessageAttribute(MessageAttributeType.Username);
          StunTransmitter newTimer=null;
          String newKey=null;
          String desired=user.getUsername() + "_" + ((InetSocketAddress)src).getAddress().getHostAddress()+ ":"+ ((InetSocketAddress)src).getPort();
          for (          String key : transmitters.keySet()) {
            StunTransmitter st=transmitters.get(key);
            if (st.socket == socket) {
              try {
                st.cancel();
              }
 catch (              Exception e) {
              }
              Log.debug("[[" + cs.internalCallId + "]] Comparing "+ key+ " to "+ desired);
              if (key.equals(desired)) {
                newKey=key;
                newTimer=new StunTransmitter(st.message,st.remoteUser,st.localUser,st.dest,st.socket);
              }
            }
          }
          if (newTimer != null && newKey != null) {
            Log.debug("[[" + cs.internalCallId + "]] ++++++++++++++++ slowing retransmission "+ newKey+ " ++++++++++++++");
            transmitters.put(newKey,newTimer);
            Log.debug("[[" + cs.internalCallId + "]] RtpRelay::StunTransmitter scheduled (slow) ["+ jabberSocket.socket().getLocalPort()+ "]["+ sipSocket.socket().getLocalPort()+ "] ==> "+ newTimer.socket.socket().getLocalPort());
            retransTimer.schedule(newTimer,100,5000);
          }
        }
      }
    }
  }
 catch (  MessageHeaderParsingException e) {
  }
catch (  UnknownMessageAttributeException e) {
  }
catch (  MessageAttributeParsingException e) {
  }
catch (  UtilityException e) {
    Log.error("Error in processStun",e);
  }
catch (  MessageAttributeException e) {
    Log.error("Error in processStun",e);
  }
catch (  IOException e) {
    Log.error("Error in processStun",e);
  }
catch (  ArrayIndexOutOfBoundsException e) {
  }
catch (  Exception e) {
    Log.error("Error in processStun",e);
  }
}
