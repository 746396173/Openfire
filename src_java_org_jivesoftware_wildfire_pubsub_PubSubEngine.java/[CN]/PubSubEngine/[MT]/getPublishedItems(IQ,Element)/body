{
  String nodeID=itemsElement.attributeValue("node");
  String subID=itemsElement.attributeValue("subid");
  Node node=null;
  if (nodeID == null) {
    node=service.getRootCollectionNode();
  }
 else {
    node=service.getNode(nodeID);
    if (node == null) {
      sendErrorPacket(iq,PacketError.Condition.item_not_found,null);
      return;
    }
  }
  if (node.isCollectionNode()) {
    Element pubsubError=DocumentHelper.createElement(QName.get("unsupported","http://jabber.org/protocol/pubsub#errors"));
    pubsubError.addAttribute("feature","retrieve-items");
    sendErrorPacket(iq,PacketError.Condition.feature_not_implemented,pubsubError);
    return;
  }
  JID subscriberJID=iq.getFrom();
  JID owner=new JID(subscriberJID.toBareJID());
  AccessModel accessModel=node.getAccessModel();
  if (!accessModel.canAccessItems(node,owner,subscriberJID)) {
    sendErrorPacket(iq,accessModel.getSubsriptionError(),accessModel.getSubsriptionErrorDetail());
    return;
  }
  NodeSubscription subscription=null;
  if (node.isMultipleSubscriptionsEnabled()) {
    if (subID == null) {
      Element pubsubError=DocumentHelper.createElement(QName.get("subid-required","http://jabber.org/protocol/pubsub#errors"));
      sendErrorPacket(iq,PacketError.Condition.bad_request,pubsubError);
      return;
    }
 else {
      subscription=node.getSubscription(subID);
      if (subscription == null) {
        Element pubsubError=DocumentHelper.createElement(QName.get("invalid-subid","http://jabber.org/protocol/pubsub#errors"));
        sendErrorPacket(iq,PacketError.Condition.not_acceptable,pubsubError);
        return;
      }
    }
  }
 else {
    subscription=node.getSubscription(subscriberJID);
    if (subscription == null) {
      Element pubsubError=DocumentHelper.createElement(QName.get("not-subscribed","http://jabber.org/protocol/pubsub#errors"));
      sendErrorPacket(iq,PacketError.Condition.not_authorized,pubsubError);
      return;
    }
  }
  boolean forceToIncludePayload=false;
  List<PublishedItem> items=null;
  String max_items=itemsElement.attributeValue("max_items");
  int recentItems=0;
  if (max_items != null) {
    try {
      recentItems=Integer.parseInt(max_items);
    }
 catch (    NumberFormatException e) {
      Log.warn("Assuming that all items were requested",e);
      max_items=null;
    }
  }
  if (max_items != null) {
    items=node.getPublishedItems(recentItems);
  }
 else {
    List requestedItems=itemsElement.elements("item");
    if (requestedItems.isEmpty()) {
      items=node.getPublishedItems();
    }
 else {
      forceToIncludePayload=true;
      for (Iterator it=requestedItems.iterator(); it.hasNext(); ) {
        Element element=(Element)it.next();
        String itemID=element.attributeValue("id");
        PublishedItem item=node.getPublishedItem(itemID);
        if (item != null) {
          items.add(item);
        }
      }
    }
  }
  subscription.sendPublishedItems(iq,items,forceToIncludePayload);
}
