{
  SipURI fromAddress=null;
  Address fromNameAddress=null;
  FromHeader fromHeader=null;
  SipURI toAddress=null;
  Address toNameAddress=null;
  ToHeader toHeader=null;
  SipURI requestURI=null;
  CallIdHeader callIdHeader=null;
  CSeqHeader cSeqHeader=null;
  AllowEventsHeader allowEventsHeader=null;
  ViaHeader viaHeader=null;
  ArrayList viaHeaders=null;
  ContentTypeHeader contentTypeHeader=null;
  Request invite=null;
  String obProxy=null;
  String fromName=cp.getDisplayName();
  String fromNumber=cp.getDisplayName();
  String toNumber=cp.getPhoneNumber();
  String transport="udp";
  Logger.println("XXX from = " + fromName + " "+ cp);
  int toSipPort=5060;
  String proxy=cp.getSipProxy();
  if (proxy == null) {
    proxy=SipServer.getDefaultSipProxy();
  }
  String voipGateway=null;
  if (toNumber.indexOf("sip:") == 0) {
    Address address=null;
    SipURI sipURI=null;
    String host=null;
    String user=null;
    try {
      address=addressFactory.createAddress(toNumber);
      sipURI=(SipURI)address.getURI();
      host=sipURI.getHost();
      user=sipURI.getUser();
    }
 catch (    ParseException e) {
      Logger.println("parse exception:  " + toNumber + " sipUri "+ sipURI+ " host "+ host+ " user "+ user);
    }
    if (Logger.logLevel >= Logger.LOG_SIP) {
      Logger.println("address: " + address);
      Logger.println("sipURI: " + sipURI);
      Logger.println("host: " + host);
      Logger.println("user: " + user);
    }
    if (SipServer.getSendSipUriToProxy() == false && user != null) {
      InetAddress inetAddress;
      try {
        inetAddress=InetAddress.getByName(host);
        voipGateway=host;
        int port=sipURI.getPort();
        if (port > 0) {
          toSipPort=port;
        }
        toNumber=user;
        Logger.println("Call " + cp + " Sending INVITE directly to "+ inetAddress+ ":"+ toSipPort);
      }
 catch (      UnknownHostException e) {
        voipGateway=proxy;
        Logger.println("Call " + cp + " Using proxy "+ proxy+ " for "+ toNumber);
        toNumber=toNumber.substring(4);
      }
    }
 else {
      voipGateway=proxy;
      Logger.println("Call " + cp + " Using proxy "+ proxy+ " for "+ toNumber);
      toNumber=toNumber.substring(4);
    }
  }
 else {
    transport=System.getProperty("com.sun.voip.server.PROTOCOL");
    if (toNumber.indexOf("tel:") == 0) {
      toNumber=toNumber.substring(4);
    }
    voipGateway=proxy;
    Logger.println("Call " + cp + " Using proxy "+ proxy+ " for "+ toNumber);
  }
  if (toNumber.indexOf("@") < 0 && CallHandler.enablePSTNCalls() == false) {
    throw new SipException("PSTN calls are not allowed:  " + cp);
  }
  ArrayList<ProxyCredentials> proxyCredentialList=SipServer.getProxyCredentials();
  boolean gatewayRequired=false;
  if (voipGateway == null) {
    if (proxy == null) {
      if (proxyCredentialList.size() == 0) {
        Logger.println("Call " + cp + " no voipGateway is available!");
        throw new SipException("No voip Gateway! " + cp);
      }
 else       gatewayRequired=true;
    }
 else {
      voipGateway=proxy;
      gatewayRequired=true;
    }
  }
 else {
    if (voipGateway.equals(proxy))     gatewayRequired=true;
  }
  if (gatewayRequired) {
    Logger.println("XXXX gatewayRequired");
    if (proxyCredentialList.size() != 0) {
      Logger.println("XXXX gatewayRequired 1");
      int voipIndex=0;
      for (int i=0; i < proxyCredentialList.size(); i++) {
        ProxyCredentials proxyCredentials=proxyCredentialList.get(i);
        if (voipGateway.equals(proxyCredentials.getName())) {
          voipIndex=i;
        }
      }
      ProxyCredentials proxyCredentials=proxyCredentialList.get(voipIndex);
      voipGateway=proxyCredentials.getHost();
      obProxy=proxyCredentials.getProxy();
      fromAddress=addressFactory.createSipURI(fromName,voipGateway);
    }
 else {
      Logger.println("XXXX gatewayRequired 2");
    }
    Logger.println("XXXX gatewayRequired 3");
    toAddress=addressFactory.createSipURI(toNumber,voipGateway);
  }
 else {
    Logger.println("XXXX gatewayRequired 4");
    Logger.println("fromNumber " + fromNumber);
    if (fromNumber.startsWith("sip:"))     fromAddress=(SipURI)addressFactory.createAddress(fromNumber).getURI();
 else     fromAddress=addressFactory.createSipURI(fromNumber,ourIpAddress);
    fromAddress.setPort(ourSipPort);
    toAddress=addressFactory.createSipURI(toNumber,voipGateway);
  }
  Logger.println("XXXX gatewayRequired 5");
  Logger.println("from " + fromAddress);
  Logger.println("to " + toAddress);
  fromNameAddress=addressFactory.createAddress(fromName,fromAddress);
  fromHeader=headerFactory.createFromHeader(fromNameAddress,new Integer((int)(Math.random() * 10000)).toString());
  Logger.println("XXXX gatewayRequired 6");
  if (Bridge.getPrivateHost().startsWith("127.") && voipGateway.equals("127.0.0.1") == false) {
    throw new SipException("The bridge's ip address is " + Bridge.getPrivateHost() + ". It is not possible to initiate a call to "+ voipGateway);
  }
  if (Bridge.getPrivateHost().startsWith("127.") == false && voipGateway.startsWith("127.") == true) {
    throw new SipException("The bridge's ip address must be " + Bridge.getPrivateHost() + " in order to issue a call to "+ voipGateway);
  }
  Logger.writeFile("Call " + cp + " voip gateway / proxy "+ voipGateway+ " port "+ toSipPort);
  toNameAddress=addressFactory.createAddress(toNumber,toAddress);
  toHeader=headerFactory.createToHeader(toNameAddress,null);
  int ix=toNumber.indexOf("@");
  if (ix >= 0) {
    toNumber=toNumber.substring(0,ix);
  }
  Logger.println("XXXX gatewayRequired 7");
  requestURI=addressFactory.createSipURI(toNumber,voipGateway);
  requestURI.setPort(toSipPort);
  requestURI.setTransportParam(sipProvider.getListeningPoint(transport).getTransport());
  viaHeader=headerFactory.createViaHeader(ourIpAddress,ourSipPort,sipProvider.getListeningPoint(transport).getTransport(),null);
  viaHeaders=new ArrayList();
  viaHeaders.add(viaHeader);
  callIdHeader=sipProvider.getNewCallId();
  cSeqHeader=headerFactory.createCSeqHeader(1,Request.INVITE);
  MaxForwardsHeader maxForwards=headerFactory.createMaxForwardsHeader(70);
  invite=messageFactory.createRequest(requestURI,Request.INVITE,callIdHeader,cSeqHeader,fromHeader,toHeader,viaHeaders,maxForwards);
  Logger.println("XXXX gatewayRequired 10");
  if (SdpManager.useTelephoneEvent() == true) {
    allowEventsHeader=headerFactory.createAllowEventsHeader("telephone-event");
    invite.addHeader(allowEventsHeader);
  }
  SipURI contactURI=null;
  if (fromNumber.startsWith("sip:"))   contactURI=(SipURI)addressFactory.createAddress(fromNumber).getURI();
 else   contactURI=addressFactory.createSipURI(fromNumber,ourPublicIpAddress);
  Logger.println("XXXX gatewayRequired 12");
  contactURI.setPort(ourPublicSipPort);
  Address contactAddress=addressFactory.createAddress(contactURI);
  contactAddress.setDisplayName(fromName);
  ContactHeader contactHeader=headerFactory.createContactHeader(contactAddress);
  invite.addHeader(contactHeader);
  Logger.println("XXXX gatewayRequired 14");
  if (obProxy != null) {
    try {
      SipURI routeURI=(SipURI)addressFactory.createURI("sip:" + obProxy + ";lr");
      RouteHeader routeHeader=headerFactory.createRouteHeader(addressFactory.createAddress(routeURI));
      invite.addHeader(routeHeader);
    }
 catch (    Exception e) {
      Logger.error("Creating registration route error " + e);
    }
  }
  Logger.println("XXXX gatewayRequired 16");
  if (cp.isAutoAnswer()) {
    Logger.println("Call " + cp + " alert-info added");
    try {
      SIPAlertInfo alertInfo=new SIPAlertInfo();
      alertInfo.setNamePair("info=alert-autoanswer");
      invite.addHeader(alertInfo);
    }
 catch (    Exception e) {
      Logger.error("Creating alert info error " + e);
    }
  }
  Logger.println("XXXX gatewayRequired 18");
  if (sdp != null) {
    contentTypeHeader=headerFactory.createContentTypeHeader("application","sdp");
    invite.setContent(sdp,contentTypeHeader);
  }
  ClientTransaction clientTransaction;
  Logger.writeFile("Invite\n" + invite);
  try {
    clientTransaction=sipProvider.getNewClientTransaction(invite);
  }
 catch (  Exception e) {
    Logger.println("Call " + cp + " sendInvite failed:  "+ e.getMessage());
    return null;
  }
  Logger.println("XXXX gatewayRequired 19");
  clientTransaction.sendRequest();
  Logger.println("XXXX gatewayRequired 20");
  return clientTransaction;
}
