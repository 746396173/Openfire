{
  if (!plugin.isEnabled()) {
    throw new WebApplicationException(Status.FORBIDDEN);
  }
  if (!plugin.getAllowedIPs().isEmpty()) {
    String ipAddress=httpRequest.getHeader("x-forwarded-for");
    if (ipAddress == null) {
      ipAddress=httpRequest.getHeader("X_FORWARDED_FOR");
      if (ipAddress == null) {
        ipAddress=httpRequest.getHeader("X-Forward-For");
        if (ipAddress == null) {
          ipAddress=httpRequest.getRemoteAddr();
        }
      }
    }
    if (!plugin.getAllowedIPs().contains(ipAddress)) {
      LOG.warn("REST API rejected service to IP address: " + ipAddress);
      throw new WebApplicationException(Status.UNAUTHORIZED);
    }
  }
  String auth=containerRequest.getHeaderValue("authorization");
  if (auth == null) {
    throw new WebApplicationException(Status.UNAUTHORIZED);
  }
  if (plugin.isHttpBasicAuth()) {
    String[] usernameAndPassword=BasicAuth.decode(auth);
    if (usernameAndPassword == null || usernameAndPassword.length != 2) {
      throw new WebApplicationException(Status.UNAUTHORIZED);
    }
    boolean userAdmin=AdminManager.getInstance().isUserAdmin(usernameAndPassword[0],true);
    if (!userAdmin) {
      throw new WebApplicationException(Status.UNAUTHORIZED);
    }
    try {
      AuthFactory.authenticate(usernameAndPassword[0],usernameAndPassword[1]);
    }
 catch (    UnauthorizedException e) {
      LOG.warn("Wrong HTTP Basic Auth authorization",e);
      throw new WebApplicationException(Status.UNAUTHORIZED);
    }
catch (    ConnectionException e) {
      throw new WebApplicationException(Status.UNAUTHORIZED);
    }
catch (    InternalUnauthenticatedException e) {
      throw new WebApplicationException(Status.UNAUTHORIZED);
    }
  }
 else {
    if (!auth.equals(plugin.getSecret())) {
      LOG.warn("Wrong secret key authorization. Provided key: " + auth);
      throw new WebApplicationException(Status.UNAUTHORIZED);
    }
  }
  return containerRequest;
}
