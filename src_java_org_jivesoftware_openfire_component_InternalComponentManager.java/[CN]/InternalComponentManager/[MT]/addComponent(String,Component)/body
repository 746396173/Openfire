{
synchronized (routables) {
    RoutableComponents routable=routables.get(subdomain);
    if (routable != null && routable.hasComponent(component)) {
      return;
    }
    Log.debug("InternalComponentManager: Registering component for domain: " + subdomain);
    JID componentJID=new JID(subdomain + "." + serverDomain);
    boolean notifyListeners=false;
    if (routable != null) {
      routable.addComponent(component);
    }
 else {
      routable=new RoutableComponents(componentJID,component);
      routables.put(subdomain,routable);
      if (!routingTable.hasComponentRoute(componentJID)) {
        notifyListeners=true;
      }
      routingTable.addComponentRoute(componentJID,routable);
    }
    try {
      component.initialize(componentJID,this);
      component.start();
      if (notifyListeners) {
        notifyComponentRegistered(componentJID);
        CacheFactory.doClusterTask(new NotifyComponentRegistered(componentJID));
      }
      checkPresences();
      checkDiscoSupport(component,componentJID);
      Log.debug("InternalComponentManager: Component registered for domain: " + subdomain);
    }
 catch (    Exception e) {
      routable.removeComponent(component);
      if (e instanceof ComponentException) {
        throw (ComponentException)e;
      }
      throw new ComponentException(e);
    }
 finally {
      if (routable.numberOfComponents() == 0) {
        routables.remove(subdomain);
        XMPPServer.getInstance().getRoutingTable().removeComponentRoute(componentJID);
      }
    }
  }
}
