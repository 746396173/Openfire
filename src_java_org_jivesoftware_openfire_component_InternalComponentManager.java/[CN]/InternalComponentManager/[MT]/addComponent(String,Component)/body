{
  Component existingComponent=components.get(subdomain);
  if (existingComponent != null && existingComponent != component) {
    throw new ComponentException("Domain (" + subdomain + ") already taken by another component: "+ existingComponent);
  }
  Log.debug("InternalComponentManager: Registering component for domain: " + subdomain);
  components.put(subdomain,component);
  JID componentJID=new JID(subdomain + "." + serverDomain);
  XMPPServer.getInstance().getRoutingTable().addComponentRoute(componentJID,new RoutableComponent(componentJID,component));
  try {
    component.initialize(componentJID,this);
    component.start();
    for (    ComponentEventListener listener : listeners) {
      listener.componentRegistered(component,componentJID);
    }
    checkPresences();
    checkDiscoSupport(component,componentJID);
    Log.debug("InternalComponentManager: Component registered for domain: " + subdomain);
  }
 catch (  Exception e) {
    components.remove(subdomain);
    XMPPServer.getInstance().getRoutingTable().removeComponentRoute(componentJID);
    if (e instanceof ComponentException) {
      throw (ComponentException)e;
    }
    throw new ComponentException(e);
  }
}
