{
  PrintWriter out=response.getWriter();
  if (!plugin.getAllowedIPs().isEmpty()) {
    String ipAddress=request.getHeader("x-forwarded-for");
    if (ipAddress == null) {
      ipAddress=request.getHeader("X_FORWARDED_FOR");
      if (ipAddress == null) {
        ipAddress=request.getHeader("X-Forward-For");
        if (ipAddress == null) {
          ipAddress=request.getRemoteAddr();
        }
      }
    }
    if (!plugin.getAllowedIPs().contains(ipAddress)) {
      Log.warn("User service rejected service to IP address: " + ipAddress);
      replyError("RequestNotAuthorised",response,out);
      return;
    }
  }
  String username=request.getParameter("username");
  String password=request.getParameter("password");
  String name=request.getParameter("name");
  String email=request.getParameter("email");
  String type=request.getParameter("type");
  String secret=request.getParameter("secret");
  String groupNames=request.getParameter("groups");
  if (!plugin.isEnabled()) {
    Log.warn("User service plugin is disabled: " + request.getQueryString());
    replyError("UserServiceDisabled",response,out);
    return;
  }
  if (secret == null || !secret.equals(plugin.getSecret())) {
    Log.warn("An unauthorised user service request was received: " + request.getQueryString());
    replyError("RequestNotAuthorised",response,out);
    return;
  }
  if (username == null) {
    replyError("IllegalArgumentException",response,out);
    return;
  }
  try {
    username=username.trim().toLowerCase();
    username=JID.escapeNode(username);
    username=Stringprep.nodeprep(username);
    if ("add".equals(type)) {
      plugin.createUser(username,password,name,email,groupNames);
      replyMessage("ok",response,out);
    }
 else     if ("delete".equals(type)) {
      plugin.deleteUser(username);
      replyMessage("ok",response,out);
    }
 else     if ("enable".equals(type)) {
      plugin.enableUser(username);
      replyMessage("ok",response,out);
    }
 else     if ("disable".equals(type)) {
      plugin.disableUser(username);
      replyMessage("ok",response,out);
    }
 else     if ("update".equals(type)) {
      plugin.updateUser(username,password,name,email,groupNames);
      replyMessage("ok",response,out);
    }
 else {
      Log.warn("The userService servlet received an invalid request of type: " + type);
    }
  }
 catch (  UserAlreadyExistsException e) {
    replyError("UserAlreadyExistsException",response,out);
  }
catch (  UserNotFoundException e) {
    replyError("UserNotFoundException",response,out);
  }
catch (  IllegalArgumentException e) {
    replyError("IllegalArgumentException",response,out);
  }
catch (  Exception e) {
    replyError(e.toString(),response,out);
  }
}
