{
  PrintWriter out=response.getWriter();
  if (!plugin.getAllowedIPs().isEmpty()) {
    String ipAddress=request.getHeader("x-forwarded-for");
    if (ipAddress == null) {
      ipAddress=request.getHeader("X_FORWARDED_FOR");
      if (ipAddress == null) {
        ipAddress=request.getHeader("X-Forward-For");
        if (ipAddress == null) {
          ipAddress=request.getRemoteAddr();
        }
      }
    }
    if (!plugin.getAllowedIPs().contains(ipAddress)) {
      Log.warn("User service rejected service to IP address: " + ipAddress);
      replyError("RequestNotAuthorised",response,out);
      return;
    }
  }
  String username=request.getParameter("username");
  String password=request.getParameter("password");
  String name=request.getParameter("name");
  String email=request.getParameter("email");
  String type=request.getParameter("type");
  String secret=request.getParameter("secret");
  String groupNames=request.getParameter("groups");
  String item_jid=request.getParameter("item_jid");
  String sub=request.getParameter("subscription");
  if (!plugin.isEnabled()) {
    Log.warn("User service plugin is disabled: " + request.getQueryString());
    replyError("UserServiceDisabled",response,out);
    return;
  }
  if (secret == null || !secret.equals(plugin.getSecret())) {
    Log.warn("An unauthorised user service request was received: " + request.getQueryString());
    replyError("RequestNotAuthorised",response,out);
    return;
  }
  if (username == null && !"grouplist".equals(type)) {
    replyError("IllegalArgumentException",response,out);
    return;
  }
  if ((type.equals("add_roster") || type.equals("update_roster") || type.equals("delete_roster")) && (item_jid == null || !(sub == null || sub.equals("-1") || sub.equals("0") || sub.equals("1") || sub.equals("2") || sub.equals("3")))) {
    replyError("IllegalArgumentException",response,out);
    return;
  }
  try {
    if ("grouplist".equals(type)) {
      String message="";
      for (      String groupname : plugin.getAllGroups()) {
        message+="<groupname>" + groupname + "</groupname>";
      }
      replyMessage(message,response,out);
    }
 else {
      username=username.trim().toLowerCase();
      username=JID.escapeNode(username);
      username=Stringprep.nodeprep(username);
      if ("add".equals(type)) {
        plugin.createUser(username,password,name,email,groupNames);
        replyMessage("ok",response,out);
      }
 else       if ("delete".equals(type)) {
        plugin.deleteUser(username);
        replyMessage("ok",response,out);
      }
 else       if ("enable".equals(type)) {
        plugin.enableUser(username);
        replyMessage("ok",response,out);
      }
 else       if ("disable".equals(type)) {
        plugin.disableUser(username);
        replyMessage("ok",response,out);
      }
 else       if ("update".equals(type)) {
        plugin.updateUser(username,password,name,email,groupNames);
        replyMessage("ok",response,out);
      }
 else       if ("add_roster".equals(type)) {
        plugin.addRosterItem(username,item_jid,name,sub,groupNames);
        replyMessage("ok",response,out);
      }
 else       if ("update_roster".equals(type)) {
        plugin.updateRosterItem(username,item_jid,name,sub,groupNames);
        replyMessage("ok",response,out);
      }
 else       if ("delete_roster".equals(type)) {
        plugin.deleteRosterItem(username,item_jid);
        replyMessage("ok",response,out);
      }
      if ("usergrouplist".equals(type)) {
        String message="";
        for (        String groupname : plugin.getUserGroups(username)) {
          message+="<groupname>" + groupname + "</groupname>";
        }
        replyMessage(message,response,out);
      }
 else {
        Log.warn("The userService servlet received an invalid request of type: " + type);
      }
    }
  }
 catch (  UserAlreadyExistsException e) {
    replyError("UserAlreadyExistsException",response,out);
  }
catch (  UserNotFoundException e) {
    replyError("UserNotFoundException",response,out);
  }
catch (  IllegalArgumentException e) {
    replyError("IllegalArgumentException",response,out);
  }
catch (  SharedGroupException e) {
    replyError("SharedGroupException",response,out);
  }
catch (  Exception e) {
    replyError(e.toString(),response,out);
  }
}
