def CallLoadTargetBuildFile(global_flags, build_file_path, data, aux_data, variables, includes, depth, check, generator_input_info):
    'Wrapper around LoadTargetBuildFile for parallel processing.\n\n     This wrapper is used when LoadTargetBuildFile is executed in\n     a worker process.\n  '
    try:
        signal.signal(signal.SIGINT, signal.SIG_IGN)
        for (key, value) in global_flags.iteritems():
            globals()[key] = value
        data_keys = set(data)
        aux_data_keys = set(aux_data)
        SetGeneratorGlobals(generator_input_info)
        result = LoadTargetBuildFile(build_file_path, data, aux_data, variables, includes, depth, check, False)
        if (not result):
            return result
        (build_file_path, dependencies) = result
        data_out = {}
        for key in data:
            if (key == 'target_build_files'):
                continue
            if (key not in data_keys):
                data_out[key] = data[key]
        aux_data_out = {}
        for key in aux_data:
            if (key not in aux_data_keys):
                aux_data_out[key] = aux_data[key]
        return (build_file_path, data_out, aux_data_out, dependencies)
    except GypError as e:
        sys.stderr.write(('gyp: %s\n' % e))
        return None
    except Exception as e:
        print  >> sys.stderr, 'Exception:', e
        print  >> sys.stderr, traceback.format_exc()
        return None
