def VerifyNoGYPFileCircularDependencies(targets):
    dependency_nodes = {}
    for target in targets.iterkeys():
        build_file = gyp.common.BuildFile(target)
        if (not (build_file in dependency_nodes)):
            dependency_nodes[build_file] = DependencyGraphNode(build_file)
    for (target, spec) in targets.iteritems():
        build_file = gyp.common.BuildFile(target)
        build_file_node = dependency_nodes[build_file]
        target_dependencies = spec.get('dependencies', [])
        for dependency in target_dependencies:
            try:
                dependency_build_file = gyp.common.BuildFile(dependency)
            except GypError as e:
                gyp.common.ExceptionAppend(e, ('while computing dependencies of .gyp file %s' % build_file))
                raise
            if (dependency_build_file == build_file):
                continue
            dependency_node = dependency_nodes.get(dependency_build_file)
            if (not dependency_node):
                raise GypError(("Dependancy '%s' not found" % dependency_build_file))
            if (dependency_node not in build_file_node.dependencies):
                build_file_node.dependencies.append(dependency_node)
                dependency_node.dependents.append(build_file_node)
    root_node = DependencyGraphNode(None)
    for build_file_node in dependency_nodes.itervalues():
        if (len(build_file_node.dependencies) == 0):
            build_file_node.dependencies.append(root_node)
            root_node.dependents.append(build_file_node)
    flat_list = root_node.FlattenToList()
    if (len(flat_list) != len(dependency_nodes)):
        bad_files = []
        for file in dependency_nodes.iterkeys():
            if (not (file in flat_list)):
                bad_files.append(file)
        common_path_prefix = os.path.commonprefix(dependency_nodes)
        cycles = []
        for cycle in root_node.FindCycles():
            simplified_paths = []
            for node in cycle:
                assert node.ref.startswith(common_path_prefix)
                simplified_paths.append(node.ref[len(common_path_prefix):])
            cycles.append(('Cycle: %s' % ' -> '.join(simplified_paths)))
        raise DependencyGraphNode.CircularException, ('Cycles in .gyp file dependency graph detected:\n' + '\n'.join(cycles))
