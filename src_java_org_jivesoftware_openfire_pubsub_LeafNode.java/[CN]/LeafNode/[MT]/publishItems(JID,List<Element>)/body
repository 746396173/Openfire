{
  List<PublishedItem> newPublishedItems=new ArrayList<PublishedItem>();
  if (isItemRequired()) {
    String itemID;
    Element payload;
    PublishedItem newItem;
    for (    Element item : itemElements) {
      itemID=item.attributeValue("id");
      List entries=item.elements();
      payload=entries.isEmpty() ? null : (Element)entries.get(0);
synchronized (publishedItems) {
        if (itemID == null) {
          do {
            itemID=StringUtils.randomString(15);
          }
 while (itemsByID.containsKey(itemID));
        }
        newItem=new PublishedItem(this,publisher,itemID,new Date());
        newItem.setPayload(payload);
        newPublishedItems.add(newItem);
        PublishedItem duplicate=itemsByID.get(newItem.getID());
        if (duplicate != null) {
          removeItem(findIndexById(duplicate.getID()));
        }
        while (!publishedItems.isEmpty() && isMaxItemsReached()) {
          removeItem(0);
        }
        addPublishedItem(newItem);
        service.queueItemToAdd(newItem);
      }
    }
  }
  Message message=new Message();
  Element event=message.addChildElement("event","http://jabber.org/protocol/pubsub#event");
  Set<NodeAffiliate> affiliatesToNotify=new HashSet<NodeAffiliate>(affiliates);
  for (  CollectionNode parentNode : getParents()) {
    for (    NodeSubscription subscription : parentNode.getSubscriptions()) {
      affiliatesToNotify.add(subscription.getAffiliate());
    }
  }
  for (  NodeAffiliate affiliate : affiliatesToNotify) {
    affiliate.sendPublishedNotifications(message,event,this,newPublishedItems);
  }
}
