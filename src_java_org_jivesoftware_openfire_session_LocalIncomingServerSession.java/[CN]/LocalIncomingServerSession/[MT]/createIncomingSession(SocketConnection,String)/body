{
  StreamID streamID=SessionManager.getInstance().nextStreamID();
  LocalIncomingServerSession session=SessionManager.getInstance().createIncomingServerSession(connection,streamID);
  StringBuilder openingStream=new StringBuilder();
  openingStream.append("<stream:stream");
  openingStream.append(" xmlns:db=\"jabber:server:dialback\"");
  openingStream.append(" xmlns:stream=\"http://etherx.jabber.org/streams\"");
  openingStream.append(" xmlns=\"jabber:server\"");
  openingStream.append(" from=\"").append(serverName).append("\"");
  openingStream.append(" id=\"").append(streamID).append("\"");
  openingStream.append(" version=\"1.0\">");
  connection.deliverRawText(openingStream.toString());
  Connection.TLSPolicy tlsPolicy=ServerDialback.isEnabled() ? Connection.TLSPolicy.optional : Connection.TLSPolicy.required;
  boolean hasCertificates=false;
  try {
    hasCertificates=SSLConfig.getKeyStore().size() > 0;
  }
 catch (  Exception e) {
    Log.error(e);
  }
  if (Connection.TLSPolicy.required == tlsPolicy && !hasCertificates) {
    Log.error("Server session rejected. TLS is required but no certificates " + "were created.");
    return null;
  }
  connection.setTlsPolicy(hasCertificates ? tlsPolicy : Connection.TLSPolicy.disabled);
  String policyName=JiveGlobals.getProperty("xmpp.server.compression.policy",Connection.CompressionPolicy.disabled.toString());
  Connection.CompressionPolicy compressionPolicy=Connection.CompressionPolicy.valueOf(policyName);
  connection.setCompressionPolicy(compressionPolicy);
  StringBuilder sb=new StringBuilder();
  sb.append("<stream:features>");
  if (JiveGlobals.getBooleanProperty("xmpp.server.tls.enabled",true)) {
    sb.append("<starttls xmlns=\"urn:ietf:params:xml:ns:xmpp-tls\">");
    if (!ServerDialback.isEnabled()) {
      sb.append("<required/>");
    }
    sb.append("</starttls>");
  }
  if (ServerDialback.isEnabled()) {
    sb.append("<dialback xmlns=\"urn:xmpp:features:dialback\"/>");
  }
  sb.append(SASLAuthentication.getSASLMechanisms(session));
  sb.append("</stream:features>");
  connection.deliverRawText(sb.toString());
  session.setLocalDomain(serverName);
  return session;
}
