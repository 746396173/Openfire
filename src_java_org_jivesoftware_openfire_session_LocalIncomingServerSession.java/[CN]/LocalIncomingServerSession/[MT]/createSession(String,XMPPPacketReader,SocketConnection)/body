{
  XmlPullParser xpp=reader.getXPPParser();
  String version=xpp.getAttributeValue("","version");
  int[] serverVersion=version != null ? decodeVersion(version) : new int[]{0,0};
  try {
    StreamID streamID=SessionManager.getInstance().nextStreamID();
    LocalIncomingServerSession session=SessionManager.getInstance().createIncomingServerSession(connection,streamID);
    StringBuilder openingStream=new StringBuilder();
    openingStream.append("<stream:stream");
    openingStream.append(" xmlns:db=\"jabber:server:dialback\"");
    openingStream.append(" xmlns:stream=\"http://etherx.jabber.org/streams\"");
    openingStream.append(" xmlns=\"jabber:server\"");
    openingStream.append(" from=\"").append(serverName).append("\"");
    openingStream.append(" id=\"").append(streamID).append("\"");
    if (serverVersion[0] >= 1) {
      openingStream.append(" version=\"1.0\">");
    }
 else {
      openingStream.append(">");
    }
    connection.deliverRawText(openingStream.toString());
    if (serverVersion[0] >= 1) {
      Connection.TLSPolicy tlsPolicy=ServerDialback.isEnabled() ? Connection.TLSPolicy.optional : Connection.TLSPolicy.required;
      boolean hasCertificates=false;
      try {
        hasCertificates=SSLConfig.getKeyStore().size() > 0;
      }
 catch (      Exception e) {
        Log.error(e.getMessage(),e);
      }
      if (Connection.TLSPolicy.required == tlsPolicy && !hasCertificates) {
        Log.error("Server session rejected. TLS is required but no certificates " + "were created.");
        return null;
      }
      connection.setTlsPolicy(hasCertificates ? tlsPolicy : Connection.TLSPolicy.disabled);
    }
    String policyName=JiveGlobals.getProperty(ConnectionSettings.Server.COMPRESSION_SETTINGS,Connection.CompressionPolicy.disabled.toString());
    Connection.CompressionPolicy compressionPolicy=Connection.CompressionPolicy.valueOf(policyName);
    connection.setCompressionPolicy(compressionPolicy);
    StringBuilder sb=new StringBuilder();
    if (serverVersion[0] >= 1) {
      sb.append("<stream:features>");
      if (JiveGlobals.getBooleanProperty(ConnectionSettings.Server.TLS_ENABLED,true)) {
        sb.append("<starttls xmlns=\"urn:ietf:params:xml:ns:xmpp-tls\">");
        if (!ServerDialback.isEnabled()) {
          sb.append("<required/>");
        }
        sb.append("</starttls>");
      }
      sb.append(SASLAuthentication.getSASLMechanisms(session));
      if (ServerDialback.isEnabled()) {
        sb.append("<dialback xmlns=\"urn:xmpp:features:dialback\"/>");
      }
      sb.append("</stream:features>");
    }
    connection.deliverRawText(sb.toString());
    session.setLocalDomain(serverName);
    return session;
  }
 catch (  Exception e) {
    Log.error("Error establishing connection from remote server:" + connection,e);
    connection.close();
    return null;
  }
}
