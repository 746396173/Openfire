{
  StreamError error;
  StringBuilder sb;
  String recipient=doc.attributeValue("to");
  String hostname=doc.attributeValue("from");
  Log.debug("RS - Received dialback key from host: " + hostname + " to: "+ recipient);
  if (!RemoteServerManager.canAccess(hostname)) {
    error=new StreamError(StreamError.Condition.host_unknown);
    sb=new StringBuilder();
    sb.append(error.toXML());
    connection.deliverRawText(sb.toString());
    connection.close();
    Log.debug("RS - Error, hostname is not allowed to establish a connection to " + "this server: " + recipient);
    return false;
  }
 else   if (isHostUnknown(recipient)) {
    error=new StreamError(StreamError.Condition.host_unknown);
    sb=new StringBuilder();
    sb.append(error.toXML());
    connection.deliverRawText(sb.toString());
    connection.close();
    Log.debug("RS - Error, hostname not recognized: " + recipient);
    return false;
  }
 else {
    boolean alreadyExists=false;
    for (    IncomingServerSession session : sessionManager.getIncomingServerSessions(hostname)) {
      if (session.getLocalDomains().contains(recipient)) {
        alreadyExists=true;
      }
    }
    if (alreadyExists) {
      error=new StreamError(StreamError.Condition.not_authorized);
      sb=new StringBuilder();
      sb.append(error.toXML());
      connection.deliverRawText(sb.toString());
      connection.close();
      Log.debug("RS - Error, incoming connection already exists from: " + hostname);
      return false;
    }
 else {
      String key=doc.getTextTrim();
      DNSUtil.HostAddress address=DNSUtil.resolveXMPPServerDomain(hostname);
      try {
        boolean valid=verifyKey(key,streamID.toString(),recipient,hostname,address.getHost(),address.getPort());
        Log.debug("RS - Sending key verification result to OS: " + hostname);
        sb=new StringBuilder();
        sb.append("<db:result");
        sb.append(" from=\"" + recipient + "\"");
        sb.append(" to=\"" + hostname + "\"");
        sb.append(" type=\"");
        sb.append(valid ? "valid" : "invalid");
        sb.append("\"/>");
        connection.deliverRawText(sb.toString());
        if (!valid) {
          connection.close();
        }
        return valid;
      }
 catch (      Exception e) {
        Log.warn("Error verifying key",e);
        error=new StreamError(StreamError.Condition.remote_connection_failed);
        sb=new StringBuilder();
        sb.append(error.toXML());
        connection.deliverRawText(sb.toString());
        connection.close();
        return false;
      }
    }
  }
}
