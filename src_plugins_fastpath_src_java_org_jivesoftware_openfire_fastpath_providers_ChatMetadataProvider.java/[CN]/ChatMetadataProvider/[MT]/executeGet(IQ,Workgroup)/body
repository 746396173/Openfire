{
  IQ reply=IQ.createResultIQ(packet);
  try {
    AgentSession agentSession=workgroup.getAgentManager().getAgentSession(packet.getFrom());
    if (agentSession == null) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(new PacketError(PacketError.Condition.not_authorized));
      workgroup.send(reply);
      return;
    }
  }
 catch (  AgentNotFoundException e) {
    reply=IQ.createResultIQ(packet);
    reply.setChildElement(packet.getChildElement().createCopy());
    reply.setError(new PacketError(PacketError.Condition.not_authorized));
    workgroup.send(reply);
    return;
  }
  Element chatSessions=reply.setChildElement("chat-metadata","http://jivesoftware.com/protocol/workgroup");
  Element iq=packet.getChildElement();
  String sessionID=iq.element("sessionID").getTextTrim();
  Connection con=null;
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  Map<String,String> map=new HashMap<String,String>();
  try {
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(GET_SESSION_METADATA);
    pstmt.setString(1,sessionID);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      String name=rs.getString(1);
      String value=rs.getString(2);
      map.put(name,value);
    }
  }
 catch (  Exception ex) {
    ComponentManagerFactory.getComponentManager().getLog().error(ex);
  }
 finally {
    DbConnectionManager.closeConnection(rs,pstmt,con);
  }
  chatSessions.add(getMetaDataElement(map));
  workgroup.send(reply);
}
