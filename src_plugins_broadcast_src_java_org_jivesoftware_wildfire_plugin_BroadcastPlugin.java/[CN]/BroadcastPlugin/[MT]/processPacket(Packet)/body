{
  boolean canProceed=false;
  Group group=null;
  String toNode=packet.getTo().getNode();
  if ("all".equals(toNode)) {
    JID address=new JID(packet.getFrom().toBareJID());
    if (allowedUsers.isEmpty() || allowedUsers.contains(address)) {
      canProceed=true;
    }
  }
 else {
    try {
      group=groupManager.getGroup(toNode);
      boolean isGroupUser=group.isUser(packet.getFrom()) || group.isUser(new JID(packet.getFrom().toBareJID()));
      if (disableGroupPermissions || (groupMembersAllowed && isGroupUser) || allowedUsers.contains(new JID(packet.getFrom().toBareJID()))) {
        canProceed=true;
      }
    }
 catch (    GroupNotFoundException e) {
    }
  }
  if (packet instanceof Message) {
    Message message=(Message)packet;
    if ("all".equals(toNode)) {
      if (!canProceed) {
        Message error=new Message();
        if (message.getID() != null) {
          error.setID(message.getID());
        }
        error.setError(PacketError.Condition.not_allowed);
        error.setTo(message.getFrom());
        error.setSubject("Error sending broadcast message");
        error.setBody("Not allowed to send a broadcast message to " + message.getTo());
        try {
          componentManager.sendPacket(this,error);
        }
 catch (        Exception e) {
          componentManager.getLog().error(e);
        }
        return;
      }
      try {
        sessionManager.broadcast(message);
      }
 catch (      UnauthorizedException ue) {
        Log.error(ue);
      }
    }
 else {
      if (group == null) {
        Message error=new Message();
        if (message.getID() != null) {
          error.setID(message.getID());
        }
        error.setTo(message.getFrom());
        error.setError(PacketError.Condition.not_allowed);
        error.setSubject("Error sending broadcast message");
        error.setBody("Address not valid: " + message.getTo());
        try {
          componentManager.sendPacket(this,error);
        }
 catch (        Exception e) {
          componentManager.getLog().error(e);
        }
      }
 else       if (canProceed) {
        for (        JID userJID : group.getMembers()) {
          Message newMessage=message.createCopy();
          newMessage.setTo(userJID);
          try {
            componentManager.sendPacket(this,newMessage);
          }
 catch (          Exception e) {
            componentManager.getLog().error(e);
          }
        }
      }
 else {
        Message error=new Message();
        if (message.getID() != null) {
          error.setID(message.getID());
        }
        error.setTo(message.getFrom());
        error.setError(PacketError.Condition.not_allowed);
        error.setSubject("Error sending broadcast message");
        error.setBody("Not allowed to send a broadcast message to " + message.getTo());
        try {
          componentManager.sendPacket(this,error);
        }
 catch (        Exception e) {
          componentManager.getLog().error(e);
        }
      }
    }
  }
 else   if (packet instanceof Presence) {
    Presence presence=(Presence)packet;
    try {
      if (!canProceed) {
        Presence reply=new Presence();
        reply.setID(presence.getID());
        reply.setTo(presence.getFrom());
        reply.setFrom(presence.getTo());
        reply.setError(PacketError.Condition.forbidden);
        componentManager.sendPacket(this,reply);
        return;
      }
      if (Presence.Type.subscribe == presence.getType()) {
        Presence reply=new Presence();
        reply.setTo(presence.getFrom());
        reply.setFrom(presence.getTo());
        reply.setType(Presence.Type.subscribed);
        componentManager.sendPacket(this,reply);
      }
 else       if (Presence.Type.unsubscribe == presence.getType()) {
        Presence reply=new Presence();
        reply.setTo(presence.getFrom());
        reply.setFrom(presence.getTo());
        reply.setType(Presence.Type.unsubscribed);
        componentManager.sendPacket(this,reply);
        reply=new Presence();
        reply.setTo(presence.getFrom());
        reply.setFrom(presence.getTo());
        reply.setType(Presence.Type.unavailable);
        componentManager.sendPacket(this,reply);
      }
 else       if (Presence.Type.probe == presence.getType()) {
        Presence reply=new Presence();
        reply.setTo(presence.getFrom());
        reply.setFrom(presence.getTo());
        componentManager.sendPacket(this,reply);
      }
    }
 catch (    ComponentException e) {
      componentManager.getLog().error(e);
    }
  }
}
