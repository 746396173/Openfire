{
  if (packet == null) {
    throw new NullPointerException();
  }
  ClientSession session=sessionManager.getSession(packet.getFrom());
  try {
    InterceptorManager.getInstance().invokeInterceptors(packet,session,true,false);
    if (session == null || session.getStatus() == Session.STATUS_AUTHENTICATED) {
      JID recipientJID=packet.getTo();
      if (recipientJID == null) {
        recipientJID=packet.getFrom().asBareJID();
      }
      if (recipientJID.getNode() == null && recipientJID.getResource() == null && serverName.equals(recipientJID.getDomain())) {
        if (packet.getElement().element("addresses") != null) {
          multicastRouter.route(packet);
        }
 else {
          sendMessageToAdmins(packet);
        }
        return;
      }
      boolean isAcceptable=true;
      if (session instanceof LocalClientSession) {
        Message dummyMessage=packet.createCopy();
        dummyMessage.setFrom(packet.getTo());
        dummyMessage.setTo(packet.getFrom());
        if (!((LocalClientSession)session).canProcess(dummyMessage)) {
          packet.setTo(session.getAddress());
          packet.setFrom((JID)null);
          packet.setError(PacketError.Condition.not_acceptable);
          session.process(packet);
          isAcceptable=false;
        }
      }
      if (isAcceptable) {
        boolean isPrivate=packet.getElement().element(QName.get("private","urn:xmpp:carbons:2")) != null;
        try {
          routingTable.routePacket(recipientJID,packet,false);
        }
 catch (        Exception e) {
          log.error("Failed to route packet: " + packet.toXML(),e);
          routingFailed(recipientJID,packet);
        }
        if (packet.getType() == Message.Type.chat && !isPrivate) {
          List<JID> routes=routingTable.getRoutes(packet.getFrom().asBareJID(),null);
          for (          JID route : routes) {
            if (!route.equals(session.getAddress())) {
              ClientSession clientSession=sessionManager.getSession(route);
              if (clientSession != null && clientSession.isMessageCarbonsEnabled()) {
                Message message=new Message();
                message.setType(packet.getType());
                message.setFrom(packet.getFrom().asBareJID());
                message.setTo(route);
                message.addExtension(new Sent(new Forwarded(packet)));
                clientSession.process(message);
              }
            }
          }
        }
      }
    }
 else {
      packet.setTo(session.getAddress());
      packet.setFrom((JID)null);
      packet.setError(PacketError.Condition.not_authorized);
      session.process(packet);
    }
    InterceptorManager.getInstance().invokeInterceptors(packet,session,true,true);
  }
 catch (  PacketRejectedException e) {
    if (session != null && e.getRejectionMessage() != null && e.getRejectionMessage().trim().length() > 0) {
      Message reply=new Message();
      reply.setID(packet.getID());
      reply.setTo(session.getAddress());
      reply.setFrom(packet.getTo());
      reply.setType(packet.getType());
      reply.setThread(packet.getThread());
      reply.setBody(e.getRejectionMessage());
      session.process(reply);
    }
  }
}
