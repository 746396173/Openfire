{
  ClientSession session=sessionManager.getSession(packet.getFrom());
  IQ reply=null;
  if (session == null) {
    Log.error("Error during registration. Session not found in " + sessionManager.getPreAuthenticatedKeys() + " for key "+ packet.getFrom());
    reply=IQ.createResultIQ(packet);
    reply.setChildElement(packet.getChildElement().createCopy());
    reply.setError(PacketError.Condition.internal_server_error);
    return reply;
  }
  if (IQ.Type.get.equals(packet.getType())) {
    if (!registrationEnabled) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.forbidden);
    }
 else {
      reply=IQ.createResultIQ(packet);
      if (session.getStatus() == Session.STATUS_AUTHENTICATED) {
        try {
          User user=userManager.getUser(session.getUsername());
          Element currentRegistration=probeResult.createCopy();
          currentRegistration.addElement("registered");
          currentRegistration.element("username").setText(user.getUsername());
          currentRegistration.element("password").setText("");
          currentRegistration.element("email").setText(user.getEmail() == null ? "" : user.getEmail());
          currentRegistration.element("name").setText(user.getName());
          Element form=currentRegistration.element(QName.get("x","jabber:x:data"));
          Iterator fields=form.elementIterator("field");
          Element field;
          while (fields.hasNext()) {
            field=(Element)fields.next();
            if ("username".equals(field.attributeValue("var"))) {
              field.addElement("value").addText(user.getUsername());
            }
 else             if ("name".equals(field.attributeValue("var"))) {
              field.addElement("value").addText(user.getName());
            }
 else             if ("email".equals(field.attributeValue("var"))) {
              field.addElement("value").addText(user.getEmail() == null ? "" : user.getEmail());
            }
          }
          reply.setChildElement(currentRegistration);
        }
 catch (        UserNotFoundException e) {
          reply.setChildElement(probeResult.createCopy());
        }
      }
 else {
        reply.setTo((JID)null);
        reply.setChildElement(probeResult.createCopy());
      }
    }
  }
 else   if (IQ.Type.set.equals(packet.getType())) {
    try {
      Element iqElement=packet.getChildElement();
      if (iqElement.element("remove") != null) {
        if (!registrationEnabled) {
          reply=IQ.createResultIQ(packet);
          reply.setChildElement(packet.getChildElement().createCopy());
          reply.setError(PacketError.Condition.forbidden);
        }
 else {
          if (session.getStatus() == Session.STATUS_AUTHENTICATED) {
            User user=userManager.getUser(session.getUsername());
            userManager.deleteUser(user);
            rosterManager.deleteRoster(session.getAddress());
            GroupManager.getInstance().deleteUser(user);
            reply=IQ.createResultIQ(packet);
            session.process(reply);
            Thread.sleep(10);
            final StreamError error=new StreamError(StreamError.Condition.not_authorized);
            for (            ClientSession sess : sessionManager.getSessions(user.getUsername())) {
              sess.deliverRawText(error.toXML());
              sess.close();
            }
            reply=null;
          }
 else {
            throw new UnauthorizedException();
          }
        }
      }
 else {
        String username;
        String password=null;
        String email=null;
        String name=null;
        User newUser;
        XDataFormImpl registrationForm;
        FormField field;
        Element formElement=iqElement.element("x");
        if (formElement != null) {
          registrationForm=new XDataFormImpl();
          registrationForm.parse(formElement);
          Iterator<String> values=registrationForm.getField("username").getValues();
          username=(values.hasNext() ? values.next() : " ");
          field=registrationForm.getField("password");
          if (field != null) {
            values=field.getValues();
            password=(values.hasNext() ? values.next() : " ");
          }
          field=registrationForm.getField("email");
          if (field != null) {
            values=field.getValues();
            email=(values.hasNext() ? values.next() : " ");
          }
          field=registrationForm.getField("name");
          if (field != null) {
            values=field.getValues();
            name=(values.hasNext() ? values.next() : " ");
          }
        }
 else {
          username=iqElement.elementText("username");
          password=iqElement.elementText("password");
          email=iqElement.elementText("email");
          name=iqElement.elementText("name");
        }
        if (email == null || "".equals(email)) {
          email=" ";
        }
        if (username != null) {
          Stringprep.nodeprep(username);
        }
        if (session.getStatus() == Session.STATUS_AUTHENTICATED) {
          boolean onlyPassword=false;
          if (iqElement.elements().size() == 2 && iqElement.element("username") != null && iqElement.element("password") != null) {
            onlyPassword=true;
          }
          if (password != null && !canChangePassword) {
            reply=IQ.createResultIQ(packet);
            reply.setChildElement(packet.getChildElement().createCopy());
            reply.setError(PacketError.Condition.forbidden);
            return reply;
          }
 else           if (!onlyPassword && !registrationEnabled) {
            reply=IQ.createResultIQ(packet);
            reply.setChildElement(packet.getChildElement().createCopy());
            reply.setError(PacketError.Condition.forbidden);
            return reply;
          }
 else {
            User user=userManager.getUser(session.getUsername());
            if (user.getUsername().equalsIgnoreCase(username)) {
              if (password != null && password.trim().length() > 0) {
                user.setPassword(password);
              }
              if (!onlyPassword) {
                user.setEmail(email);
              }
              newUser=user;
            }
 else             if (password != null && password.trim().length() > 0) {
              newUser=userManager.createUser(username,password,null,email);
            }
 else {
              reply=IQ.createResultIQ(packet);
              reply.setChildElement(packet.getChildElement().createCopy());
              reply.setError(PacketError.Condition.not_acceptable);
              return reply;
            }
          }
        }
 else {
          if (!registrationEnabled) {
            reply=IQ.createResultIQ(packet);
            reply.setChildElement(packet.getChildElement().createCopy());
            reply.setError(PacketError.Condition.forbidden);
            return reply;
          }
 else           if (password == null || password.trim().length() == 0) {
            reply=IQ.createResultIQ(packet);
            reply.setChildElement(packet.getChildElement().createCopy());
            reply.setError(PacketError.Condition.not_acceptable);
            return reply;
          }
 else {
            newUser=userManager.createUser(username,password,null,email);
          }
        }
        if (newUser != null && name != null) {
          newUser.setName(name);
        }
        reply=IQ.createResultIQ(packet);
      }
    }
 catch (    UserAlreadyExistsException e) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.conflict);
    }
catch (    UserNotFoundException e) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.bad_request);
    }
catch (    StringprepException e) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.jid_malformed);
    }
catch (    IllegalArgumentException e) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.not_acceptable);
    }
catch (    UnsupportedOperationException e) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.not_allowed);
    }
catch (    Exception e) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.internal_server_error);
      Log.error(e);
    }
  }
  if (reply != null) {
    session.process(reply);
  }
  return null;
}
