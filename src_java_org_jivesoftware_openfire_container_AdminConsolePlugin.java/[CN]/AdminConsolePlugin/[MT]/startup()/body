{
  restartNeeded=false;
  certificateListener=new CertificateListener();
  CertificateManager.addListener(certificateListener);
  int serverThreads=JiveGlobals.getXMLProperty("adminConsole.serverThreads",2);
  adminPort=JiveGlobals.getXMLProperty("adminConsole.port",9090);
  adminSecurePort=JiveGlobals.getXMLProperty("adminConsole.securePort",9091);
  final QueuedThreadPool tp=new QueuedThreadPool();
  tp.setName("Jetty-QTP-AdminConsole");
  adminServer=new Server(tp);
  if (JMXManager.isEnabled()) {
    JMXManager jmx=JMXManager.getInstance();
    adminServer.addBean(jmx.getContainer());
  }
  if (adminPort > 0) {
    final HttpConfiguration httpConfig=new HttpConfiguration();
    httpConfig.setSendServerVersion(false);
    final ServerConnector httpConnector=new ServerConnector(adminServer,null,null,null,-1,serverThreads,new HttpConnectionFactory(httpConfig));
    String bindInterface=getBindInterface();
    httpConnector.setHost(bindInterface);
    httpConnector.setPort(adminPort);
    adminServer.addConnector(httpConnector);
  }
  sslEnabled=false;
  try {
    final IdentityStore identityStore=XMPPServer.getInstance().getCertificateStoreManager().getIdentityStore(ConnectionType.WEBADMIN);
    if (adminSecurePort > 0) {
      if (identityStore.getAllCertificates().isEmpty()) {
        Log.warn("Admin console: Identity store does not have any certificates. HTTPS will be unavailable.");
      }
 else {
        if (!identityStore.containsDomainCertificate("RSA")) {
          Log.warn("Admin console: Using RSA certificates but they are not valid for the hosted domain");
        }
        final ConnectionManagerImpl connectionManager=((ConnectionManagerImpl)XMPPServer.getInstance().getConnectionManager());
        final ConnectionConfiguration configuration=connectionManager.getListener(ConnectionType.WEBADMIN,true).generateConnectionConfiguration();
        final SslContextFactory sslContextFactory=new EncryptionArtifactFactory(configuration).getSslContextFactory();
        final ServerConnector httpsConnector;
        if ("npn".equals(JiveGlobals.getXMLProperty("spdy.protocol",""))) {
          httpsConnector=new HTTPSPDYServerConnector(adminServer,sslContextFactory);
        }
 else {
          final HttpConfiguration httpsConfig=new HttpConfiguration();
          httpsConfig.setSendServerVersion(false);
          httpsConfig.setSecureScheme("https");
          httpsConfig.setSecurePort(adminSecurePort);
          httpsConfig.addCustomizer(new SecureRequestCustomizer());
          final HttpConnectionFactory httpConnectionFactory=new HttpConnectionFactory(httpsConfig);
          final SslConnectionFactory sslConnectionFactory=new SslConnectionFactory(sslContextFactory,org.eclipse.jetty.http.HttpVersion.HTTP_1_1.toString());
          httpsConnector=new ServerConnector(adminServer,null,null,null,-1,serverThreads,sslConnectionFactory,httpConnectionFactory);
        }
        final String bindInterface=getBindInterface();
        httpsConnector.setHost(bindInterface);
        httpsConnector.setPort(adminSecurePort);
        adminServer.addConnector(httpsConnector);
        sslEnabled=true;
      }
    }
  }
 catch (  Exception e) {
    Log.error("An exception occured while trying to make available the admin console via HTTPS.",e);
  }
  if (adminServer.getConnectors() == null || adminServer.getConnectors().length == 0) {
    adminServer=null;
    log(LocaleUtils.getLocalizedString("admin.console.warning"));
    return;
  }
  HandlerCollection collection=new HandlerCollection();
  adminServer.setHandler(collection);
  collection.setHandlers(new Handler[]{contexts,new DefaultHandler()});
  try {
    adminServer.start();
  }
 catch (  Exception e) {
    Log.error("Could not start admin console server",e);
  }
  logAdminConsolePorts();
}
