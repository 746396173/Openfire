{
  if (!isConfigured()) {
    Iterator<Message> history=roomHistory.getMessageHistory();
    while (history.hasNext()) {
      joinRole.send(history.next());
    }
  }
 else {
    Message changedSubject=roomHistory.getChangedSubject();
    boolean addChangedSubject=(changedSubject != null) ? true : false;
    if (getMaxChars() == 0) {
      if (addChangedSubject) {
        joinRole.send(changedSubject);
      }
      return;
    }
    int accumulatedChars=0;
    int accumulatedStanzas=0;
    Element delayInformation;
    LinkedList<Message> historyToSend=new LinkedList<>();
    ListIterator<Message> iterator=roomHistory.getReverseMessageHistory();
    while (iterator.hasPrevious()) {
      Message message=iterator.previous();
      String text=message.getBody() == null ? message.getSubject() : message.getBody();
      if (text == null) {
        continue;
      }
      accumulatedChars+=text.length();
      if (getMaxChars() > -1 && accumulatedChars > getMaxChars()) {
        break;
      }
      accumulatedStanzas++;
      if (getMaxStanzas() > -1 && accumulatedStanzas > getMaxStanzas()) {
        break;
      }
      if (getSeconds() > -1 || getSince() != null) {
        delayInformation=message.getChildElement("x","jabber:x:delay");
        try {
          Date delayedDate=xmppDateTime.parseString(delayInformation.attributeValue("stamp"));
          if (getSince() != null && delayedDate != null && delayedDate.before(getSince())) {
            break;
          }
          if (getSeconds() > -1) {
            Date current=new Date();
            long diff=(current.getTime() - delayedDate.getTime()) / 1000;
            if (getSeconds() <= diff) {
              break;
            }
          }
        }
 catch (        Exception e) {
          Log.error("Error parsing date from historic message",e);
        }
      }
      if (addChangedSubject) {
        if (changedSubject != null && changedSubject.equals(message)) {
          addChangedSubject=false;
        }
      }
      historyToSend.addFirst(message);
    }
    if (addChangedSubject) {
      historyToSend.addFirst(changedSubject);
    }
    for (    Object aHistoryToSend : historyToSend) {
      joinRole.send((Message)aHistoryToSend);
    }
  }
}
