{
  Presence presence=(Presence)xmppPacket;
  try {
    JID senderJID=presence.getFrom();
    JID recipientJID=presence.getTo();
    Presence.Type type=presence.getType();
    try {
      Roster senderRoster=getRoster(senderJID);
      if (senderRoster != null) {
        manageSub(recipientJID,true,type,senderRoster);
      }
      Roster recipientRoster=getRoster(recipientJID);
      boolean recipientSubChanged=false;
      if (recipientRoster != null) {
        recipientSubChanged=manageSub(senderJID,false,type,recipientRoster);
      }
      if (!(type == Presence.Type.subscribed && recipientRoster != null && !recipientSubChanged)) {
        if (type == Presence.Type.subscribe && recipientRoster != null && !recipientSubChanged) {
          try {
            RosterItem.SubType subType=recipientRoster.getRosterItem(senderJID).getSubStatus();
            if (subType == RosterItem.SUB_FROM || subType == RosterItem.SUB_BOTH) {
              Presence reply=new Presence();
              reply.setTo(senderJID);
              reply.setFrom(recipientJID);
              reply.setType(Presence.Type.subscribed);
              deliverer.deliver(reply);
              return;
            }
          }
 catch (          UserNotFoundException e) {
          }
        }
        List<ChannelHandler> handlers=routingTable.getRoutes(recipientJID);
        if (!handlers.isEmpty()) {
          for (          ChannelHandler handler : handlers) {
            Presence presenteToSend=presence.createCopy();
            presenteToSend.setFrom(senderJID.toBareJID());
            handler.process(presenteToSend);
          }
        }
 else {
          deliverer.deliver(presence.createCopy());
        }
        if (type == Presence.Type.subscribed) {
          JID prober=localServer.isLocal(recipientJID) ? new JID(recipientJID.toBareJID()) : recipientJID;
          presenceManager.probePresence(prober,senderJID);
        }
      }
      if (type == Presence.Type.unsubscribed) {
        presenceManager.sendUnavailableFromSessions(recipientJID,senderJID);
      }
    }
 catch (    SharedGroupException e) {
      Presence result=presence.createCopy();
      JID sender=result.getFrom();
      result.setFrom(presence.getTo());
      result.setTo(sender);
      result.setError(PacketError.Condition.not_acceptable);
      deliverer.deliver(result);
    }
  }
 catch (  Exception e) {
    Log.error(LocaleUtils.getLocalizedString("admin.error"),e);
  }
}
