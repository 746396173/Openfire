{
  try {
    RosterItem item=getRosterItem(deletedUser);
    int groupSize=item.getSharedGroups().size() + item.getInvisibleSharedGroups().size();
    if (item.isOnlyShared() && groupSize == 1) {
      if (!item.getSharedGroups().contains(sharedGroup) && !item.getInvisibleSharedGroups().contains(sharedGroup)) {
        return;
      }
      deleteRosterItem(deletedUser,false);
    }
 else {
      item.removeSharedGroup(sharedGroup);
      if (item.isOnlyShared()) {
        Collection<Group> userGroups=GroupManager.getInstance().getGroups(getUserJID());
        Collection<Group> sharedGroups=new ArrayList<>();
        sharedGroups.addAll(item.getSharedGroups());
        if (rosterManager.hasMutualVisibility(getUsername(),userGroups,deletedUser,sharedGroups)) {
          item.setSubStatus(RosterItem.SUB_BOTH);
        }
 else         if (item.getSharedGroups().isEmpty() && !item.getInvisibleSharedGroups().isEmpty()) {
          item.setSubStatus(RosterItem.SUB_FROM);
        }
 else {
          item.setSubStatus(RosterItem.SUB_TO);
        }
        RosterEventDispatcher.contactUpdated(this,item);
      }
 else {
        RosterEventDispatcher.contactDeleted(this,item);
      }
      broadcast(item,false);
    }
  }
 catch (  SharedGroupException e) {
  }
catch (  UserNotFoundException e) {
  }
}
