{
  if (groups != null && !groups.isEmpty()) {
    for (    String groupDisplayName : groups) {
      Collection<Group> groupsWithProp=GroupManager.getInstance().search("sharedRoster.displayName",groupDisplayName);
      Iterator<Group> itr=groupsWithProp.iterator();
      while (itr.hasNext()) {
        Group group=itr.next();
        String showInRoster=group.getProperties().get("sharedRoster.showInRoster");
        if (showInRoster != null && !showInRoster.equals("nobody")) {
          throw new SharedGroupException("Cannot add an item to a shared group");
        }
      }
    }
  }
  org.xmpp.packet.Roster roster=new org.xmpp.packet.Roster();
  roster.setType(IQ.Type.set);
  org.xmpp.packet.Roster.Item item=roster.addItem(user,nickname,null,org.xmpp.packet.Roster.Subscription.none,groups);
  RosterItem rosterItem=new RosterItem(item);
  persistent=RosterEventDispatcher.addingContact(this,rosterItem,persistent);
  if (persistent) {
    rosterItem=rosterItemProvider.createItem(username,rosterItem);
  }
  if (push) {
    broadcast(roster);
  }
  rosterItems.put(user.toBareJID(),rosterItem);
  RosterEventDispatcher.contactAdded(this,rosterItem);
  return rosterItem;
}
