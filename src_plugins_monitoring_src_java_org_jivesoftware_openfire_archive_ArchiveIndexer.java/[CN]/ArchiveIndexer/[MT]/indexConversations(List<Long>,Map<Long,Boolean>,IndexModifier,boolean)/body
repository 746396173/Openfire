{
  if (conversationIDs.isEmpty()) {
    return -1;
  }
  int indexedConversations=0;
  long newestDate=-1;
  final int OP_SIZE=250;
  int n=((conversationIDs.size() - 1) / OP_SIZE);
  if (n == 0) {
    n=1;
  }
  for (int i=0; i < n; i++) {
    StringBuilder inSQL=new StringBuilder();
    inSQL.append(" (");
    int start=i * OP_SIZE;
    int end=(start + OP_SIZE > conversationIDs.size()) ? conversationIDs.size() : start + OP_SIZE;
    if (end > conversationIDs.size()) {
      end=conversationIDs.size();
    }
    inSQL.append(conversationIDs.get(start));
    for (int j=start + 1; j < end; j++) {
      inSQL.append(", ").append(conversationIDs.get(j));
    }
    inSQL.append(")");
    Connection con=null;
    PreparedStatement pstmt=null;
    ResultSet rs=null;
    try {
      con=DbConnectionManager.getConnection();
      pstmt=con.prepareStatement(CONVERSATION_MESSAGES.replaceAll("\\?",inSQL.toString()));
      rs=pstmt.executeQuery();
      long conversationID=-1;
      long date=-1;
      Set<String> jids=null;
      StringBuilder text=null;
      while (rs.next()) {
        long id=rs.getLong(1);
        if (id != conversationID) {
          if (conversationID != -1) {
            boolean external=externalMetaData.get(conversationID);
            indexDocument(writer,conversationID,external,date,jids,text.toString());
          }
          conversationID=id;
          date=rs.getLong(2);
          jids=new TreeSet<String>();
          jids.add(new JID(rs.getString(3)).toBareJID());
          jids.add(new JID(rs.getString(4)).toBareJID());
          text=new StringBuilder();
        }
        long msgDate=rs.getLong(2);
        if (msgDate < date) {
          date=msgDate;
        }
        if (msgDate > newestDate) {
          newestDate=msgDate;
        }
        text.append(DbConnectionManager.getLargeTextField(rs,5)).append("\n");
      }
      if (conversationID != -1) {
        boolean external=externalMetaData.get(conversationID);
        indexDocument(writer,conversationID,external,date,jids,text.toString());
      }
      if (indexRebuild) {
        indexedConversations++;
        rebuildFuture.setPercentageDone(indexedConversations / conversationIDs.size());
      }
    }
 catch (    SQLException sqle) {
      Log.error(sqle.getMessage(),sqle);
    }
 finally {
      DbConnectionManager.closeConnection(rs,pstmt,con);
    }
  }
  return newestDate;
}
