{
  AgentSession bestSession;
  if (initialAgent != null) {
    final AgentSessionList agentSessionList=queue.getAgentSessionList();
    for (    AgentSession agentSession : agentSessionList.getAgentSessions()) {
      String sessionAgent=agentSession.getAgent().getAgentJID().toBareJID();
      boolean match=sessionAgent.startsWith(initialAgent.toLowerCase());
      Workgroup workgroup=offer.getRequest().getWorkgroup();
      if (agentSession.isAvailableToChat() && agentSession.getCurrentChats(workgroup) < agentSession.getMaxChats(workgroup) && match) {
        bestSession=agentSession;
        Log.debug("RR - Initial agent: " + bestSession.getJID() + " will receive offer for request: "+ offer.getRequest());
        return bestSession;
      }
    }
  }
  final AgentSessionList agentSessionList=queue.getAgentSessionList();
  final List<AgentSession> possibleSessions=new ArrayList<AgentSession>();
  for (  AgentSession agentSession : agentSessionList.getAgentSessions()) {
    String sessionAgent=agentSession.getAgent().getAgentJID().toBareJID();
    boolean ignore=ignoreAgent != null && sessionAgent.startsWith(ignoreAgent.toLowerCase());
    if (!ignore && validateAgent(agentSession,offer)) {
      possibleSessions.add(agentSession);
    }
  }
  if (possibleSessions.size() > 0) {
    AgentSession s=agentSelector.bestAgentFrom(possibleSessions,offer);
    Log.debug("RR - Agent SELECTED: " + s.getJID() + " for receiving offer for request: "+ offer.getRequest());
    return s;
  }
  return null;
}
