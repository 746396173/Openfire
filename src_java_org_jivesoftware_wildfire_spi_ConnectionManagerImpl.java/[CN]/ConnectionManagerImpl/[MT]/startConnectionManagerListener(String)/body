{
  if (isConnectionManagerListenerEnabled()) {
    int port=getConnectionManagerListenerPort();
    multiplexerSocketAcceptor=buildSocketAcceptor();
    ExecutorThreadModel threadModel=ExecutorThreadModel.getInstance("connectionManager");
    int eventThreads=JiveGlobals.getIntProperty("xmpp.multiplex.processing.threads",16);
    ThreadPoolExecutor eventExecutor=(ThreadPoolExecutor)threadModel.getExecutor();
    eventExecutor.setCorePoolSize(eventThreads + 1);
    eventExecutor.setMaximumPoolSize(eventThreads + 1);
    eventExecutor.setKeepAliveTime(60,TimeUnit.SECONDS);
    multiplexerSocketAcceptor.getDefaultConfig().setThreadModel(threadModel);
    multiplexerSocketAcceptor.getFilterChain().addFirst("xmpp",new ProtocolCodecFilter(new XMPPCodecFactory()));
    try {
      String interfaceName=JiveGlobals.getXMLProperty("xmpp.socket.network.interface");
      InetAddress bindInterface=null;
      if (interfaceName != null) {
        if (interfaceName.trim().length() > 0) {
          bindInterface=InetAddress.getByName(interfaceName);
        }
      }
      multiplexerSocketAcceptor.bind(new InetSocketAddress(bindInterface,port),new MultiplexerConnectionHandler(serverName));
      ports.add(new ServerPort(port,serverName,localIPAddress,false,null,ServerPort.Type.connectionManager));
      List<String> params=new ArrayList<String>();
      params.add(Integer.toString(port));
      Log.info(LocaleUtils.getLocalizedString("startup.multiplexer",params));
    }
 catch (    Exception e) {
      System.err.println("Error starting multiplexer listener on port " + port + ": "+ e.getMessage());
      Log.error(LocaleUtils.getLocalizedString("admin.error.socket-setup"),e);
    }
  }
}
