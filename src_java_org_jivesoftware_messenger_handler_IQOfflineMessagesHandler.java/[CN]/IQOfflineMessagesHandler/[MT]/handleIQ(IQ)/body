{
  IQ reply=IQ.createResultIQ(packet);
  Element offlineRequest=packet.getChildElement();
  if (offlineRequest.element("purge") != null) {
    messageStore.deleteMessages(packet.getFrom().getNode());
  }
 else   if (offlineRequest.element("fetch") != null) {
    stopOfflineFlooding(packet.getFrom());
    ClientSession session=sessionManager.getSession(packet.getFrom());
    for (    OfflineMessage offlineMessage : messageStore.getMessages(packet.getFrom().getNode(),false)) {
      sendOfflineMessage(offlineMessage,session);
    }
  }
 else {
    for (Iterator it=offlineRequest.elementIterator("item"); it.hasNext(); ) {
      Element item=(Element)it.next();
      Date creationDate=null;
synchronized (dateFormat) {
        try {
          creationDate=dateFormat.parse(item.attributeValue("node"));
        }
 catch (        ParseException e) {
          Log.error("Error parsing date",e);
        }
      }
      if ("view".equals(item.attributeValue("action"))) {
        OfflineMessage offlineMsg=messageStore.getMessage(packet.getFrom().getNode(),creationDate);
        if (offlineMsg != null) {
          ClientSession session=sessionManager.getSession(packet.getFrom());
          sendOfflineMessage(offlineMsg,session);
        }
      }
 else       if ("remove".equals(item.attributeValue("action"))) {
        messageStore.deleteMessage(packet.getFrom().getNode(),creationDate);
      }
    }
  }
  return reply;
}
