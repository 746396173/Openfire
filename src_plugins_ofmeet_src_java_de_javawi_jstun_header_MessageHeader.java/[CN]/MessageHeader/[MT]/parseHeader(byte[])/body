{
  try {
    MessageHeader mh=new MessageHeader();
    byte[] typeArray=new byte[2];
    System.arraycopy(data,0,typeArray,0,2);
    int type=Utility.twoBytesToInteger(typeArray);
switch (type) {
case BINDINGREQUEST:
      mh.setType(MessageHeaderType.BindingRequest);
    logger.finer("Binding Request received.");
  break;
case BINDINGRESPONSE:
mh.setType(MessageHeaderType.BindingResponse);
logger.finer("Binding Response received.");
break;
case BINDINGERRORRESPONSE:
mh.setType(MessageHeaderType.BindingErrorResponse);
logger.finer("Binding Error Response received.");
break;
case SHAREDSECRETREQUEST:
mh.setType(MessageHeaderType.SharedSecretRequest);
logger.finer("Shared Secret Request received.");
break;
case SHAREDSECRETRESPONSE:
mh.setType(MessageHeaderType.SharedSecretResponse);
logger.finer("Shared Secret Response received.");
break;
case SHAREDSECRETERRORRESPONSE:
mh.setType(MessageHeaderType.SharedSecretErrorResponse);
logger.finer("Shared Secret Error Response received.");
break;
default :
throw new MessageHeaderParsingException("Message type " + type + "is not supported");
}
return mh;
}
 catch (UtilityException ue) {
throw new MessageHeaderParsingException("Parsing error");
}
}
