{
  IQ reply=null;
  Element iq=packet.getChildElement();
  try {
    JID from=packet.getFrom();
    String bareJID=from.toBareJID();
    if (!isOwner(bareJID,workgroup)) {
      reply=IQ.createResultIQ(packet);
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(new PacketError(PacketError.Condition.forbidden));
      workgroup.send(reply);
      return;
    }
    WorkgroupManager workgroupManager=WorkgroupManager.getInstance();
    if (iq.element("makeOwner") != null) {
      String sessionID=iq.element("makeOwner").attributeValue("sessionID");
      final String serviceName=workgroupManager.getMUCServiceName();
      final String roomName=sessionID + "@" + serviceName;
      IQ iqPacket=new IQ(IQ.Type.set);
      iqPacket.setTo(roomName);
      iqPacket.setFrom(workgroup.getFullJID());
      Element query=iqPacket.setChildElement("query","http://jabber.org/protocol/muc#owner");
      Element item=query.addElement("item");
      item.addAttribute("affiliation","owner");
      item.addAttribute("jid",packet.getFrom().toBareJID());
      workgroup.send(iqPacket);
    }
    reply=IQ.createResultIQ(packet);
  }
 catch (  Exception e) {
    reply=IQ.createResultIQ(packet);
    reply.setChildElement(packet.getChildElement().createCopy());
    reply.setError(new PacketError(PacketError.Condition.item_not_found));
  }
  workgroup.send(reply);
}
