def GenerateOutput(target_list, target_dicts, data, params):
    target_dicts = gyp.xcode_emulation.CloneConfigurationForDeviceAndEmulator(target_dicts)
    user_config = params.get('generator_flags', {}).get('config', None)
    if (gyp.common.GetFlavor(params) == 'win'):
        (target_list, target_dicts) = MSVSUtil.ShardTargets(target_list, target_dicts)
        (target_list, target_dicts) = MSVSUtil.InsertLargePdbShims(target_list, target_dicts, generator_default_variables)
    if user_config:
        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)
    else:
        config_names = target_dicts[target_list[0]]['configurations'].keys()
        if params['parallel']:
            try:
                pool = multiprocessing.Pool(len(config_names))
                arglists = []
                for config_name in config_names:
                    arglists.append((target_list, target_dicts, data, params, config_name))
                pool.map(CallGenerateOutputForConfig, arglists)
            except KeyboardInterrupt as e:
                pool.terminate()
                raise e
        else:
            for config_name in config_names:
                GenerateOutputForConfig(target_list, target_dicts, data, params, config_name)
