def GetDefaultConcurrentLinks():
    'Returns a best-guess for a number of concurrent links.'
    if (sys.platform in ('win32', 'cygwin')):
        import ctypes


        class MEMORYSTATUSEX(ctypes.Structure):
            _fields_ = [('dwLength', ctypes.c_ulong), ('dwMemoryLoad', ctypes.c_ulong), ('ullTotalPhys', ctypes.c_ulonglong), ('ullAvailPhys', ctypes.c_ulonglong), ('ullTotalPageFile', ctypes.c_ulonglong), ('ullAvailPageFile', ctypes.c_ulonglong), ('ullTotalVirtual', ctypes.c_ulonglong), ('ullAvailVirtual', ctypes.c_ulonglong), ('sullAvailExtendedVirtual', ctypes.c_ulonglong)]
        stat = MEMORYSTATUSEX()
        stat.dwLength = ctypes.sizeof(stat)
        ctypes.windll.kernel32.GlobalMemoryStatusEx(ctypes.byref(stat))
        mem_limit = max(1, (stat.ullTotalPhys / (4 * (2 ** 30))))
        hard_cap = max(1, int(os.getenv('GYP_LINK_CONCURRENCY_MAX', (2 ** 32))))
        return min(mem_limit, hard_cap)
    elif sys.platform.startswith('linux'):
        with open('/proc/meminfo') as meminfo:
            memtotal_re = re.compile('^MemTotal:\\s*(\\d*)\\s*kB')
            for line in meminfo:
                match = memtotal_re.match(line)
                if (not match):
                    continue
                return max(1, (int(match.group(1)) / (8 * (2 ** 20))))
        return 1
    elif (sys.platform == 'darwin'):
        try:
            avail_bytes = int(subprocess.check_output(['sysctl', '-n', 'hw.memsize']))
            return max(1, (avail_bytes / (4 * (2 ** 30))))
        except:
            return 1
    else:
        return 1
