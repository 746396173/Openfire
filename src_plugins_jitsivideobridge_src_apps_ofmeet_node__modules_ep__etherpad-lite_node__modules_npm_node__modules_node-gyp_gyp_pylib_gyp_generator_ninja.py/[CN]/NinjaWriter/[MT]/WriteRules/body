def WriteRules(self, rules, extra_sources, prebuild, mac_bundle_resources, extra_mac_bundle_resources):
    env = self.GetSortedXcodeEnv()
    all_outputs = []
    for rule in rules:
        name = ('%s_%s' % (rule['rule_name'], hashlib.md5(self.qualified_target).hexdigest()))
        if (('action' not in rule) and (not rule.get('rule_sources', []))):
            continue
        args = rule['action']
        description = self.GenerateDescription('RULE', rule.get('message', None), (('%s ' + generator_default_variables['RULE_INPUT_PATH']) % name))
        is_cygwin = (self.msvs_settings.IsRuleRunUnderCygwin(rule) if (self.flavor == 'win') else False)
        (rule_name, args) = self.WriteNewNinjaRule(name, args, description, is_cygwin, env=env)
        special_locals = ('source', 'root', 'dirname', 'ext', 'name')
        needed_variables = set(['source'])
        for argument in args:
            for var in special_locals:
                if (('${%s}' % var) in argument):
                    needed_variables.add(var)

        def cygwin_munge(path):
            if is_cygwin:
                return path.replace('\\', '/')
            return path
        for source in rule.get('rule_sources', []):
            source = os.path.normpath(source)
            (dirname, basename) = os.path.split(source)
            (root, ext) = os.path.splitext(basename)
            outputs = [self.ExpandRuleVariables(o, root, dirname, source, ext, basename) for o in rule['outputs']]
            inputs = [self.ExpandRuleVariables(i, root, dirname, source, ext, basename) for i in rule.get('inputs', [])]
            if int(rule.get('process_outputs_as_sources', False)):
                extra_sources += outputs
            was_mac_bundle_resource = (source in mac_bundle_resources)
            if (was_mac_bundle_resource or int(rule.get('process_outputs_as_mac_bundle_resources', False))):
                extra_mac_bundle_resources += outputs
                if was_mac_bundle_resource:
                    mac_bundle_resources.remove(source)
            extra_bindings = []
            for var in needed_variables:
                if (var == 'root'):
                    extra_bindings.append(('root', cygwin_munge(root)))
                elif (var == 'dirname'):
                    dirname_expanded = self.ExpandSpecial(dirname, self.base_to_build)
                    extra_bindings.append(('dirname', cygwin_munge(dirname_expanded)))
                elif (var == 'source'):
                    source_expanded = self.ExpandSpecial(source, self.base_to_build)
                    extra_bindings.append(('source', cygwin_munge(source_expanded)))
                elif (var == 'ext'):
                    extra_bindings.append(('ext', ext))
                elif (var == 'name'):
                    extra_bindings.append(('name', cygwin_munge(basename)))
                else:
                    assert (var == None), repr(var)
            inputs = [self.GypPathToNinja(i, env) for i in inputs]
            outputs = [self.GypPathToNinja(o, env) for o in outputs]
            extra_bindings.append(('unique_name', hashlib.md5(outputs[0]).hexdigest()))
            self.ninja.build(outputs, rule_name, self.GypPathToNinja(source), implicit=inputs, order_only=prebuild, variables=extra_bindings)
            all_outputs.extend(outputs)
    return all_outputs
