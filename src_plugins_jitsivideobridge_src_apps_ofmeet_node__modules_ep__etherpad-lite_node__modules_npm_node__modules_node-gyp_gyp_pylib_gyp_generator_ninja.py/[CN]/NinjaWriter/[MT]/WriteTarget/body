def WriteTarget(self, spec, config_name, config, link_deps, compile_deps):
    extra_link_deps = any((self.target_outputs.get(dep).Linkable() for dep in spec.get('dependencies', []) if (dep in self.target_outputs)))
    if ((spec['type'] == 'none') or ((not link_deps) and (not extra_link_deps))):
        self.target.binary = compile_deps
        self.target.type = 'none'
    elif (spec['type'] == 'static_library'):
        self.target.binary = self.ComputeOutput(spec)
        if ((self.flavor not in ('mac', 'openbsd', 'win')) and (not self.is_standalone_static_library)):
            self.ninja.build(self.target.binary, 'alink_thin', link_deps, order_only=compile_deps)
        else:
            variables = []
            if self.xcode_settings:
                libtool_flags = self.xcode_settings.GetLibtoolflags(config_name)
                if libtool_flags:
                    variables.append(('libtool_flags', libtool_flags))
            if self.msvs_settings:
                libflags = self.msvs_settings.GetLibFlags(config_name, self.GypPathToNinja)
                variables.append(('libflags', libflags))
            if ((self.flavor != 'mac') or (len(self.archs) == 1)):
                self.AppendPostbuildVariable(variables, spec, self.target.binary, self.target.binary)
                self.ninja.build(self.target.binary, 'alink', link_deps, order_only=compile_deps, variables=variables)
            else:
                inputs = []
                for arch in self.archs:
                    output = self.ComputeOutput(spec, arch)
                    self.arch_subninjas[arch].build(output, 'alink', link_deps[arch], order_only=compile_deps, variables=variables)
                    inputs.append(output)
                self.AppendPostbuildVariable(variables, spec, self.target.binary, self.target.binary)
                self.ninja.build(self.target.binary, 'alink', inputs, variables=variables)
    else:
        self.target.binary = self.WriteLink(spec, config_name, config, link_deps)
    return self.target.binary
