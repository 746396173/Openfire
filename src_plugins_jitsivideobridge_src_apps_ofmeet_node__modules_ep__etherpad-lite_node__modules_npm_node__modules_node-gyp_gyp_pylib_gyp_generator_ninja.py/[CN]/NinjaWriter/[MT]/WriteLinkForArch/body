def WriteLinkForArch(self, ninja_file, spec, config_name, config, link_deps, arch=None):
    'Write out a link step. Fills out target.binary. '
    command = {'executable': 'link', 'loadable_module': 'solink_module', 'shared_library': 'solink', }[spec['type']]
    command_suffix = ''
    implicit_deps = set()
    solibs = set()
    if ('dependencies' in spec):
        extra_link_deps = set()
        for dep in spec['dependencies']:
            target = self.target_outputs.get(dep)
            if (not target):
                continue
            linkable = target.Linkable()
            if linkable:
                new_deps = []
                if ((self.flavor == 'win') and target.component_objs and self.msvs_settings.IsUseLibraryDependencyInputs(config_name)):
                    new_deps = target.component_objs
                elif ((self.flavor == 'win') and target.import_lib):
                    new_deps = [target.import_lib]
                elif target.UsesToc(self.flavor):
                    solibs.add(target.binary)
                    implicit_deps.add((target.binary + '.TOC'))
                else:
                    new_deps = [target.binary]
                for new_dep in new_deps:
                    if (new_dep not in extra_link_deps):
                        extra_link_deps.add(new_dep)
                        link_deps.append(new_dep)
            final_output = target.FinalOutput()
            if ((not linkable) or (final_output != target.binary)):
                implicit_deps.add(final_output)
    extra_bindings = []
    if (self.uses_cpp and (self.flavor != 'win')):
        extra_bindings.append(('ld', '$ldxx'))
    output = self.ComputeOutput(spec, arch)
    if ((arch is None) and (not self.is_mac_bundle)):
        self.AppendPostbuildVariable(extra_bindings, spec, output, output)
    is_executable = (spec['type'] == 'executable')
    env_ldflags = os.environ.get('LDFLAGS', '').split()
    if (self.flavor == 'mac'):
        ldflags = self.xcode_settings.GetLdflags(config_name, self.ExpandSpecial(generator_default_variables['PRODUCT_DIR']), self.GypPathToNinja, arch)
        ldflags = (env_ldflags + ldflags)
    elif (self.flavor == 'win'):
        manifest_name = self.GypPathToUniqueOutput(self.ComputeOutputFileName(spec))
        (ldflags, manifest_files) = self.msvs_settings.GetLdflags(config_name, self.GypPathToNinja, self.ExpandSpecial, manifest_name, is_executable)
        ldflags = (env_ldflags + ldflags)
        self.WriteVariableList(ninja_file, 'manifests', manifest_files)
        command_suffix = _GetWinLinkRuleNameSuffix(self.msvs_settings.IsEmbedManifest(config_name), self.msvs_settings.IsLinkIncremental(config_name))
        def_file = self.msvs_settings.GetDefFile(self.GypPathToNinja)
        if def_file:
            implicit_deps.add(def_file)
    else:
        ldflags = (env_ldflags + config.get('ldflags', []))
        if (is_executable and len(solibs)):
            rpath = 'lib/'
            if (self.toolset != 'target'):
                rpath += self.toolset
            ldflags.append(('-Wl,-rpath=\\$$ORIGIN/%s' % rpath))
            ldflags.append(('-Wl,-rpath-link=%s' % rpath))
    self.WriteVariableList(ninja_file, 'ldflags', gyp.common.uniquer(map(self.ExpandSpecial, ldflags)))
    library_dirs = config.get('library_dirs', [])
    if (self.flavor == 'win'):
        library_dirs = [self.msvs_settings.ConvertVSMacros(l, config_name) for l in library_dirs]
        library_dirs = [('/LIBPATH:' + QuoteShellArgument(self.GypPathToNinja(l), self.flavor)) for l in library_dirs]
    else:
        library_dirs = [QuoteShellArgument(('-L' + self.GypPathToNinja(l)), self.flavor) for l in library_dirs]
    libraries = gyp.common.uniquer(map(self.ExpandSpecial, spec.get('libraries', [])))
    if (self.flavor == 'mac'):
        libraries = self.xcode_settings.AdjustLibraries(libraries, config_name)
    elif (self.flavor == 'win'):
        libraries = self.msvs_settings.AdjustLibraries(libraries)
    self.WriteVariableList(ninja_file, 'libs', (library_dirs + libraries))
    linked_binary = output
    if (command in ('solink', 'solink_module')):
        extra_bindings.append(('soname', os.path.split(output)[1]))
        extra_bindings.append(('lib', gyp.common.EncodePOSIXShellArgument(output)))
        if (self.flavor == 'win'):
            extra_bindings.append(('dll', output))
            if ('/NOENTRY' not in ldflags):
                self.target.import_lib = (output + '.lib')
                extra_bindings.append(('implibflag', ('/IMPLIB:%s' % self.target.import_lib)))
                output = [output, self.target.import_lib]
        elif (not self.is_mac_bundle):
            output = [output, (output + '.TOC')]
        else:
            command = (command + '_notoc')
    if len(solibs):
        extra_bindings.append(('solibs', gyp.common.EncodePOSIXShellList(solibs)))
    ninja_file.build(output, (command + command_suffix), link_deps, implicit=list(implicit_deps), variables=extra_bindings)
    return linked_binary
