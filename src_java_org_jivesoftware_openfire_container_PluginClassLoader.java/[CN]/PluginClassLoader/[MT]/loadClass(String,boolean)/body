{
synchronized (getClassLoadingLock(name)) {
    if (Log.isDebugEnabled())     Log.debug("loadClass(" + name + ", "+ resolve+ ")");
    Class<?> clazz=null;
    clazz=findLoadedClass0(name);
    if (clazz != null) {
      if (Log.isDebugEnabled())       Log.debug("  Returning class from cache");
      if (resolve)       resolveClass(clazz);
      return (clazz);
    }
    clazz=findLoadedClass(name);
    if (clazz != null) {
      if (Log.isDebugEnabled())       Log.debug("  Returning class from cache");
      if (resolve)       resolveClass(clazz);
      return (clazz);
    }
    if (Log.isDebugEnabled())     Log.debug("  Searching local repositories");
    try {
      clazz=findClass(name);
      if (clazz != null) {
        if (Log.isDebugEnabled())         Log.debug("  Loading class from local repository");
        if (resolve)         resolveClass(clazz);
        return (clazz);
      }
    }
 catch (    ClassNotFoundException e) {
    }
    if (Log.isDebugEnabled())     Log.debug("  Delegating to parent classloader at end: " + parent);
    try {
      clazz=Class.forName(name,false,parent);
      if (clazz != null) {
        if (Log.isDebugEnabled())         Log.debug("  Loading class from parent");
        if (resolve)         resolveClass(clazz);
        return (clazz);
      }
    }
 catch (    ClassNotFoundException e) {
    }
  }
  throw new ClassNotFoundException(name);
}
