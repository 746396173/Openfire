{
  try {
    boolean isExistingSession=false;
    String username=URLDecoder.decode(ParamUtils.getParameter(request,"username"),"UTF-8");
    String password=URLDecoder.decode(ParamUtils.getParameter(request,"password"),"UTF-8");
    String resource=URLDecoder.decode(ParamUtils.getParameter(request,"resource"),"UTF-8");
    String register=ParamUtils.getParameter(request,"register");
    username=JID.escapeNode(username);
    String user=username.equals("null") ? resource : username;
    String digest=getMD5(user + password + resource);
    JID userJid=XMPPServer.getInstance().createJID(user,resource);
    Log.debug(digest + " : doWebSocketConnect : Digest created for " + userJid+ " : "+ register);
    LocalClientSession session=(LocalClientSession)SessionManager.getInstance().getSession(userJid);
    if (session != null) {
      isExistingSession=true;
      int conflictLimit=SessionManager.getInstance().getConflictKickLimit();
      if (conflictLimit == SessionManager.NEVER_KICK) {
        return false;
      }
      int conflictCount=session.incrementConflictCount();
      if (conflictCount > conflictLimit) {
        session.close();
        SessionManager.getInstance().removeSession(session);
      }
 else {
        return false;
      }
    }
    String remoteAddr=request.getRemoteAddr();
    if (JiveGlobals.getProperty("websockets.header.remoteaddr") != null && request.getHeader(JiveGlobals.getProperty("websockets.header.remoteaddr")) != null) {
      remoteAddr=request.getHeader(JiveGlobals.getProperty("websockets.header.remoteaddr"));
    }
    try {
      WSConnection wsConnection=new WSConnection(remoteAddr,request.getRemoteHost());
      socket.setWSConnection(digest,wsConnection);
      AuthToken authToken;
      try {
        if (username.equals("null") == false && OpenfireLoginService.authTokens.containsKey(username)) {
          authToken=OpenfireLoginService.authTokens.get(username);
        }
 else {
          if (username.equals("null") && password.equals("null")) {
            authToken=new AuthToken(resource,true);
          }
 else {
            if (isExistingSession && (password.equals("dummy") || password.equals("reuse"))) {
              authToken=new AuthToken(username);
            }
 else {
              try {
                String userName=JID.unescapeNode(username);
                UserManager userManager=XMPPServer.getInstance().getUserManager();
                if (register != null && register.equals("true") && XMPPServer.getInstance().getIQRegisterHandler().isInbandRegEnabled()) {
                  try {
                    userManager.getUser(userName);
                  }
 catch (                  UserNotFoundException e) {
                    userManager.createUser(userName,password,null,null);
                  }
                }
 else {
                  try {
                    userManager.getUser(userName);
                  }
 catch (                  UserNotFoundException e) {
                    Log.error("user not found " + userName,e);
                    return false;
                  }
                }
                authToken=AuthFactory.authenticate(userName,password);
              }
 catch (              UnauthorizedException e) {
                Log.error("An error occurred while attempting to create a web socket (USERNAME: " + username + " RESOURCE: "+ resource+ " ) : ",e);
                return false;
              }
catch (              Exception e) {
                Log.error("An error occurred while attempting to create a web socket : ",e);
                return false;
              }
            }
          }
        }
        session=SessionManager.getInstance().createClientSession(wsConnection,new BasicStreamID("url" + System.currentTimeMillis()));
        wsConnection.setRouter(new SessionPacketRouter(session));
        session.setAuthToken(authToken,resource);
        socket.setSession(session);
      }
 catch (      Exception e1) {
        Log.error("An error occurred while attempting to create a new socket " + e1);
        return false;
      }
      Log.debug("Created new socket for digest " + digest);
      Log.debug("Total websockets created : " + sockets.size());
    }
 catch (    Exception e) {
      Log.error("An error occurred while attempting to create a new socket " + e);
      return false;
    }
  }
 catch (  Exception e) {
    if (socket.getSession() != null)     SessionManager.getInstance().removeSession(socket.getSession());
    return false;
  }
  return true;
}
