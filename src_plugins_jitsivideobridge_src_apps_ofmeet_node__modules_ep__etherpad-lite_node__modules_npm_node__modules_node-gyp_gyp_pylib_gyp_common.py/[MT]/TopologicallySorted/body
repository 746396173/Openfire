def TopologicallySorted(graph, get_edges):
    "Topologically sort based on a user provided edge definition.\n\n  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n    cheaper than repeatedly calling get_edges.\n  Raises:\n    CycleError in the event of a cycle.\n  Example:\n    graph = {'a': '$(b) $(c)', 'b': 'hi', 'c': '$(b)'}\n    def GetEdges(node):\n      return re.findall(r'\\$\\(([^))]\\)', graph[node])\n    print TopologicallySorted(graph.keys(), GetEdges)\n    ==>\n    ['a', 'c', b']\n  "
    get_edges = memoize(get_edges)
    visited = set()
    visiting = set()
    ordered_nodes = []

    def Visit(node):
        if (node in visiting):
            raise CycleError(visiting)
        if (node in visited):
            return
        visited.add(node)
        visiting.add(node)
        for neighbor in get_edges(node):
            Visit(neighbor)
        visiting.remove(node)
        ordered_nodes.insert(0, node)
    for node in sorted(graph):
        Visit(node)
    return ordered_nodes
