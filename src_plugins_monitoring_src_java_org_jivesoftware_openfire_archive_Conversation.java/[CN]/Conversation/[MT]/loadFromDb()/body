{
  Connection con=null;
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(LOAD_CONVERSATION);
    pstmt.setLong(1,conversationID);
    rs=pstmt.executeQuery();
    if (!rs.next()) {
      throw new NotFoundException("Conversation not found: " + conversationID);
    }
    this.room=rs.getString(1) == null ? null : new JID(rs.getString(1));
    this.external=rs.getInt(2) == 1;
    this.startDate=new Date(rs.getLong(3));
    this.lastActivity=new Date(rs.getLong(4));
    this.messageCount=rs.getInt(5);
    rs.close();
    pstmt.close();
    this.participants=new ConcurrentHashMap<String,UserParticipations>();
    pstmt=con.prepareStatement(LOAD_PARTICIPANTS);
    pstmt.setLong(1,conversationID);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      String baredJID=rs.getString(1);
      String resource=rs.getString(2);
      JID fullJID=new JID("".equals(resource) ? baredJID : baredJID + "/" + resource);
      ConversationParticipation participation=new ConversationParticipation(new Date(rs.getLong(4)),rs.getString(3));
      if (rs.getLong(5) > 0) {
        participation.participationEnded(new Date(rs.getLong(5)));
      }
      UserParticipations userParticipations=participants.get(fullJID.toString());
      if (userParticipations == null) {
        userParticipations=new UserParticipations(room != null);
        participants.put(fullJID.toString(),userParticipations);
      }
      userParticipations.addParticipation(participation);
    }
  }
 catch (  SQLException sqle) {
    Log.error(sqle);
  }
 finally {
    DbConnectionManager.closeConnection(rs,pstmt,con);
  }
}
