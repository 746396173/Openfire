{
  if (room == null && !conversationManager.isMessageArchivingEnabled()) {
    return Collections.emptyList();
  }
 else   if (room != null && !conversationManager.isRoomArchivingEnabled()) {
    return Collections.emptyList();
  }
  List<ArchivedMessage> messages=new ArrayList<ArchivedMessage>();
  Connection con=null;
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(LOAD_MESSAGES);
    pstmt.setLong(1,getConversationID());
    rs=pstmt.executeQuery();
    while (rs.next()) {
      JID fromJID=new JID(rs.getString(1));
      String fromJIDResource=rs.getString(2);
      if (fromJIDResource != null && !"".equals(fromJIDResource)) {
        fromJID=new JID(rs.getString(1) + "/" + fromJIDResource);
      }
      JID toJID=new JID(rs.getString(3));
      String toJIDResource=rs.getString(4);
      if (toJIDResource != null && !"".equals(toJIDResource)) {
        toJID=new JID(rs.getString(1) + "/" + toJIDResource);
      }
      Date date=new Date(rs.getLong(5));
      String body=DbConnectionManager.getLargeTextField(rs,6);
      messages.add(new ArchivedMessage(conversationID,fromJID,toJID,date,body,false));
    }
  }
 catch (  SQLException sqle) {
    Log.error(sqle.getMessage(),sqle);
  }
 finally {
    DbConnectionManager.closeConnection(rs,pstmt,con);
  }
  if (room != null) {
    for (    Map.Entry<String,UserParticipations> entry : participants.entrySet()) {
      JID user=new JID(entry.getKey());
      boolean anonymous=false;
      String name;
      try {
        name=UserNameManager.getUserName(user);
      }
 catch (      UserNotFoundException e) {
        name=user.toBareJID();
        anonymous=true;
      }
      for (      ConversationParticipation participation : entry.getValue().getParticipations()) {
        if (participation.getJoined() == null) {
          Log.warn("Found muc participant with no join date in conversation: " + conversationID);
          continue;
        }
        JID jid=new JID(room + "/" + participation.getNickname());
        String joinBody;
        String leftBody;
        if (anonymous) {
          joinBody=LocaleUtils.getLocalizedString("muc.conversation.joined.anonymous",MonitoringConstants.NAME,Arrays.asList(participation.getNickname()));
          leftBody=LocaleUtils.getLocalizedString("muc.conversation.left.anonymous",MonitoringConstants.NAME,Arrays.asList(participation.getNickname()));
        }
 else {
          joinBody=LocaleUtils.getLocalizedString("muc.conversation.joined",MonitoringConstants.NAME,Arrays.asList(participation.getNickname(),name));
          leftBody=LocaleUtils.getLocalizedString("muc.conversation.left",MonitoringConstants.NAME,Arrays.asList(participation.getNickname(),name));
        }
        messages.add(new ArchivedMessage(conversationID,user,jid,participation.getJoined(),joinBody,true));
        if (participation.getLeft() != null) {
          messages.add(new ArchivedMessage(conversationID,user,jid,participation.getLeft(),leftBody,true));
        }
      }
    }
    Collections.sort(messages,new Comparator<ArchivedMessage>(){
      public int compare(      ArchivedMessage o1,      ArchivedMessage o2){
        return o1.getSentDate().compareTo(o2.getSentDate());
      }
    }
);
  }
  return messages;
}
