{
  KeyStore ksKeys=SSLConfig.getKeyStore();
  String keypass=SSLConfig.getKeyPassword();
  KeyStore ksTrust=SSLConfig.getTrustStore();
  String trustpass=SSLConfig.getTrustPassword();
  KeyManager[] km=SSLJiveKeyManagerFactory.getKeyManagers(ksKeys,keypass);
  TrustManager[] tm=SSLJiveTrustManagerFactory.getTrustManagers(ksTrust,trustpass);
  if (clientMode || authentication == ClientAuth.needed || authentication == ClientAuth.wanted) {
    tm=new TrustManager[]{new ServerTrustManager(remoteServer,ksTrust)};
  }
  SSLContext tlsContext=SSLContext.getInstance("TLS");
  tlsContext.init(km,tm,null);
  SSLFilter filter=new SSLFilter(tlsContext);
  filter.setUseClientMode(clientMode);
  if (authentication == ClientAuth.needed) {
    filter.setNeedClientAuth(true);
  }
 else   if (authentication == ClientAuth.wanted) {
    filter.setWantClientAuth(true);
  }
  ioSession.getFilterChain().addBefore("org.apache.mina.common.ExecutorThreadModel","tls",filter);
  ioSession.setAttribute(SSLFilter.DISABLE_ENCRYPTION_ONCE,Boolean.TRUE);
  if (!clientMode) {
    deliverRawText("<proceed xmlns=\"urn:ietf:params:xml:ns:xmpp-tls\"/>");
  }
}
