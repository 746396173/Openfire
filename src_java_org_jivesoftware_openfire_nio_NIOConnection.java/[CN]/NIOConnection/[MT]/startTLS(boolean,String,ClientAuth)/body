{
  final boolean isClientToServer=(remoteServer == null);
  Log.debug("StartTLS: using {}",isClientToServer ? "c2s" : "s2s");
  final SSLConfig sslConfig=SSLConfig.getInstance();
  final TrustStoreConfig storeConfig;
  if (isClientToServer) {
    storeConfig=(TrustStoreConfig)sslConfig.getStoreConfig(Purpose.SOCKETBASED_C2S_TRUSTSTORE);
  }
 else {
    storeConfig=(TrustStoreConfig)sslConfig.getStoreConfig(Purpose.SOCKETBASED_S2S_TRUSTSTORE);
  }
  final TrustManager[] tm;
  if (clientMode || authentication == ClientAuth.needed || authentication == ClientAuth.wanted) {
    final KeyStore ksTrust=storeConfig.getStore();
    if (isClientToServer) {
      tm=new TrustManager[]{new ClientTrustManager(ksTrust)};
    }
 else {
      tm=new TrustManager[]{new ServerTrustManager(remoteServer,ksTrust,this)};
    }
  }
 else {
    tm=storeConfig.getTrustManagers();
  }
  String algorithm=JiveGlobals.getProperty(ConnectionSettings.Client.TLS_ALGORITHM,"TLS");
  SSLContext tlsContext=SSLContext.getInstance(algorithm);
  final IdentityStoreConfig identityStoreConfig=(IdentityStoreConfig)sslConfig.getStoreConfig(Purpose.SOCKETBASED_IDENTITYSTORE);
  tlsContext.init(identityStoreConfig.getKeyManagers(),tm,null);
  SslFilter filter=new SslFilter(tlsContext);
  filter.setUseClientMode(clientMode);
  if (clientMode) {
    filter.setEnabledProtocols(new String[]{"TLSv1","TLSv1.1","TLSv1.2"});
  }
 else {
    filter.setEnabledProtocols(new String[]{"SSLv2Hello","TLSv1","TLSv1.1","TLSv1.2"});
  }
  if (authentication == ClientAuth.needed) {
    filter.setNeedClientAuth(true);
  }
 else   if (authentication == ClientAuth.wanted) {
    filter.setWantClientAuth(true);
  }
  ioSession.getFilterChain().addBefore(EXECUTOR_FILTER_NAME,TLS_FILTER_NAME,filter);
  ioSession.setAttribute(SslFilter.DISABLE_ENCRYPTION_ONCE,Boolean.TRUE);
  if (!clientMode) {
    deliverRawText("<proceed xmlns=\"urn:ietf:params:xml:ns:xmpp-tls\"/>");
  }
}
