{
  String domainName=XMPPServer.getInstance().getServerInfo().getXMPPDomain();
  try {
    InetSocketAddress isaLocal=callHandler.getReceiveAddress();
    int localRTPPort=isaLocal.getPort();
    int localRTCPPort=localRTPPort + 1;
    int remoteRTPPort=nextRTPPort;
    int remoteRTCPPort=remoteRTPPort + 1;
synchronized (nextRTPPort) {
      nextRTPPort++;
      if (nextRTPPort > stopRTPPort)       nextRTPPort=startRTPPort;
    }
    setState(CallState.INVITED);
    IQ iq=new IQ(IQ.Type.set);
    iq.setFrom(cp.getCallOwner());
    iq.setTo(domainName);
    String id="rayo-" + System.currentTimeMillis();
    Element colibri=iq.setChildElement("colibri","urn:xmpp:rayo:colibri:1");
    colibri.addAttribute("videobridge",cp.getConferenceId());
    colibri.addAttribute("localrtpport",String.valueOf(remoteRTPPort));
    colibri.addAttribute("localrtcpport",String.valueOf(remoteRTCPPort));
    colibri.addAttribute("remotertpport",String.valueOf(localRTPPort));
    colibri.addAttribute("remotertcpport",String.valueOf(localRTCPPort));
    colibri.addAttribute("codec",cp.getMediaPreference().equals("PCM/48000/2") ? "opus" : "pcmu");
    RayoPlugin.component.sendPacket(iq);
    setState(CallState.ANSWERED);
    InetSocketAddress isaRemote=new InetSocketAddress("localhost",remoteRTPPort);
    setEndpointAddress(isaRemote,(byte)(cp.getMediaPreference().equals("PCM/48000/2") ? 111 : 0),(byte)0,(byte)0);
    setState(CallState.ESTABLISHED);
  }
 catch (  Exception e) {
    Logger.println("Call " + cp + ":  VideobridgeCallAgent: initiateCall exception ");
    e.printStackTrace();
  }
}
