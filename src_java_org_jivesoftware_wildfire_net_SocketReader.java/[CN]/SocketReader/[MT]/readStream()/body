{
  open=true;
  while (open) {
    Element doc=reader.parseDocument().getRootElement();
    if (doc == null) {
      return;
    }
    String tag=doc.getName();
    if ("message".equals(tag)) {
      Message packet;
      try {
        packet=new Message(doc);
      }
 catch (      IllegalArgumentException e) {
        Message reply=new Message();
        reply.setID(doc.attributeValue("id"));
        reply.setTo(session.getAddress());
        reply.getElement().addAttribute("from",doc.attributeValue("to"));
        reply.setError(PacketError.Condition.jid_malformed);
        session.process(reply);
        continue;
      }
      processMessage(packet);
    }
 else     if ("presence".equals(tag)) {
      Presence packet;
      try {
        packet=new Presence(doc);
      }
 catch (      IllegalArgumentException e) {
        Presence reply=new Presence();
        reply.setID(doc.attributeValue("id"));
        reply.setTo(session.getAddress());
        reply.getElement().addAttribute("from",doc.attributeValue("to"));
        reply.setError(PacketError.Condition.jid_malformed);
        session.process(reply);
        continue;
      }
      try {
        packet.getType();
      }
 catch (      IllegalArgumentException e) {
        Log.warn("Invalid presence type",e);
        packet.setType(null);
      }
      try {
        packet.getShow();
      }
 catch (      IllegalArgumentException e) {
        Log.warn("Invalid presence show",e);
        packet.setShow(null);
      }
      if (session.getStatus() == Session.STATUS_CLOSED && packet.isAvailable()) {
        Log.warn("Ignoring available presence packet of closed session: " + packet);
        continue;
      }
      processPresence(packet);
    }
 else     if ("iq".equals(tag)) {
      IQ packet;
      try {
        packet=getIQ(doc);
      }
 catch (      IllegalArgumentException e) {
        IQ reply=new IQ();
        if (!doc.elements().isEmpty()) {
          reply.setChildElement(((Element)doc.elements().get(0)).createCopy());
        }
        reply.setID(doc.attributeValue("id"));
        reply.setTo(session.getAddress());
        if (doc.attributeValue("to") != null) {
          reply.getElement().addAttribute("from",doc.attributeValue("to"));
        }
        reply.setError(PacketError.Condition.jid_malformed);
        session.process(reply);
        continue;
      }
      processIQ(packet);
    }
 else     if ("starttls".equals(tag)) {
      if (negotiateTLS()) {
        tlsNegotiated();
      }
 else {
        open=false;
        session=null;
      }
    }
 else     if ("auth".equals(tag)) {
      if (authenticateClient(doc)) {
        saslSuccessful();
      }
 else       if (connection.isClosed()) {
        open=false;
        session=null;
      }
    }
 else     if ("compress".equals(tag)) {
      if (compressClient(doc)) {
        compressionSuccessful();
      }
    }
 else {
      if (!processUnknowPacket(doc)) {
        Log.warn(LocaleUtils.getLocalizedString("admin.error.packet.tag") + doc.asXML());
        open=false;
      }
    }
  }
}
