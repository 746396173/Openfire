def GetLdflags(self, config, gyp_to_build_path, expand_special, manifest_base_name, is_executable):
    'Returns the flags that need to be added to link commands, and the\n    manifest files.'
    config = self._TargetConfig(config)
    ldflags = []
    ld = self._GetWrapper(self, self.msvs_settings[config], 'VCLinkerTool', append=ldflags)
    self._GetDefFileAsLdflags(ldflags, gyp_to_build_path)
    ld('GenerateDebugInformation', map={'true': '/DEBUG', })
    ld('TargetMachine', map={'1': 'X86', '17': 'X64', }, prefix='/MACHINE:')
    ldflags.extend(self._GetAdditionalLibraryDirectories('VCLinkerTool', config, gyp_to_build_path))
    ld('DelayLoadDLLs', prefix='/DELAYLOAD:')
    out = self.GetOutputName(config, expand_special)
    if out:
        ldflags.append(('/OUT:' + out))
    pdb = self.GetPDBName(config, expand_special)
    if pdb:
        ldflags.append(('/PDB:' + pdb))
    map_file = self.GetMapFileName(config, expand_special)
    ld('GenerateMapFile', map={'true': (('/MAP:' + map_file) if map_file else '/MAP'), })
    ld('MapExports', map={'true': '/MAPINFO:EXPORTS', })
    ld('AdditionalOptions', prefix='')
    ld('SubSystem', map={'1': 'CONSOLE', '2': 'WINDOWS', }, prefix='/SUBSYSTEM:')
    ld('TerminalServerAware', map={'1': ':NO', '2': '', }, prefix='/TSAWARE')
    ld('LinkIncremental', map={'1': ':NO', '2': '', }, prefix='/INCREMENTAL')
    ld('FixedBaseAddress', map={'1': ':NO', '2': '', }, prefix='/FIXED')
    ld('RandomizedBaseAddress', map={'1': ':NO', '2': '', }, prefix='/DYNAMICBASE')
    ld('DataExecutionPrevention', map={'1': ':NO', '2': '', }, prefix='/NXCOMPAT')
    ld('OptimizeReferences', map={'1': 'NOREF', '2': 'REF', }, prefix='/OPT:')
    ld('EnableCOMDATFolding', map={'1': 'NOICF', '2': 'ICF', }, prefix='/OPT:')
    ld('LinkTimeCodeGeneration', map={'1': '/LTCG', })
    ld('IgnoreDefaultLibraryNames', prefix='/NODEFAULTLIB:')
    ld('ResourceOnlyDLL', map={'true': '/NOENTRY', })
    ld('EntryPointSymbol', prefix='/ENTRY:')
    ld('Profile', map={'true': '/PROFILE', })
    ld('LargeAddressAware', map={'1': ':NO', '2': '', }, prefix='/LARGEADDRESSAWARE')
    ld('AdditionalDependencies', prefix='')
    base_flags = filter((lambda x: (('DYNAMICBASE' in x) or (x == '/FIXED'))), ldflags)
    if (not base_flags):
        ldflags.append('/DYNAMICBASE')
    if (not filter((lambda x: ('NXCOMPAT' in x)), ldflags)):
        ldflags.append('/NXCOMPAT')
    have_def_file = filter((lambda x: x.startswith('/DEF:')), ldflags)
    (manifest_flags, intermediate_manifest_file) = self._GetLdManifestFlags(config, manifest_base_name, (is_executable and (not have_def_file)))
    ldflags.extend(manifest_flags)
    manifest_files = self._GetAdditionalManifestFiles(config, gyp_to_build_path)
    manifest_files.append(intermediate_manifest_file)
    return (ldflags, manifest_files)
