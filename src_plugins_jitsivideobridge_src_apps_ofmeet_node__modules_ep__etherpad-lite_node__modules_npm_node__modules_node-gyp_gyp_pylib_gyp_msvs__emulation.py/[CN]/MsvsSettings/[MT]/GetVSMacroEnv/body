def GetVSMacroEnv(self, base_to_build=None, config=None):
    'Get a dict of variables mapping internal VS macro names to their gyp\n    equivalents.'
    target_platform = ('Win32' if (self.GetArch(config) == 'x86') else 'x64')
    target_name = (self.spec.get('product_prefix', '') + self.spec.get('product_name', self.spec['target_name']))
    target_dir = ((base_to_build + '\\') if base_to_build else '')
    replacements = {'$(OutDir)\\': target_dir, '$(TargetDir)\\': target_dir, '$(IntDir)': '$!INTERMEDIATE_DIR', '$(InputPath)': '${source}', '$(InputName)': '${root}', '$(ProjectName)': self.spec['target_name'], '$(TargetName)': target_name, '$(PlatformName)': target_platform, '$(ProjectDir)\\': '', }
    if self.vs_version.Path():
        replacements['$(VSInstallDir)'] = self.vs_version.Path()
        replacements['$(VCInstallDir)'] = (os.path.join(self.vs_version.Path(), 'VC') + '\\')
    replacements['$(DXSDK_DIR)'] = (self.dxsdk_dir if self.dxsdk_dir else '')
    replacements['$(WDK_DIR)'] = (self.wdk_dir if self.wdk_dir else '')
    return replacements
