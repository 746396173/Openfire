{
  boolean usePlainPassword=JiveGlobals.getBooleanProperty("user.usePlainPassword");
  boolean scramOnly=JiveGlobals.getBooleanProperty("user.scramHashedPasswordOnly");
  String encryptedPassword=null;
  if (username.contains("@")) {
    int index=username.indexOf("@");
    String domain=username.substring(index + 1);
    if (domain.equals(XMPPServer.getInstance().getServerInfo().getXMPPDomain())) {
      username=username.substring(0,index);
    }
 else {
      throw new UserNotFoundException();
    }
  }
  byte[] saltShaker=new byte[24];
  random.nextBytes(saltShaker);
  String salt=DatatypeConverter.printBase64Binary(saltShaker);
  int iterations=JiveGlobals.getIntProperty("sasl.scram-sha-1.iteration-count",ScramUtils.DEFAULT_ITERATION_COUNT);
  byte[] saltedPassword=null, clientKey=null, storedKey=null, serverKey=null;
  try {
    saltedPassword=ScramUtils.createSaltedPassword(saltShaker,password,iterations);
    clientKey=ScramUtils.computeHmac(saltedPassword,"Client Key");
    storedKey=MessageDigest.getInstance("SHA-1").digest(clientKey);
    serverKey=ScramUtils.computeHmac(saltedPassword,"Server Key");
  }
 catch (  SaslException|NoSuchAlgorithmException e) {
    Log.warn("Unable to persist values for SCRAM authentication.");
  }
  if (!scramOnly && !usePlainPassword) {
    try {
      encryptedPassword=AuthFactory.encryptPassword(password);
      password=null;
    }
 catch (    UnsupportedOperationException uoe) {
    }
  }
  if (scramOnly) {
    encryptedPassword=null;
    password=null;
  }
  Connection con=null;
  PreparedStatement pstmt=null;
  try {
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(UPDATE_PASSWORD);
    if (password == null) {
      pstmt.setNull(1,Types.VARCHAR);
    }
 else {
      pstmt.setString(1,password);
    }
    if (encryptedPassword == null) {
      pstmt.setNull(2,Types.VARCHAR);
    }
 else {
      pstmt.setString(2,encryptedPassword);
    }
    if (storedKey == null) {
      pstmt.setNull(3,Types.VARCHAR);
    }
 else {
      pstmt.setString(3,DatatypeConverter.printBase64Binary(storedKey));
    }
    if (serverKey == null) {
      pstmt.setNull(4,Types.VARCHAR);
    }
 else {
      pstmt.setString(4,DatatypeConverter.printBase64Binary(serverKey));
    }
    pstmt.setString(5,salt);
    pstmt.setInt(6,iterations);
    pstmt.setString(7,username);
    pstmt.executeUpdate();
  }
 catch (  SQLException sqle) {
    throw new UserNotFoundException(sqle);
  }
 finally {
    DbConnectionManager.closeConnection(pstmt,con);
  }
}
