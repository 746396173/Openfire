{
  try {
    RoomInterceptorManager interceptorManager=RoomInterceptorManager.getInstance();
    WorkgroupManager workgroupManager=WorkgroupManager.getInstance();
    String userJID=request.getUserJID().toString();
    final Workgroup sessionWorkgroup=request.getWorkgroup();
    final String sessionID=request.getSessionID();
    String workgroupName=getJID().getNode();
    final String serviceName=workgroupManager.getMUCServiceName();
    final String roomName=sessionID + "@" + serviceName;
    final String roomJID=roomName + "/" + workgroupName;
    JoinRoom joinRoom=new JoinRoom(getFullJID().toString(),roomJID);
    interceptorManager.invokeInterceptors(getJID().toBareJID(),joinRoom,false,false);
    send(joinRoom);
    interceptorManager.invokeInterceptors(getJID().toBareJID(),joinRoom,false,true);
    Map<String,Collection<String>> fields=new HashMap<String,Collection<String>>();
    List<String> values=new ArrayList<String>();
    values.add("0");
    fields.put("muc#roomconfig_publicroom",values);
    values=new ArrayList<String>();
    values.add(roomName);
    fields.put("muc#roomconfig_roomdesc",values);
    values=new ArrayList<String>();
    values.add("1");
    fields.put("muc#roomconfig_changesubject",values);
    values=new ArrayList<String>();
    values.add("0");
    fields.put("muc#roomconfig_persistentroom",values);
    values=new ArrayList<String>();
    values.add("moderators");
    fields.put("muc#roomconfig_whois",values);
    values=new ArrayList<String>();
    values.add("0");
    fields.put("anonymous",values);
    values=new ArrayList<String>();
    values.add("participant");
    values.add("visitor");
    fields.put("muc#roomconfig_presencebroadcast",values);
    RoomConfiguration conf=new RoomConfiguration(fields);
    conf.setTo(roomName);
    conf.setFrom(getFullJID());
    interceptorManager.invokeInterceptors(getJID().toBareJID(),conf,false,false);
    send(conf);
    interceptorManager.invokeInterceptors(getJID().toBareJID(),conf,false,true);
    requests.put(sessionID,request);
    Invitation invitation=new Invitation(agent.getJID().toString(),sessionID);
    invitation.setTo(roomName);
    invitation.setFrom(getFullJID());
    Element element=invitation.addChildElement("offer","http://jabber.org/protocol/workgroup");
    element.addAttribute("jid",userJID);
    element=invitation.addChildElement("session","http://jivesoftware.com/protocol/workgroup");
    element.addAttribute("workgroup",sessionWorkgroup.getJID().toString());
    element.addAttribute("id",sessionID);
    if (request.isAnonymousUser()) {
      element=invitation.addChildElement("user","http://jivesoftware.com/protocol/workgroup");
      element.addAttribute("id",request.getUserID());
    }
    interceptorManager.invokeInterceptors(getJID().toBareJID(),invitation,false,false);
    send(invitation);
    interceptorManager.invokeInterceptors(getJID().toBareJID(),invitation,false,true);
    sendUserInvitiation(request,roomName);
    request.invitationsSent(sessionID);
  }
 catch (  Exception e) {
    Log.error(e.getMessage(),e);
  }
}
