{
  if (packet.getFrom().toBareJID().equals(getGroupChatRoomName())) {
    return;
  }
  RoomInterceptorManager interceptorManager=RoomInterceptorManager.getInstance();
  String roomID=packet.getFrom().getNode();
  String sessionID=packet.getFrom().getNode();
synchronized (sessionID.intern()) {
    if (packet instanceof Presence) {
      Presence presence=(Presence)packet;
      if (Presence.Type.error == presence.getType()) {
        String warnMessage="Possible server misconfiguration. Received error " + "presence:" + presence.toXML();
        Log.warn(warnMessage);
        return;
      }
      Element mucUser=presence.getChildElement("x","http://jabber.org/protocol/muc#user");
      if (mucUser == null) {
        return;
      }
      Element item=mucUser.element("item");
      if (item == null) {
        return;
      }
      if (workgroupName.equals(packet.getFrom().getResource())) {
        return;
      }
      JID presenceFullJID=new JID(item.attributeValue("jid"));
      String presenceJID=presenceFullJID.toBareJID();
      interceptorManager.invokeInterceptors(getJID().toBareJID(),packet,false,false);
      UserRequest initialRequest=requests.get(sessionID);
      Map<Packet,java.util.Date> messageList=transcripts.get(roomID);
      if (messageList == null) {
        messageList=new LinkedHashMap<Packet,java.util.Date>();
        transcripts.put(roomID,messageList);
        WorkgroupEventDispatcher.chatSupportStarted(this,sessionID);
      }
      messageList.put(packet.createCopy(),new java.util.Date());
      boolean occupantAdded=false;
      Set<String> set=occupantsCounter.get(roomID);
      if (set == null) {
        set=new HashSet<String>();
        occupantsCounter.put(roomID,set);
      }
      if (presence.isAvailable()) {
        occupantAdded=set.add(presenceJID);
      }
 else {
        String xpath="/presence/*[name()='x']/*[name()='status']";
        Element status=(Element)presence.getElement().selectSingleNode(xpath);
        if (status == null || !"303".equals(status.attributeValue("code"))) {
          set.remove(presenceJID);
        }
      }
      String agentJID=null;
      for (      Agent agent : getAgents()) {
        if (agent.getAgentJID().toBareJID().equals(presenceJID)) {
          agentJID=agent.getAgentJID().toBareJID();
        }
      }
      if (agentJID != null) {
        AgentSession agentSession;
        try {
          agentSession=agentManager.getAgentSession(presenceFullJID);
          if (agentSession != null) {
            if (presence.isAvailable()) {
              if (occupantAdded) {
                agentSession.addChatInfo(this,sessionID,initialRequest,new java.util.Date());
                WorkgroupEventDispatcher.agentJoinedChatSupport(this,sessionID,agentSession);
              }
            }
 else {
              agentSession.removeChatInfo(this,sessionID);
              WorkgroupEventDispatcher.agentLeftChatSupport(this,sessionID,agentSession);
            }
          }
        }
 catch (        AgentNotFoundException e) {
        }
        if (presence.isAvailable()) {
          if (occupantAdded) {
            DbWorkgroup.updateJoinedSession(sessionID,agentJID,true);
          }
        }
 else {
          DbWorkgroup.updateJoinedSession(sessionID,agentJID,false);
        }
      }
 else {
        if (occupantAdded) {
          initialRequest.supportStarted(roomID);
        }
      }
      if (occupantAdded) {
        initialRequest.userJoinedRoom(new JID(packet.getFrom().toBareJID()),presenceFullJID);
      }
      boolean isAgent=false;
      try {
        isAgent=agentManager.getAgentSession(presenceFullJID) != null;
      }
 catch (      AgentNotFoundException e) {
      }
      if (!((Presence)packet).isAvailable() && !isAgent) {
        Map<Packet,java.util.Date> map=transcripts.get(roomID);
        StringBuilder buf=new StringBuilder();
        buf.append("<transcript>");
        for (        Packet p : map.keySet()) {
          java.util.Date date=map.get(p);
          if (p instanceof Message) {
            Message storedMessage=(Message)p;
            Element delay=storedMessage.addChildElement("x","jabber:x:delay");
            delay.addAttribute("stamp",UTC_FORMAT.format(date));
            if (ModelUtil.hasLength(storedMessage.getBody())) {
              buf.append(p.toXML());
            }
          }
 else {
            Presence storedPresence=(Presence)p;
            Element delay=storedPresence.addChildElement("x","jabber:x:delay");
            delay.addAttribute("stamp",UTC_FORMAT.format(date));
            buf.append(p.toXML());
          }
        }
        buf.append("</transcript>");
        DbWorkgroup.updateTranscript(sessionID,buf.toString(),new java.util.Date());
      }
      if (!((Presence)packet).isAvailable() && set.isEmpty()) {
        occupantsCounter.remove(roomID);
        initialRequest=requests.remove(sessionID);
        if (initialRequest != null && initialRequest.hasJoinedRoom()) {
          initialRequest.supportEnded();
        }
        Map<Packet,java.util.Date> map=transcripts.get(roomID);
        StringBuilder buf=new StringBuilder();
        buf.append("<transcript>");
        for (        Packet p : map.keySet()) {
          java.util.Date date=map.get(p);
          if (p instanceof Message) {
            Message storedMessage=(Message)p;
            Element delay=storedMessage.addChildElement("x","jabber:x:delay");
            delay.addAttribute("stamp",UTC_FORMAT.format(date));
            if (ModelUtil.hasLength(storedMessage.getBody())) {
              buf.append(p.toXML());
            }
          }
 else {
            Presence storedPresence=(Presence)p;
            Element delay=storedPresence.addChildElement("x","jabber:x:delay");
            delay.addAttribute("stamp",UTC_FORMAT.format(date));
            buf.append(p.toXML());
          }
        }
        buf.append("</transcript>");
        String roomJID=packet.getFrom().toString() + "/" + getJID().getNode();
        LeaveRoom leaveRoom=new LeaveRoom(getFullJID().toString(),roomJID);
        send(leaveRoom);
        transcripts.remove(roomID);
        WorkgroupEventDispatcher.chatSupportFinished(this,sessionID);
      }
      interceptorManager.invokeInterceptors(getJID().toBareJID(),packet,false,true);
    }
 else     if (packet instanceof Message) {
      if (packet.getFrom().getResource() != null) {
        interceptorManager.invokeInterceptors(getJID().toBareJID(),packet,false,false);
        Map<Packet,java.util.Date> messageList=transcripts.get(roomID);
        if (messageList == null) {
          messageList=new LinkedHashMap<Packet,java.util.Date>();
          transcripts.put(roomID,messageList);
        }
        messageList.put(packet.createCopy(),new java.util.Date());
        interceptorManager.invokeInterceptors(getJID().toBareJID(),packet,false,true);
      }
    }
  }
}
