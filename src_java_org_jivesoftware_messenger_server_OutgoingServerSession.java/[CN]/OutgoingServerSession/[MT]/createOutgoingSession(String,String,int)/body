{
  boolean useTLS=JiveGlobals.getBooleanProperty("xmpp.server.tls.enabled",false);
  RemoteServerConfiguration configuration=RemoteServerManager.getConfiguration(hostname);
  if (configuration != null) {
  }
  if (useTLS) {
    SocketConnection connection=null;
    String realHostname=null;
    int realPort=port;
    Socket socket=new Socket();
    try {
      Log.debug("OS - Trying to connect to " + hostname + ":"+ port);
      DNSUtil.HostAddress address=DNSUtil.resolveXMPPServerDomain(hostname,port);
      realHostname=address.getHost();
      realPort=address.getPort();
      socket.connect(new InetSocketAddress(realHostname,realPort),RemoteServerManager.getSocketTimeout());
      Log.debug("OS - Plain connection to " + hostname + ":"+ port+ " successful");
    }
 catch (    Exception e) {
      Log.error("Error trying to connect to remote server: " + hostname + "(DNS lookup: "+ realHostname+ ":"+ realPort+ ")",e);
      return null;
    }
    try {
      connection=new SocketConnection(XMPPServer.getInstance().getPacketDeliverer(),socket,false);
      StringBuilder openingStream=new StringBuilder();
      openingStream.append("<stream:stream");
      openingStream.append(" xmlns:stream=\"http://etherx.jabber.org/streams\"");
      openingStream.append(" xmlns=\"jabber:server\"");
      openingStream.append(" to=\"").append(hostname).append("\"");
      openingStream.append(" version=\"1.0\">");
      connection.deliverRawText(openingStream.toString());
      XPPPacketReader reader=new XPPPacketReader();
      reader.getXPPParser().setInput(new InputStreamReader(socket.getInputStream(),CHARSET));
      XmlPullParser xpp=reader.getXPPParser();
      for (int eventType=xpp.getEventType(); eventType != XmlPullParser.START_TAG; ) {
        eventType=xpp.next();
      }
      String serverVersion=xpp.getAttributeValue("","version");
      if (serverVersion != null && decodeVersion(serverVersion)[0] >= 1) {
        Element features=reader.parseDocument().getRootElement();
        if (features != null && features.element("starttls") != null) {
          OutgoingServerSession answer;
          answer=secureAndAuthenticate(hostname,connection,reader,openingStream,xpp,domain);
          if (answer != null) {
            return answer;
          }
        }
 else {
          Log.debug("OS - Error, <starttls> was not received");
        }
      }
      if (connection != null) {
        connection.close();
      }
    }
 catch (    Exception e) {
      Log.error("Error creating secured outgoing session to remote server: " + hostname + "(DNS lookup: "+ realHostname+ ":"+ realPort+ ")",e);
      if (connection != null) {
        connection.close();
      }
    }
  }
  Log.debug("OS - Going to try connecting using server dialback");
  return new ServerDialback().createOutgoingSession(domain,hostname,port);
}
