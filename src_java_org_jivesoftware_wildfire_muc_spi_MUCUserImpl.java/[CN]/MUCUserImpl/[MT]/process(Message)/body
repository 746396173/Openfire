{
  if (Message.Type.error == packet.getType()) {
    return;
  }
  lastPacketTime=System.currentTimeMillis();
  JID recipient=packet.getTo();
  String group=recipient.getNode();
  if (group == null) {
    Log.info(LocaleUtils.getLocalizedString("muc.error.not-supported") + " " + packet.toString());
  }
 else {
    MUCRole role=roles.get(group);
    if (role == null) {
      if (server.hasChatRoom(group)) {
        boolean declinedInvitation=false;
        Element userInfo=null;
        if (Message.Type.normal == packet.getType()) {
          userInfo=packet.getChildElement("x","http://jabber.org/protocol/muc#user");
          if (userInfo != null && userInfo.element("decline") != null) {
            declinedInvitation=true;
          }
        }
        if (declinedInvitation) {
          Element info=userInfo.element("decline");
          server.getChatRoom(group).sendInvitationRejection(new JID(info.attributeValue("to")),info.elementTextTrim("reason"),packet.getFrom());
        }
 else {
          sendErrorPacket(packet,PacketError.Condition.not_acceptable);
        }
      }
 else {
        sendErrorPacket(packet,PacketError.Condition.recipient_unavailable);
      }
    }
 else {
      if (!role.getChatUser().getAddress().equals(packet.getFrom())) {
        sendErrorPacket(packet,PacketError.Condition.conflict);
      }
 else {
        try {
          if (packet.getSubject() != null && packet.getSubject().trim().length() > 0 && Message.Type.groupchat == packet.getType()) {
            role.getChatRoom().changeSubject(packet,role);
          }
 else {
            Message.Type type=packet.getType();
            String resource=packet.getTo().getResource();
            if (resource == null || resource.trim().length() == 0) {
              resource=null;
            }
            if (resource == null && Message.Type.groupchat == type) {
              role.getChatRoom().sendPublicMessage(packet,role);
            }
 else             if (resource != null && (Message.Type.chat == type || Message.Type.normal == type)) {
              role.getChatRoom().sendPrivatePacket(packet,role);
            }
 else             if (resource == null && Message.Type.normal == type) {
              Element userInfo=packet.getChildElement("x","http://jabber.org/protocol/muc#user");
              MUCRoomImpl room=(MUCRoomImpl)role.getChatRoom();
              if (userInfo != null && userInfo.element("invite") != null) {
                List<Element> extensions=new ArrayList<Element>(packet.getElement().elements());
                extensions.remove(userInfo);
                for (Iterator it=userInfo.elementIterator("invite"); it.hasNext(); ) {
                  Element info=(Element)it.next();
                  if (room.isMembersOnly()) {
                    room.lock.writeLock().lock();
                    try {
                      room.addMember(info.attributeValue("to"),null,role);
                    }
  finally {
                      room.lock.writeLock().unlock();
                    }
                  }
                  room.sendInvitation(new JID(info.attributeValue("to")),info.elementTextTrim("reason"),role,extensions);
                }
              }
 else               if (userInfo != null && userInfo.element("decline") != null) {
                Element info=userInfo.element("decline");
                room.sendInvitationRejection(new JID(info.attributeValue("to")),info.elementTextTrim("reason"),packet.getFrom());
              }
 else {
                sendErrorPacket(packet,PacketError.Condition.bad_request);
              }
            }
 else {
              sendErrorPacket(packet,PacketError.Condition.bad_request);
            }
          }
        }
 catch (        ForbiddenException e) {
          sendErrorPacket(packet,PacketError.Condition.forbidden);
        }
catch (        NotFoundException e) {
          sendErrorPacket(packet,PacketError.Condition.recipient_unavailable);
        }
catch (        ConflictException e) {
          sendErrorPacket(packet,PacketError.Condition.conflict);
        }
      }
    }
  }
}
