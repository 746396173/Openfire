{
  RoutingTable routingTable=XMPPServer.getInstance().getRoutingTable();
  RemoteSessionLocator sessionLocator=XMPPServer.getInstance().getRemoteSessionLocator();
  SessionManager manager=XMPPServer.getInstance().getSessionManager();
  Set<String> registeredUsers=lookupJIDList(key,C2SCache.getName());
  if (!registeredUsers.isEmpty()) {
    for (    String fullJID : new ArrayList<String>(registeredUsers)) {
      JID offlineJID=new JID(fullJID);
      manager.removeSession(null,offlineJID,false,true);
    }
  }
  Set<String> anonymousUsers=lookupJIDList(key,anonymousC2SCache.getName());
  if (!anonymousUsers.isEmpty()) {
    for (    String fullJID : new ArrayList<String>(anonymousUsers)) {
      JID offlineJID=new JID(fullJID);
      manager.removeSession(null,offlineJID,true,true);
    }
  }
  Set<String> remoteServers=lookupJIDList(key,S2SCache.getName());
  if (!remoteServers.isEmpty()) {
    for (    String fullJID : new ArrayList<String>(remoteServers)) {
      JID serverJID=new JID(fullJID);
      routingTable.removeServerRoute(serverJID);
    }
  }
  Set<String> components=lookupJIDList(key,componentsCache.getName());
  if (!components.isEmpty()) {
    for (    String address : new ArrayList<String>(components)) {
      Lock lock=CacheFactory.getLock(address,componentsCache);
      try {
        lock.lock();
        Set<NodeID> nodes=(Set<NodeID>)componentsCache.get(address);
        if (nodes != null) {
          nodes.remove(key);
          if (nodes.isEmpty()) {
            componentsCache.remove(address);
          }
 else {
            componentsCache.put(address,nodes);
          }
        }
      }
  finally {
        lock.unlock();
      }
    }
  }
  Set<String> sessionInfo=lookupJIDList(key,sessionInfoCache.getName());
  if (!sessionInfo.isEmpty()) {
    for (    String session : new ArrayList<String>(sessionInfo)) {
      sessionInfoCache.remove(session);
    }
  }
  Set<String> componentSessions=lookupJIDList(key,componentSessionsCache.getName());
  if (!componentSessions.isEmpty()) {
    for (    String domain : new ArrayList<String>(componentSessions)) {
      componentSessionsCache.remove(domain);
    }
  }
  Set<String> multiplexers=lookupJIDList(key,multiplexerSessionsCache.getName());
  if (!multiplexers.isEmpty()) {
    for (    String fullJID : new ArrayList<String>(multiplexers)) {
      multiplexerSessionsCache.remove(fullJID);
    }
  }
  Set<String> incomingSessions=lookupJIDList(key,incomingServerSessionsCache.getName());
  if (!incomingSessions.isEmpty()) {
    for (    String streamIDValue : new ArrayList<>(incomingSessions)) {
      StreamID streamID=BasicStreamIDFactory.createStreamID(streamIDValue);
      IncomingServerSession session=sessionLocator.getIncomingServerSession(key.toByteArray(),streamID);
      for (      String hostname : session.getValidatedDomains()) {
        manager.unregisterIncomingServerSession(hostname,session);
      }
    }
  }
  nodeSessions.remove(key);
}
