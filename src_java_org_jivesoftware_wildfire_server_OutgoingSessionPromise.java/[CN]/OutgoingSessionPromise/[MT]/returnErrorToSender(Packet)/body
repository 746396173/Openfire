{
  XMPPServer server=XMPPServer.getInstance();
  JID from=packet.getFrom();
  JID to=packet.getTo();
  if (!server.isLocal(from) && !XMPPServer.getInstance().matchesComponent(from) && !server.isLocal(to)&& !XMPPServer.getInstance().matchesComponent(to)) {
    return;
  }
  try {
    if (packet instanceof IQ) {
      IQ reply=new IQ();
      reply.setID(((IQ)packet).getID());
      reply.setTo(from);
      reply.setFrom(to);
      reply.setChildElement(((IQ)packet).getChildElement().createCopy());
      reply.setError(PacketError.Condition.remote_server_not_found);
      ChannelHandler route=routingTable.getRoute(reply.getTo());
      if (route != null) {
        route.process(reply);
      }
    }
 else     if (packet instanceof Presence) {
      Presence reply=new Presence();
      reply.setID(packet.getID());
      reply.setTo(from);
      reply.setFrom(to);
      reply.setError(PacketError.Condition.remote_server_not_found);
      ChannelHandler route=routingTable.getRoute(reply.getTo());
      if (route != null) {
        route.process(reply);
      }
    }
 else     if (packet instanceof Message) {
      Message reply=new Message();
      reply.setID(packet.getID());
      reply.setTo(from);
      reply.setFrom(to);
      reply.setType(((Message)packet).getType());
      reply.setThread(((Message)packet).getThread());
      reply.setError(PacketError.Condition.remote_server_not_found);
      ChannelHandler route=routingTable.getRoute(reply.getTo());
      if (route != null) {
        route.process(reply);
      }
    }
  }
 catch (  UnauthorizedException e) {
  }
catch (  Exception e) {
    Log.warn("Error returning error to sender. Original packet: " + packet,e);
  }
}
