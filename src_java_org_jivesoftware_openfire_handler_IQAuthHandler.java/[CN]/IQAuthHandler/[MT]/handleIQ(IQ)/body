{
  LocalClientSession session=(LocalClientSession)sessionManager.getSession(packet.getFrom());
  if (session == null) {
    Log.error("Error during authentication. Session not found in " + sessionManager.getPreAuthenticatedKeys() + " for key "+ packet.getFrom());
    IQ reply=IQ.createResultIQ(packet);
    reply.setChildElement(packet.getChildElement().createCopy());
    reply.setError(PacketError.Condition.internal_server_error);
    return reply;
  }
  IQ response;
  boolean resourceBound=false;
  if (JiveGlobals.getBooleanProperty("xmpp.auth.iqauth",true)) {
    try {
      Element iq=packet.getElement();
      Element query=iq.element("query");
      Element queryResponse=probeResponse.createCopy();
      if (IQ.Type.get == packet.getType()) {
        String username=query.elementText("username");
        if (username != null) {
          queryResponse.element("username").setText(username);
        }
        response=IQ.createResultIQ(packet);
        response.setChildElement(queryResponse);
        if (session.getStatus() != Session.STATUS_AUTHENTICATED) {
          response.setTo((JID)null);
        }
      }
 else {
        if (query.elements().isEmpty()) {
          response=anonymousLogin(session,packet);
          resourceBound=session.getStatus() == Session.STATUS_AUTHENTICATED;
        }
 else {
          String username=query.elementText("username");
          String password=query.elementText("password");
          String digest=null;
          if (query.element("digest") != null) {
            digest=query.elementText("digest").toLowerCase();
          }
          if (session.getStatus() == Session.STATUS_AUTHENTICATED) {
            response=passwordReset(password,packet,username,session);
          }
 else {
            response=login(username,query,packet,password,session,digest);
            resourceBound=session.getStatus() == Session.STATUS_AUTHENTICATED;
          }
        }
      }
    }
 catch (    UserNotFoundException e) {
      response=IQ.createResultIQ(packet);
      response.setChildElement(packet.getChildElement().createCopy());
      response.setError(PacketError.Condition.not_authorized);
    }
catch (    UnauthorizedException e) {
      response=IQ.createResultIQ(packet);
      response.setChildElement(packet.getChildElement().createCopy());
      response.setError(PacketError.Condition.not_authorized);
    }
catch (    ConnectionException e) {
      response=IQ.createResultIQ(packet);
      response.setChildElement(packet.getChildElement().createCopy());
      response.setError(PacketError.Condition.internal_server_error);
    }
catch (    InternalUnauthenticatedException e) {
      response=IQ.createResultIQ(packet);
      response.setChildElement(packet.getChildElement().createCopy());
      response.setError(PacketError.Condition.internal_server_error);
    }
  }
 else {
    response=IQ.createResultIQ(packet);
    response.setChildElement(packet.getChildElement().createCopy());
    response.setError(PacketError.Condition.not_authorized);
  }
  session.process(response);
  if (resourceBound) {
    SessionEventDispatcher.dispatchEvent(session,SessionEventDispatcher.EventType.resource_bound);
  }
  return null;
}
