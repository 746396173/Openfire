{
  groupCache=CacheFactory.createCache("Group");
  groupMetaCache=CacheFactory.createCache("Group Metadata Cache");
  initProvider();
  GroupEventDispatcher.addListener(new GroupEventListener(){
    public void groupCreated(    Group group,    Map params){
      if (group.getProperties().get("sharedRoster.showInRoster") == null) {
        group.getProperties().put("sharedRoster.showInRoster","nobody");
        group.getProperties().put("sharedRoster.displayName","");
        group.getProperties().put("sharedRoster.groupList","");
      }
      groupCache.put(group.getName(),group);
      groupMetaCache.clear();
    }
    public void groupDeleting(    Group group,    Map params){
      groupCache.remove(group.getName());
      groupMetaCache.clear();
    }
    public void groupModified(    Group group,    Map params){
      String type=(String)params.get("type");
      if (type != null && (type.equals("propertyModified") || type.equals("propertyDeleted") || type.equals("propertyAdded"))) {
        if (params.get("propertyKey") != null && params.get("propertyKey").equals("sharedRoster.showInRoster")) {
          groupMetaCache.clear();
        }
      }
      groupCache.put(group.getName(),group);
    }
    public void memberAdded(    Group group,    Map params){
      groupMetaCache.clear();
      groupCache.put(group.getName(),group);
    }
    public void memberRemoved(    Group group,    Map params){
      groupMetaCache.clear();
      groupCache.put(group.getName(),group);
    }
    public void adminAdded(    Group group,    Map params){
      groupMetaCache.clear();
      groupCache.put(group.getName(),group);
    }
    public void adminRemoved(    Group group,    Map params){
      groupMetaCache.clear();
      groupCache.put(group.getName(),group);
    }
  }
);
  UserEventDispatcher.addListener(new UserEventListener(){
    public void userCreated(    User user,    Map<String,Object> params){
    }
    public void userDeleting(    User user,    Map<String,Object> params){
      deleteUser(user);
    }
    public void userModified(    User user,    Map<String,Object> params){
    }
  }
);
  PropertyEventListener propListener=new PropertyEventListener(){
    public void propertySet(    String property,    Map params){
      if ("provider.group.className".equals(property)) {
        initProvider();
      }
    }
    public void propertyDeleted(    String property,    Map params){
    }
    public void xmlPropertySet(    String property,    Map params){
    }
    public void xmlPropertyDeleted(    String property,    Map params){
    }
  }
;
  PropertyEventDispatcher.addListener(propListener);
  Runnable task=new Runnable(){
    public void run(){
      Collection<Group> groups=getSharedGroups();
      for (      Group group : groups) {
        for (        JID jid : group.getMembers()) {
          try {
            if (XMPPServer.getInstance().isLocal(jid)) {
              UserManager.getInstance().getUser(jid.getNode());
            }
          }
 catch (          UserNotFoundException unfe) {
          }
        }
      }
    }
  }
;
  TaskEngine.getInstance().submit(task);
}
