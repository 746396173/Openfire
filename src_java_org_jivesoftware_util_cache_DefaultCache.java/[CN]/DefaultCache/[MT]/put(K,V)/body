{
  checkNotNull(key,NULL_KEY_IS_NOT_ALLOWED);
  checkNotNull(value,NULL_VALUE_IS_NOT_ALLOWED);
  V answer=remove(key);
  int objectSize=1;
  try {
    objectSize=CacheSizes.sizeOfAnything(value);
  }
 catch (  CannotCalculateSizeException e) {
    Log.warn(e.getMessage(),e);
  }
  if (maxCacheSize > 0 && objectSize > maxCacheSize * .90) {
    Log.warn("Cache: " + name + " -- object with key "+ key+ " is too large to fit in cache. Size is "+ objectSize);
    return value;
  }
  cacheSize+=objectSize;
  DefaultCache.CacheObject<V> cacheObject=new DefaultCache.CacheObject<>(value,objectSize);
  map.put(key,cacheObject);
  LinkedListNode<K> lastAccessedNode=lastAccessedList.addFirst(key);
  cacheObject.lastAccessedListNode=lastAccessedNode;
  LinkedListNode<K> ageNode=ageList.addFirst(key);
  ageNode.timestamp=System.currentTimeMillis();
  cacheObject.ageListNode=ageNode;
  cullCache();
  return answer;
}
