{
  final List<User> userList=new ArrayList<>();
  int supportSearch=getUserProviders().size();
  int totalMatchedUserCount=0;
  for (  final UserProvider provider : getUserProviders()) {
    try {
      final Set<String> supportedFields=new HashSet<>(fields);
      supportedFields.retainAll(provider.getSearchFields());
      final Collection<User> providerResults=provider.findUsers(fields,query);
      totalMatchedUserCount+=providerResults.size();
      if (startIndex >= totalMatchedUserCount) {
        continue;
      }
      final int providerStartIndex=Math.max(0,startIndex - totalMatchedUserCount);
      final int providerResultMax=numResults - userList.size();
      final List<User> providerList=providerResults instanceof List<?> ? (List<User>)providerResults : new ArrayList<>(providerResults);
      userList.addAll(providerList.subList(providerStartIndex,providerResultMax));
      if (userList.size() >= numResults) {
        break;
      }
    }
 catch (    UnsupportedOperationException uoe) {
      Log.warn("UserProvider.findUsers is not supported by this UserProvider: " + provider.getClass().getName());
      supportSearch--;
    }
  }
  if (supportSearch == 0) {
    throw new UnsupportedOperationException("None of the backing providers support this operation.");
  }
  return userList;
}
