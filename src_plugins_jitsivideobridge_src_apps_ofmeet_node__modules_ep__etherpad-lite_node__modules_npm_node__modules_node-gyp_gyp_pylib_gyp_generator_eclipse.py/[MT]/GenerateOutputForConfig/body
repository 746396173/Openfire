def GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):
    options = params['options']
    generator_flags = params.get('generator_flags', {})
    build_dir = os.path.join(generator_flags.get('output_dir', 'out'), config_name)
    toplevel_build = os.path.join(options.toplevel_dir, build_dir)
    shared_intermediate_dirs = [os.path.join(toplevel_build, 'obj', 'gen'), os.path.join(toplevel_build, 'gen')]
    if (not os.path.exists(toplevel_build)):
        os.makedirs(toplevel_build)
    out = open(os.path.join(toplevel_build, 'eclipse-cdt-settings.xml'), 'w')
    out.write('<?xml version="1.0" encoding="UTF-8"?>\n')
    out.write('<cdtprojectproperties>\n')
    eclipse_langs = ['C++ Source File', 'C Source File', 'Assembly Source File', 'GNU C++', 'GNU C', 'Assembly']
    include_dirs = GetAllIncludeDirectories(target_list, target_dicts, shared_intermediate_dirs, config_name, params)
    WriteIncludePaths(out, eclipse_langs, include_dirs)
    defines = GetAllDefines(target_list, target_dicts, data, config_name, params)
    WriteMacros(out, eclipse_langs, defines)
    out.write('</cdtprojectproperties>\n')
    out.close()
