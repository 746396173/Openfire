{
  XmlPullParser xpp=reader.getXPPParser();
  String domain=xpp.getAttributeValue("","to");
  Log.debug("[ExComp] Starting registration of new external component for domain: " + domain);
  Writer writer=connection.getWriter();
  StringBuilder sb=new StringBuilder();
  sb.append("<?xml version='1.0' encoding='");
  sb.append(CHARSET);
  sb.append("'?>");
  sb.append("<stream:stream ");
  sb.append("xmlns:stream=\"http://etherx.jabber.org/streams\" ");
  sb.append("xmlns=\"jabber:component:accept\" from=\"");
  sb.append(domain);
  sb.append("\">");
  if (domain == null) {
    Log.debug("[ExComp] Domain not specified in stanza: " + xpp.getText());
    StreamError error=new StreamError(StreamError.Condition.bad_format);
    sb.append(error.toXML());
    writer.write(sb.toString());
    writer.flush();
    connection.close();
    return null;
  }
  String subdomain=domain;
  int index=domain.indexOf(serverName);
  if (index > -1) {
    subdomain=domain.substring(0,index - 1);
  }
  if (!ExternalComponentManager.canAccess(subdomain)) {
    Log.debug("[ExComp] Component is not allowed to connect with subdomain: " + subdomain);
    StreamError error=new StreamError(StreamError.Condition.host_unknown);
    sb.append(error.toXML());
    writer.write(sb.toString());
    writer.flush();
    connection.close();
    return null;
  }
  String secretKey=ExternalComponentManager.getSecretForComponent(subdomain);
  if (secretKey == null) {
    Log.debug("[ExComp] A shared secret for the component was not found.");
    StreamError error=new StreamError(StreamError.Condition.internal_server_error);
    sb.append(error.toXML());
    writer.write(sb.toString());
    writer.flush();
    connection.close();
    return null;
  }
  if (InternalComponentManager.getInstance().getComponent(subdomain) != null) {
    Log.debug("[ExComp] Another component is already using domain: " + domain);
    StreamError error=new StreamError(StreamError.Condition.conflict);
    sb.append(error.toXML());
    writer.write(sb.toString());
    writer.flush();
    connection.close();
    return null;
  }
  Session session=SessionManager.getInstance().createComponentSession(connection);
  session.setAddress(new JID(null,domain,null));
  try {
    Log.debug("[ExComp] Send stream header with ID: " + session.getStreamID() + " for component with domain: "+ domain);
    sb=new StringBuilder();
    sb.append("<?xml version='1.0' encoding='");
    sb.append(CHARSET);
    sb.append("'?>");
    sb.append("<stream:stream ");
    sb.append("xmlns:stream=\"http://etherx.jabber.org/streams\" ");
    sb.append("xmlns=\"jabber:component:accept\" from=\"");
    sb.append(domain);
    sb.append("\" id=\"");
    sb.append(session.getStreamID().toString());
    sb.append("\">");
    writer.write(sb.toString());
    writer.flush();
    Element doc=reader.parseDocument().getRootElement();
    String digest="handshake".equals(doc.getName()) ? doc.getStringValue() : "";
    String anticipatedDigest=AuthFactory.createDigest(session.getStreamID().getID(),secretKey);
    if (!anticipatedDigest.equalsIgnoreCase(digest)) {
      Log.debug("[ExComp] Incorrect handshake for component with domain: " + domain);
      writer.write(new StreamError(StreamError.Condition.not_authorized).toXML());
      writer.flush();
      connection.close();
      return null;
    }
 else {
      session.setStatus(STATUS_AUTHENTICATED);
      writer.write("<handshake></handshake>");
      writer.flush();
      ExternalComponent component=((ComponentSession)session).getExternalComponent();
      InternalComponentManager.getInstance().addComponent(subdomain,component);
      Log.debug("[ExComp] External component was registered SUCCESSFULLY with domain: " + domain);
      return session;
    }
  }
 catch (  Exception e) {
    Log.error("An error occured while creating a ComponentSession",e);
    connection.close();
    return null;
  }
}
