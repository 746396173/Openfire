{
  IQ reply=IQ.createResultIQ(iq);
  String namespace=iq.getChildElement().getNamespaceURI();
  Element childElement=iq.getChildElement().createCopy();
  reply.setChildElement(childElement);
  if ("http://jabber.org/protocol/disco#info".equals(namespace)) {
    if (iq.getTo().getNode() == null) {
      Element identity=childElement.addElement("identity");
      identity.addAttribute("category","component");
      identity.addAttribute("type","generic");
      identity.addAttribute("name","SIP Controller");
      childElement.addElement("feature").addAttribute("var","http://jabber.org/protocol/disco#info");
      childElement.addElement("feature").addAttribute("var","http://www.jivesoftware.com/protocol/sipark");
    }
  }
 else   if (NAMESPACE.equals(namespace)) {
    if (iq.getTo().getNode() == null && iq.getFrom() != null) {
      SipAccount sipAccount=SipAccountDAO.getAccountByUser(iq.getFrom().toBareJID().split("@")[0]);
      if (iq.getChildElement().element("status") == null) {
        if (sipAccount != null && sipAccount.isEnabled()) {
          Element registration=childElement.addElement("registration");
          registration.addElement("jid").setText(sipAccount.getUsername() + "@" + componentManager.getServerName());
          registration.addElement("username").setText(sipAccount.getSipUsername());
          registration.addElement("authUsername").setText(sipAccount.getAuthUsername());
          registration.addElement("displayPhoneNum").setText(sipAccount.getDisplayName());
          registration.addElement("password").setText(sipAccount.getPassword());
          registration.addElement("server").setText(sipAccount.getServer());
          registration.addElement("stunServer").setText(sipAccount.getStunServer());
          registration.addElement("stunPort").setText(sipAccount.getStunPort());
          registration.addElement("useStun").setText(String.valueOf(sipAccount.isUseStun()));
          registration.addElement("voicemail").setText(sipAccount.getVoiceMailNumber());
          registration.addElement("enabled").setText(String.valueOf(sipAccount.isEnabled()));
          registration.addElement("outboundproxy").setText(sipAccount.getOutboundproxy());
          registration.addElement("promptCredentials").setText(String.valueOf(sipAccount.isPromptCredentials()));
        }
 else {
          reply.getChildElement().addAttribute("type","unregistered");
        }
      }
 else {
        if (sipAccount != null) {
          Element status=iq.getChildElement().element("status");
          if (!status.getTextTrim().equals("")) {
            sipAccount.setStatus(SipRegisterStatus.valueOf(status.getTextTrim()));
            try {
              SipAccountDAO.update(sipAccount);
            }
 catch (            SQLException e) {
              componentManager.getLog().error(e);
            }
          }
        }
      }
    }
  }
 else {
    reply.setError(PacketError.Condition.service_unavailable);
  }
  try {
    componentManager.sendPacket(this,reply);
  }
 catch (  Exception e) {
    componentManager.getLog().error(e);
  }
  componentManager.getLog().debug("PACKET SENT: " + reply.toXML());
}
