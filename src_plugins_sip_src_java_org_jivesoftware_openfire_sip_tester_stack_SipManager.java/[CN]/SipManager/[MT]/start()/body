{
  initProperties();
  SIPConfig.setSystemProperties();
  this.sipFactory=SipFactory.getInstance();
  sipFactory.setPathName(sipStackPath);
  try {
    addressFactory=sipFactory.createAddressFactory();
    headerFactory=sipFactory.createHeaderFactory();
    messageFactory=sipFactory.createMessageFactory();
  }
 catch (  PeerUnavailableException ex) {
    Log.error("start",ex);
    throw new CommunicationsException("Could not create factories!",ex);
  }
  try {
    sipStack=sipFactory.createSipStack(System.getProperties());
    ((SipCommRouter)sipStack.getRouter()).setOutboundProxy(SIPConfig.getOutboundProxy());
  }
 catch (  PeerUnavailableException ex) {
    Log.error("start",ex);
    throw new CommunicationsException("Imposs?vel conectar!\n" + "O proxy pode n?o est? acess?vel.\nVerifique sua conex?o." + "(Syntax:<proxy_address:port/transport>)",ex);
  }
  try {
    boolean successfullyBound=false;
    while (!successfullyBound) {
      try {
        publicIpAddress=new InetSocketAddress(localAddress,localPort);
        listeningPoint=sipStack.createListeningPoint(localPort,transport);
      }
 catch (      InvalidArgumentException ex) {
        localPort=(int)((65000 - 1024) * Math.random()) + 1024;
        try {
          Thread.sleep(1000);
        }
 catch (        Exception e) {
        }
        continue;
      }
      successfullyBound=true;
    }
  }
 catch (  TransportNotSupportedException ex) {
    throw new CommunicationsException("Transport " + transport + " is not suppported by the stack!\n Try specifying another"+ " transport in Mais property files.\n",ex);
  }
  try {
    sipProvider=sipStack.createSipProvider(listeningPoint);
  }
 catch (  ObjectInUseException ex) {
    Log.error("start",ex);
    throw new CommunicationsException("Could not create factories!\n",ex);
  }
  try {
    sipProvider.addSipListener(this);
  }
 catch (  TooManyListenersException exc) {
    throw new CommunicationsException("Could not register SipManager as a sip listener!",exc);
  }
  sipSecurityManager.setHeaderFactory(headerFactory);
  sipSecurityManager.setTransactionCreator(sipProvider);
  sipSecurityManager.setSipManCallback(this);
  contactHeader=null;
  fromHeader=null;
  viaHeaders=null;
  maxForwardsHeader=null;
  isStarted=true;
}
