{
  if (sipStack == null)   return;
  int tries;
  for (tries=0; tries < SipManager.RETRY_OBJECT_DELETES; tries++) {
    try {
      sipStack.deleteSipProvider(sipProvider);
    }
 catch (    ObjectInUseException ex) {
      SipManager.sleep(SipManager.RETRY_OBJECT_DELETES_AFTER);
      continue;
    }
    break;
  }
  if (sipStack == null)   return;
  if (tries >= SipManager.RETRY_OBJECT_DELETES)   throw new CommunicationsException("Failed to delete the sipProvider!");
  if (sipStack == null)   return;
  for (tries=0; tries < SipManager.RETRY_OBJECT_DELETES; tries++) {
    try {
      sipStack.deleteListeningPoint(listeningPoint);
    }
 catch (    ObjectInUseException ex) {
      SipManager.sleep(SipManager.RETRY_OBJECT_DELETES_AFTER);
      continue;
    }
    break;
  }
  if (sipStack != null) {
    for (Iterator it=sipStack.getSipProviders(); it.hasNext(); ) {
      SipProvider element=(SipProvider)it.next();
      try {
        sipStack.deleteSipProvider(element);
      }
 catch (      Exception e) {
      }
    }
  }
  if (tries >= SipManager.RETRY_OBJECT_DELETES)   throw new CommunicationsException("Failed to delete a listeningPoint!");
  listeningPoint=null;
  addressFactory=null;
  messageFactory=null;
  headerFactory=null;
  sipStack=null;
  registrarAddress=null;
  viaHeaders=null;
  contactHeader=null;
  fromHeader=null;
}
