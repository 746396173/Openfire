{
  XmlPullParser xpp=reader.getXPPParser();
  Session session;
  String domain=xpp.getAttributeValue("","to");
  Writer writer=connection.getWriter();
  StringBuilder sb=new StringBuilder();
  sb.append("<?xml version='1.0' encoding='");
  sb.append(CHARSET);
  sb.append("'?>");
  sb.append("<stream:stream ");
  sb.append("xmlns:stream=\"http://etherx.jabber.org/streams\" ");
  sb.append("xmlns=\"jabber:component:accept\" from=\"");
  sb.append(domain);
  sb.append("\">");
  if (domain == null) {
    StreamError error=new StreamError(StreamError.Condition.bad_format);
    sb.append(error.toXML());
    sb.append("</stream:stream>");
    writer.write(sb.toString());
    writer.flush();
    connection.close();
    return null;
  }
  String secretKey=JiveGlobals.getProperty("component.external.secretKey");
  if (secretKey == null) {
    Log.error("Setup for external components is incomplete. Property " + "component.external.secretKey does not exist.");
    StreamError error=new StreamError(StreamError.Condition.internal_server_error);
    sb.append(error.toXML());
    sb.append("</stream:stream>");
    writer.write(sb.toString());
    writer.flush();
    connection.close();
    return null;
  }
  if (InternalComponentManager.getInstance().getComponent(domain) != null) {
    StreamError error=new StreamError(StreamError.Condition.conflict);
    sb.append(error.toXML());
    sb.append("</stream:stream>");
    writer.write(sb.toString());
    writer.flush();
    connection.close();
    return null;
  }
  session=SessionManager.getInstance().createComponentSession(connection);
  session.setAddress(new JID(null,domain + "." + XMPPServer.getInstance().getServerInfo().getName(),null));
  try {
    sb=new StringBuilder();
    sb.append("<?xml version='1.0' encoding='");
    sb.append(CHARSET);
    sb.append("'?>");
    sb.append("<stream:stream ");
    sb.append("xmlns:stream=\"http://etherx.jabber.org/streams\" ");
    sb.append("xmlns=\"jabber:component:accept\" from=\"");
    sb.append(domain);
    sb.append("\" id=\"");
    sb.append(session.getStreamID().toString());
    sb.append("\">");
    writer.write(sb.toString());
    writer.flush();
    Element doc=reader.parseDocument().getRootElement();
    String digest="handshake".equals(doc.getName()) ? doc.getStringValue() : "";
    String anticipatedDigest=AuthFactory.createDigest(session.getStreamID().getID(),secretKey);
    if (!anticipatedDigest.equalsIgnoreCase(digest)) {
      sb=new StringBuilder();
      StreamError error=new StreamError(StreamError.Condition.not_authorized);
      sb.append(error.toXML());
      sb.append("</stream:stream>");
      writer.write(sb.toString());
      writer.flush();
      connection.close();
      return null;
    }
 else {
      session.setStatus(Session.STATUS_AUTHENTICATED);
      writer.write("<handshake></handshake>");
      writer.flush();
      ExternalComponent component=((ComponentSession)session).getExternalComponent();
      InternalComponentManager.getInstance().addComponent(domain,component);
      component.setServiceName(domain);
      return session;
    }
  }
 catch (  Exception e) {
    Log.error("An error occured while creating a ComponentSession",e);
    connection.close();
    return null;
  }
}
