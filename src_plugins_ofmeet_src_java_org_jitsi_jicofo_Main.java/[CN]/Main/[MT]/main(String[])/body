{
  String host=HOST_ARG_VALUE;
  String componentDomain=null;
  String focusDomain=null;
  String focusUserName=null;
  String focusPassword=null;
  String componentSubDomain=SUBDOMAIN_ARG_VALUE;
  int port=PORT_ARG_VALUE;
  String secret=null;
  for (  String arg : args) {
    if (arg.startsWith(DOMAIN_ARG_NAME)) {
      componentDomain=arg.substring(DOMAIN_ARG_NAME.length());
    }
 else     if (arg.startsWith(HOST_ARG_NAME)) {
      host=arg.substring(HOST_ARG_NAME.length());
    }
 else     if (arg.startsWith(USER_DOMAIN_ARG_NAME)) {
      focusDomain=arg.substring(USER_DOMAIN_ARG_NAME.length());
    }
 else     if (arg.startsWith(USER_NAME_ARG_NAME)) {
      focusUserName=arg.substring(USER_NAME_ARG_NAME.length());
    }
 else     if (arg.startsWith(USER_PASSWORD_ARG_NAME)) {
      focusPassword=arg.substring(USER_PASSWORD_ARG_NAME.length());
    }
 else     if (arg.startsWith(PORT_ARG_NAME)) {
      port=Integer.parseInt(arg.substring(PORT_ARG_NAME.length()));
    }
 else     if (arg.startsWith(SECRET_ARG_NAME)) {
      secret=arg.substring(SECRET_ARG_NAME.length());
    }
 else     if (arg.startsWith(SUBDOMAIN_ARG_NAME)) {
      componentSubDomain=arg.substring(SUBDOMAIN_ARG_NAME.length());
    }
  }
  if (StringUtils.isNullOrEmpty(host)) {
    host=(componentDomain == null) ? HOST_ARG_VALUE : componentDomain;
  }
  if (StringUtils.isNullOrEmpty(componentDomain)) {
    componentDomain=host;
  }
  if (StringUtils.isNullOrEmpty(focusDomain)) {
    focusDomain=componentDomain;
  }
  if (StringUtils.isNullOrEmpty(focusUserName)) {
    focusUserName=USER_NAME_ARG_VALUE;
  }
  if (secret == null) {
    System.err.println("Missing required argument " + SECRET_ARG_NAME);
    return;
  }
  System.setProperty("net.java.sip.communicator.service.gui.ALWAYS_TRUST_MODE_ENABLED","true");
  System.setProperty(FocusManager.HOSTNAME_PNAME,host);
  System.setProperty(FocusManager.XMPP_DOMAIN_PNAME,componentDomain);
  System.setProperty(FocusManager.FOCUS_USER_DOMAIN_PNAME,focusDomain);
  System.setProperty(FocusManager.FOCUS_USER_NAME_PNAME,focusUserName);
  if (!StringUtils.isNullOrEmpty(focusPassword)) {
    System.setProperty(FocusManager.FOCUS_USER_PASSWORD_PNAME,focusPassword);
  }
  BundleActivator activator=new BundleActivator(){
    @Override public void start(    BundleContext bundleContext) throws Exception {
      registerShutdownService(bundleContext);
    }
    @Override public void stop(    BundleContext bundleContext) throws Exception {
    }
  }
;
  OSGi.start(activator);
  ExternalComponentManager componentManager=new ExternalComponentManager(host,port);
  componentManager.setSecretKey(componentSubDomain,secret);
  componentManager.setServerName(componentDomain);
  boolean focusAnonymous=StringUtils.isNullOrEmpty(focusPassword);
  FocusComponent component=new FocusComponent(focusAnonymous,focusUserName + "@" + focusDomain);
  boolean stop=false;
  try {
    componentManager.addComponent(componentSubDomain,component);
  }
 catch (  ComponentException e) {
    logger.error(e,e);
    stop=true;
  }
  component.init();
  if (!stop) {
    try {
synchronized (exitSynRoot) {
        startQKeyHandler();
        exitSynRoot.wait();
      }
    }
 catch (    Exception e) {
      logger.error(e,e);
    }
  }
  component.shutdown();
  try {
    componentManager.removeComponent(componentSubDomain);
  }
 catch (  ComponentException e) {
    logger.error(e,e);
  }
  component.dispose();
  OSGi.stop();
}
