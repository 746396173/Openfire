{
  if (session instanceof IncomingServerSession) {
    String hostname=doc.getTextTrim();
    if (hostname == null || hostname.length() == 0) {
      sendChallenge(session,new byte[0]);
      return Status.needResponse;
    }
    hostname=new String(StringUtils.decodeBase64(hostname),CHARSET);
    boolean verify=JiveGlobals.getBooleanProperty("xmpp.server.certificate.verify",true);
    if (!verify) {
      authenticationSuccessful(session,hostname,null);
      return Status.authenticated;
    }
    SocketConnection connection=(SocketConnection)session.getConnection();
    try {
      for (      Certificate certificate : connection.getSSLSession().getPeerCertificates()) {
        for (        String identity : CertificateManager.getPeerIdentities((X509Certificate)certificate)) {
          if (identity.equals(hostname) || identity.equals("*." + hostname)) {
            authenticationSuccessful(session,hostname,null);
            return Status.authenticated;
          }
        }
      }
    }
 catch (    SSLPeerUnverifiedException e) {
      Log.warn("Error retrieving client certificates of: " + session,e);
    }
  }
 else   if (session instanceof LocalClientSession) {
    Log.debug("SASLAuthentication: EXTERNAL authentication via SSL certs for c2s connection");
    String username=new String(StringUtils.decodeBase64(doc.getTextTrim()),CHARSET);
    String principal="";
    ArrayList<String> principals=new ArrayList<String>();
    Connection connection=session.getConnection();
    if (connection.getSSLSession() == null) {
      Log.debug("SASLAuthentication: EXTERNAL authentication requested, but no SSL/TLS connection found.");
      authenticationFailed(session);
      return Status.failed;
    }
    try {
      for (      Certificate certificate : connection.getSSLSession().getPeerCertificates()) {
        principals.addAll(CertificateManager.getPeerIdentities((X509Certificate)certificate));
      }
    }
 catch (    SSLPeerUnverifiedException e) {
      Log.warn("Error retrieving client certificates of: " + session,e);
    }
    principal=principals.get(0);
    if (username == null || username.length() == 0) {
      for (      String princ : principals) {
        String u=AuthorizationManager.map(princ);
        if (!u.equals(princ)) {
          username=u;
          principal=princ;
          break;
        }
      }
      if (username == null || username.length() == 0) {
        username=principal;
      }
      Log.debug("SASLAuthentication: no username requested, using " + username);
    }
    if (AuthorizationManager.authorize(username,principal)) {
      Log.debug("SASLAuthentication: " + principal + " authorized to "+ username);
      authenticationSuccessful(session,username,null);
      return Status.authenticated;
    }
  }
 else {
    Log.debug("SASLAuthentication: unknown session type. Cannot perform EXTERNAL authentication");
  }
  authenticationFailed(session);
  return Status.failed;
}
