{
  if (session instanceof IncomingServerSession) {
    String hostname=doc.getTextTrim();
    if (hostname == null || hostname.length() == 0) {
      sendChallenge(session,new byte[0]);
      return Status.needResponse;
    }
    hostname=new String(StringUtils.decodeBase64(hostname),CHARSET);
    if (hostname.length() == 0) {
      hostname=null;
    }
    try {
      LocalIncomingServerSession svr=(LocalIncomingServerSession)session;
      String defHostname=svr.getDefaultIdentity();
      if (hostname == null) {
        hostname=defHostname;
      }
 else       if (!hostname.equals(defHostname)) {
        Log.info("SASLAuthentication rejected from='{}' and authzid='{}'",hostname,defHostname);
        authenticationFailed(session,Failure.NOT_AUTHORIZED);
        return Status.failed;
      }
    }
 catch (    Exception e) {
    }
    if (hostname == null) {
      Log.info("No authzid supplied for anonymous session.");
      authenticationFailed(session,Failure.NOT_AUTHORIZED);
      return Status.failed;
    }
    boolean verify=JiveGlobals.getBooleanProperty(ConnectionSettings.Server.TLS_CERTIFICATE_VERIFY,true);
    if (!verify) {
      authenticationSuccessful(session,hostname,null);
      return Status.authenticated;
    }
 else     if (verifyCertificates(session.getConnection().getPeerCertificates(),hostname)) {
      authenticationSuccessful(session,hostname,null);
      LocalIncomingServerSession s=(LocalIncomingServerSession)session;
      if (s != null) {
        s.tlsAuth();
      }
      return Status.authenticated;
    }
  }
 else   if (session instanceof LocalClientSession) {
    Log.debug("SASLAuthentication: EXTERNAL authentication via SSL certs for c2s connection");
    String username=new String(StringUtils.decodeBase64(doc.getTextTrim()),CHARSET);
    String principal="";
    ArrayList<String> principals=new ArrayList<String>();
    Connection connection=session.getConnection();
    if (connection.getPeerCertificates().length < 1) {
      Log.debug("SASLAuthentication: EXTERNAL authentication requested, but no certificates found.");
      authenticationFailed(session,Failure.NOT_AUTHORIZED);
      return Status.failed;
    }
    X509Certificate trusted;
    try {
      trusted=CertificateManager.getEndEntityCertificate(connection.getPeerCertificates(),SSLConfig.getKeyStore(),SSLConfig.gets2sTrustStore());
    }
 catch (    IOException e) {
      trusted=null;
    }
    if (trusted == null) {
      Log.debug("SASLAuthentication: EXTERNAL authentication requested, but EE cert untrusted.");
      authenticationFailed(session,Failure.NOT_AUTHORIZED);
      return Status.failed;
    }
    principals.addAll(CertificateManager.getClientIdentities((X509Certificate)trusted));
    if (principals.size() == 1) {
      principal=principals.get(0);
    }
 else     if (principals.size() > 1) {
      Log.debug("SASLAuthentication: EXTERNAL authentication: more than one principal found, using first.");
      principal=principals.get(0);
    }
 else {
      Log.debug("SASLAuthentication: EXTERNAL authentication: No principals found.");
    }
    if (username == null || username.length() == 0) {
      for (      String princ : principals) {
        String u=AuthorizationManager.map(princ);
        if (!u.equals(princ)) {
          username=u;
          principal=princ;
          break;
        }
      }
      if (username == null || username.length() == 0) {
        username=principal;
      }
      Log.debug("SASLAuthentication: no username requested, using " + username);
    }
    if (AuthorizationManager.authorize(username,principal)) {
      Log.debug("SASLAuthentication: " + principal + " authorized to "+ username);
      authenticationSuccessful(session,username,null);
      return Status.authenticated;
    }
  }
 else {
    Log.debug("SASLAuthentication: unknown session type. Cannot perform EXTERNAL authentication");
  }
  authenticationFailed(session,Failure.NOT_AUTHORIZED);
  return Status.failed;
}
