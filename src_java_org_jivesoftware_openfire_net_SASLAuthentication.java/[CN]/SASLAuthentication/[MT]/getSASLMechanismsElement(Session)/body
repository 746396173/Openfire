{
  if (!(session instanceof ClientSession) && !(session instanceof IncomingServerSession)) {
    return null;
  }
  Element mechs=DocumentHelper.createElement(new QName("mechanisms",new Namespace("","urn:ietf:params:xml:ns:xmpp-sasl")));
  if (session instanceof LocalIncomingServerSession) {
    if (session.isSecure()) {
      boolean haveTrustedCertificate=false;
      try {
        LocalIncomingServerSession svr=(LocalIncomingServerSession)session;
        X509Certificate trusted=CertificateManager.getEndEntityCertificate(svr.getConnection().getPeerCertificates(),SSLConfig.getKeyStore(),SSLConfig.gets2sTrustStore());
        haveTrustedCertificate=trusted != null;
        if (trusted != null && svr.getDefaultIdentity() != null) {
          haveTrustedCertificate=verifyCertificate(trusted,svr.getDefaultIdentity());
        }
      }
 catch (      IOException ex) {
        Log.warn("Exception occurred while trying to determine whether remote certificate is trusted. Treating as untrusted.",ex);
      }
      if (haveTrustedCertificate) {
        Element mechanism=mechs.addElement("mechanism");
        mechanism.setText("EXTERNAL");
      }
    }
  }
 else {
    for (    String mech : getSupportedMechanisms()) {
      Element mechanism=mechs.addElement("mechanism");
      mechanism.setText(mech);
    }
  }
  return mechs;
}
