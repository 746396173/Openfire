{
  try {
    if (!doc.getNamespaceURI().equals(SASL_NAMESPACE)) {
      throw new IllegalStateException("Unexpected data received while negotiating SASL authentication. Name of the offending root element: " + doc.getName() + " Namespace: "+ doc.getNamespaceURI());
    }
switch (ElementType.valueOfCaseInsensitive(doc.getName())) {
case ABORT:
      throw new SaslFailureException(Failure.ABORTED);
case AUTH:
    if (doc.attributeValue("mechanism") == null) {
      throw new SaslFailureException(Failure.INVALID_MECHANISM,"Peer did not specify a mechanism.");
    }
  final String mechanismName=doc.attributeValue("mechanism").toUpperCase();
if (!mechanisms.contains(mechanismName)) {
  throw new SaslFailureException(Failure.INVALID_MECHANISM,"The configuration of Openfire does not contain or allow the mechanism.");
}
final Map<String,Object> props=new HashMap<>();
props.put(LocalClientSession.class.getCanonicalName(),session);
props.put(Sasl.POLICY_NOANONYMOUS,Boolean.toString(!JiveGlobals.getBooleanProperty("xmpp.auth.anonymous")));
SaslServer saslServer=Sasl.createSaslServer(mechanismName,"xmpp",session.getServerName(),props,new XMPPCallbackHandler());
if (saslServer == null) {
throw new SaslFailureException(Failure.INVALID_MECHANISM,"There is no provider that can provide a SASL server for the desired mechanism and properties.");
}
session.setSessionData("SaslServer",saslServer);
if (mechanismName.equals("DIGEST-MD5")) {
doc.setText("");
}
case RESPONSE:
saslServer=(SaslServer)session.getSessionData("SaslServer");
if (saslServer == null) {
throw new IllegalStateException("A SaslServer instance was not initialized and/or stored on the session.");
}
final String encoded=doc.getTextTrim();
final byte[] decoded;
if (encoded == null || encoded.isEmpty()) {
decoded=new byte[0];
}
 else {
if (!BASE64_ENCODED.matcher(encoded).matches()) {
throw new SaslFailureException(Failure.INCORRECT_ENCODING);
}
decoded=StringUtils.decodeBase64(encoded);
}
final byte[] challenge=saslServer.evaluateResponse(decoded);
if (!saslServer.isComplete()) {
sendChallenge(session,challenge);
return Status.needResponse;
}
if (session instanceof IncomingServerSession) {
final boolean verify=JiveGlobals.getBooleanProperty(ConnectionSettings.Server.TLS_CERTIFICATE_VERIFY,true);
if (verify && verifyCertificates(session.getConnection().getPeerCertificates(),saslServer.getAuthorizationID(),true)) {
((LocalIncomingServerSession)session).tlsAuth();
}
 else {
throw new SaslFailureException(Failure.NOT_AUTHORIZED,"Server-to-Server certificate verification failed.");
}
}
authenticationSuccessful(session,saslServer.getAuthorizationID(),challenge);
session.removeSessionData("SaslServer");
return Status.authenticated;
default :
throw new IllegalStateException("Unexpected data received while negotiating SASL authentication. Name of the offending root element: " + doc.getName() + " Namespace: "+ doc.getNamespaceURI());
}
}
 catch (SaslException ex) {
Log.debug("SASL negotiation failed for session: {}",session,ex);
final Failure failure;
if (ex instanceof SaslFailureException && ((SaslFailureException)ex).getFailure() != null) {
failure=((SaslFailureException)ex).getFailure();
}
 else {
failure=Failure.NOT_AUTHORIZED;
}
authenticationFailed(session,failure);
session.removeSessionData("SaslServer");
return Status.failed;
}
catch (Exception ex) {
Log.warn("An unexpected exception occurred during SASL negotiation. Affected session: {}",session,ex);
authenticationFailed(session,Failure.NOT_AUTHORIZED);
session.removeSessionData("SaslServer");
return Status.failed;
}
}
