{
  int pageSize=-1;
  String pageSizeStr=properties.get("ldap.pagedResultsSize");
  if (pageSizeStr != null) {
    try {
      pageSize=Integer.parseInt(pageSizeStr);
    }
 catch (    NumberFormatException e) {
    }
  }
  LdapContext ctx=null;
  LdapContext ctx2=null;
  Integer count=0;
  try {
    ctx=getContext(baseDN);
    List<Control> baseTmpRequestControls=new ArrayList<Control>();
    if (pageSize > 0) {
      baseTmpRequestControls.add(new PagedResultsControl(pageSize,Control.NONCRITICAL));
    }
    Control[] baseRequestControls=baseTmpRequestControls.toArray(new Control[baseTmpRequestControls.size()]);
    ctx.setRequestControls(baseRequestControls);
    SearchControls searchControls=new SearchControls();
    if (isSubTreeSearch()) {
      searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);
    }
 else {
      searchControls.setSearchScope(SearchControls.ONELEVEL_SCOPE);
    }
    searchControls.setReturningAttributes(new String[]{attribute});
    byte[] cookie;
    do {
      cookie=null;
      NamingEnumeration<SearchResult> answer=ctx.search("",searchFilter,searchControls);
      while (answer.hasMoreElements()) {
        answer.next();
        count++;
      }
      Control[] controls=ctx.getResponseControls();
      if (controls != null) {
        for (        Control control : controls) {
          if (control instanceof PagedResultsResponseControl) {
            PagedResultsResponseControl prrc=(PagedResultsResponseControl)control;
            cookie=prrc.getCookie();
          }
        }
      }
      answer.close();
      List<Control> tmpRequestControls=new ArrayList<Control>();
      if (pageSize > 0) {
        tmpRequestControls.add(new PagedResultsControl(pageSize,cookie,Control.CRITICAL));
      }
      Control[] requestControls=tmpRequestControls.toArray(new Control[tmpRequestControls.size()]);
      ctx.setRequestControls(requestControls);
    }
 while (cookie != null);
    if (alternateBaseDN != null) {
      ctx2=getContext(alternateBaseDN);
      ctx2.setRequestControls(baseRequestControls);
      do {
        cookie=null;
        NamingEnumeration<SearchResult> answer=ctx2.search("",searchFilter,searchControls);
        while (answer.hasMoreElements()) {
          answer.next();
          count++;
        }
        Control[] controls=ctx2.getResponseControls();
        if (controls != null) {
          for (          Control control : controls) {
            if (control instanceof PagedResultsResponseControl) {
              PagedResultsResponseControl prrc=(PagedResultsResponseControl)control;
              cookie=prrc.getCookie();
            }
          }
        }
        answer.close();
        List<Control> tmpRequestControls=new ArrayList<Control>();
        if (pageSize > 0) {
          tmpRequestControls.add(new PagedResultsControl(pageSize,cookie,Control.CRITICAL));
        }
        Control[] requestControls=tmpRequestControls.toArray(new Control[tmpRequestControls.size()]);
        ctx2.setRequestControls(requestControls);
      }
 while (cookie != null);
    }
  }
 catch (  Exception e) {
    Log.error(e.getMessage(),e);
  }
 finally {
    try {
      if (ctx != null) {
        ctx.setRequestControls(null);
        ctx.close();
      }
      if (ctx2 != null) {
        ctx2.setRequestControls(null);
        ctx2.close();
      }
    }
 catch (    Exception ignored) {
    }
  }
  return count;
}
