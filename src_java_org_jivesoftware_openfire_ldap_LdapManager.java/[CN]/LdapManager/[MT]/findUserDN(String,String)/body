{
  boolean debug=Log.isDebugEnabled();
  username=username + usernameSuffix;
  if (debug) {
    Log.debug("LdapManager: Trying to find a user's DN based on their username. " + usernameField + ": "+ username+ ", Base DN: "+ baseDN+ "...");
  }
  DirContext ctx=null;
  try {
    ctx=getContext(baseDN);
    if (debug) {
      Log.debug("LdapManager: Starting LDAP search...");
    }
    SearchControls constraints=new SearchControls();
    if (subTreeSearch) {
      constraints.setSearchScope(SearchControls.SUBTREE_SCOPE);
    }
 else {
      constraints.setSearchScope(SearchControls.ONELEVEL_SCOPE);
    }
    constraints.setReturningAttributes(new String[]{usernameField});
    NamingEnumeration<SearchResult> answer=ctx.search("",getSearchFilter(),new String[]{username},constraints);
    if (debug) {
      Log.debug("LdapManager: ... search finished");
    }
    if (answer == null || !answer.hasMoreElements()) {
      if (debug) {
        Log.debug("LdapManager: User DN based on username '" + username + "' not found.");
      }
      throw new UserNotFoundException("Username " + username + " not found");
    }
    String userDN=answer.next().getName();
    if (answer.hasMoreElements()) {
      if (debug) {
        Log.debug("LdapManager: Search for userDN based on username '" + username + "' found multiple "+ "responses, throwing exception.");
      }
      throw new UserNotFoundException("LDAP username lookup for " + username + " matched multiple entries.");
    }
    answer.close();
    if (userDN.startsWith("ldap://")) {
      userDN=userDN.replace("," + baseDN,"");
      userDN=userDN.substring(userDN.lastIndexOf("/") + 1);
      userDN=java.net.URLDecoder.decode(userDN,"UTF-8");
    }
    if (encloseUserDN) {
      userDN=getEnclosedDN(userDN);
    }
    return userDN;
  }
 catch (  Exception e) {
    if (debug) {
      Log.debug("LdapManager: Exception thrown when searching for userDN based on username '" + username + "'",e);
    }
    throw e;
  }
 finally {
    try {
      ctx.close();
    }
 catch (    Exception ignored) {
    }
  }
}
