{
  this.properties=properties;
  JiveGlobals.migrateProperty("ldap.host");
  JiveGlobals.migrateProperty("ldap.port");
  JiveGlobals.migrateProperty("ldap.readTimeout");
  JiveGlobals.migrateProperty("ldap.usernameField");
  JiveGlobals.migrateProperty("ldap.usernameSuffix");
  JiveGlobals.migrateProperty("ldap.baseDN");
  JiveGlobals.migrateProperty("ldap.alternateBaseDN");
  JiveGlobals.migrateProperty("ldap.nameField");
  JiveGlobals.migrateProperty("ldap.emailField");
  JiveGlobals.migrateProperty("ldap.connectionPoolEnabled");
  JiveGlobals.migrateProperty("ldap.searchFilter");
  JiveGlobals.migrateProperty("ldap.subTreeSearch");
  JiveGlobals.migrateProperty("ldap.groupNameField");
  JiveGlobals.migrateProperty("ldap.groupMemberField");
  JiveGlobals.migrateProperty("ldap.groupDescriptionField");
  JiveGlobals.migrateProperty("ldap.posixMode");
  JiveGlobals.migrateProperty("ldap.groupSearchFilter");
  JiveGlobals.migrateProperty("ldap.adminDN");
  JiveGlobals.migrateProperty("ldap.adminPassword");
  JiveGlobals.migrateProperty("ldap.debugEnabled");
  JiveGlobals.migrateProperty("ldap.sslEnabled");
  JiveGlobals.migrateProperty("ldap.autoFollowReferrals");
  JiveGlobals.migrateProperty("ldap.autoFollowAliasReferrals");
  JiveGlobals.migrateProperty("ldap.encloseUserDN");
  JiveGlobals.migrateProperty("ldap.encloseGroupDN");
  JiveGlobals.migrateProperty("ldap.initialContextFactory");
  JiveGlobals.migrateProperty("ldap.pagedResultsSize");
  JiveGlobals.migrateProperty("ldap.clientSideSorting");
  JiveGlobals.migrateProperty("ldap.ldapDebugEnabled");
  String host=properties.get("ldap.host");
  if (host != null) {
    StringTokenizer st=new StringTokenizer(host," ,\t\n\r\f");
    while (st.hasMoreTokens()) {
      hosts.add(st.nextToken());
    }
  }
  String portStr=properties.get("ldap.port");
  port=389;
  if (portStr != null) {
    try {
      this.port=Integer.parseInt(portStr);
    }
 catch (    NumberFormatException nfe) {
      Log.error(nfe);
    }
  }
  String timeout=properties.get("ldap.readTimeout");
  if (timeout != null) {
    try {
      this.readTimeout=Integer.parseInt(timeout);
    }
 catch (    NumberFormatException nfe) {
      Log.error(nfe);
    }
  }
  usernameField=properties.get("ldap.usernameField");
  if (usernameField == null) {
    usernameField="uid";
  }
  usernameSuffix=properties.get("ldap.usernameSuffix");
  if (usernameSuffix == null) {
    usernameSuffix="";
  }
  baseDN=properties.get("ldap.baseDN");
  if (baseDN == null) {
    baseDN="";
  }
  alternateBaseDN=properties.get("ldap.alternateBaseDN");
  nameField=properties.get("ldap.nameField");
  if (nameField == null) {
    nameField="cn";
  }
  emailField=properties.get("ldap.emailField");
  if (emailField == null) {
    emailField="mail";
  }
  connectionPoolEnabled=true;
  String connectionPoolStr=properties.get("ldap.connectionPoolEnabled");
  if (connectionPoolStr != null) {
    connectionPoolEnabled=Boolean.valueOf(connectionPoolStr);
  }
  searchFilter=properties.get("ldap.searchFilter");
  subTreeSearch=true;
  String subTreeStr=properties.get("ldap.subTreeSearch");
  if (subTreeStr != null) {
    subTreeSearch=Boolean.valueOf(subTreeStr);
  }
  groupNameField=properties.get("ldap.groupNameField");
  if (groupNameField == null) {
    groupNameField="cn";
  }
  groupMemberField=properties.get("ldap.groupMemberField");
  if (groupMemberField == null) {
    groupMemberField="member";
  }
  groupDescriptionField=properties.get("ldap.groupDescriptionField");
  if (groupDescriptionField == null) {
    groupDescriptionField="description";
  }
  posixMode=false;
  String posixStr=properties.get("ldap.posixMode");
  if (posixStr != null) {
    posixMode=Boolean.valueOf(posixStr);
  }
  groupSearchFilter=properties.get("ldap.groupSearchFilter");
  adminDN=properties.get("ldap.adminDN");
  if (adminDN != null && adminDN.trim().equals("")) {
    adminDN=null;
  }
  adminPassword=properties.get("ldap.adminPassword");
  ldapDebugEnabled=false;
  String ldapDebugStr=properties.get("ldap.debugEnabled");
  if (ldapDebugStr != null) {
    ldapDebugEnabled=Boolean.valueOf(ldapDebugStr);
  }
  sslEnabled=false;
  String sslEnabledStr=properties.get("ldap.sslEnabled");
  if (sslEnabledStr != null) {
    sslEnabled=Boolean.valueOf(sslEnabledStr);
  }
  followReferrals=false;
  String followReferralsStr=properties.get("ldap.autoFollowReferrals");
  if (followReferralsStr != null) {
    followReferrals=Boolean.valueOf(followReferralsStr);
  }
  followAliasReferrals=true;
  String followAliasReferralsStr=properties.get("ldap.autoFollowAliasReferrals");
  if (followAliasReferralsStr != null) {
    followAliasReferrals=Boolean.valueOf(followAliasReferralsStr);
  }
  encloseUserDN=true;
  String encloseUserStr=properties.get("ldap.encloseUserDN");
  if (encloseUserStr != null) {
    encloseUserDN=Boolean.valueOf(encloseUserStr);
  }
  encloseGroupDN=true;
  String encloseGroupStr=properties.get("ldap.encloseGroupDN");
  if (encloseGroupStr != null) {
    encloseGroupDN=Boolean.valueOf(encloseGroupStr);
  }
  userDNPattern=Pattern.compile("(=)([^\\\"][^=]*[^\\\"])(?:,|$)");
  groupDNPattern=Pattern.compile("(=)([^\\\"][^=]*[^\\\"])(?:,|$)");
  this.initialContextFactory=properties.get("ldap.initialContextFactory");
  if (initialContextFactory != null) {
    try {
      Class.forName(initialContextFactory);
    }
 catch (    ClassNotFoundException cnfe) {
      Log.error("Initial context factory class failed to load: " + initialContextFactory + ".  Using default initial context factory class instead.");
      initialContextFactory="com.sun.jndi.ldap.LdapCtxFactory";
    }
  }
 else {
    initialContextFactory="com.sun.jndi.ldap.LdapCtxFactory";
  }
  StringBuilder buf=new StringBuilder();
  buf.append("Created new LdapManager() instance, fields:\n");
  buf.append("\t host: ").append(hosts).append("\n");
  buf.append("\t port: ").append(port).append("\n");
  buf.append("\t usernamefield: ").append(usernameField).append("\n");
  buf.append("\t usernameSuffix: ").append(usernameSuffix).append("\n");
  buf.append("\t baseDN: ").append(baseDN).append("\n");
  buf.append("\t alternateBaseDN: ").append(alternateBaseDN).append("\n");
  buf.append("\t nameField: ").append(nameField).append("\n");
  buf.append("\t emailField: ").append(emailField).append("\n");
  buf.append("\t adminDN: ").append(adminDN).append("\n");
  buf.append("\t adminPassword: ").append(adminPassword).append("\n");
  buf.append("\t searchFilter: ").append(searchFilter).append("\n");
  buf.append("\t subTreeSearch:").append(subTreeSearch).append("\n");
  buf.append("\t ldapDebugEnabled: ").append(ldapDebugEnabled).append("\n");
  buf.append("\t sslEnabled: ").append(sslEnabled).append("\n");
  buf.append("\t initialContextFactory: ").append(initialContextFactory).append("\n");
  buf.append("\t connectionPoolEnabled: ").append(connectionPoolEnabled).append("\n");
  buf.append("\t autoFollowReferrals: ").append(followReferrals).append("\n");
  buf.append("\t autoFollowAliasReferrals: ").append(followAliasReferrals).append("\n");
  buf.append("\t groupNameField: ").append(groupNameField).append("\n");
  buf.append("\t groupMemberField: ").append(groupMemberField).append("\n");
  buf.append("\t groupDescriptionField: ").append(groupDescriptionField).append("\n");
  buf.append("\t posixMode: ").append(posixMode).append("\n");
  buf.append("\t groupSearchFilter: ").append(groupSearchFilter).append("\n");
  if (Log.isDebugEnabled()) {
    Log.debug("LdapManager: " + buf.toString());
  }
  if (ldapDebugEnabled) {
    System.err.println(buf.toString());
  }
}
