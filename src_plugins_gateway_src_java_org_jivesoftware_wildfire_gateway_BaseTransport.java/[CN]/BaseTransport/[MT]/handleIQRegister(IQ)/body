{
  List<Packet> reply=new ArrayList<Packet>();
  JID from=packet.getFrom();
  JID to=packet.getTo();
  Element remove=packet.getChildElement().element("remove");
  if (remove != null) {
    IQ result=IQ.createResultIQ(packet);
    if (packet.getChildElement().elements().size() != 1) {
      result.setError(Condition.bad_request);
      reply.add(result);
      return reply;
    }
    Presence unavailable=new Presence(Presence.Type.unavailable);
    unavailable.setTo(from);
    unavailable.setFrom(to);
    reply.add(unavailable);
    try {
      this.deleteRegistration(from);
    }
 catch (    UserNotFoundException e) {
      Log.error("Error cleaning up contact list of: " + from);
      result.setError(Condition.registration_required);
    }
    reply.add(result);
  }
 else {
    String username=null;
    String password=null;
    String nickname=null;
    try {
      DataForm form=new DataForm(packet.getChildElement().element("x"));
      List<FormField> fields=form.getFields();
      for (      FormField field : fields) {
        String var=field.getVariable();
        if (var.equals("username")) {
          username=field.getValues().get(0);
        }
 else         if (var.equals("password")) {
          password=field.getValues().get(0);
        }
 else         if (var.equals("nick")) {
          nickname=field.getValues().get(0);
        }
      }
    }
 catch (    Exception e) {
    }
    if (packet.getType() == IQ.Type.set) {
      Boolean registered=false;
      Collection<Registration> registrations=registrationManager.getRegistrations(from,this.transportType);
      if (registrations.iterator().hasNext()) {
        registered=true;
      }
      if (!registered && !permissionManager.hasAccess(from)) {
        IQ result=IQ.createResultIQ(packet);
        result.setError(Condition.bad_request);
        reply.add(result);
        Message em=new Message();
        em.setType(Message.Type.error);
        em.setTo(packet.getFrom());
        em.setFrom(packet.getTo());
        em.setBody(LocaleUtils.getLocalizedString("gateway.base.registrationdeniedbyacls","gateway"));
        reply.add(em);
        return reply;
      }
      Element userEl=packet.getChildElement().element("username");
      Element passEl=packet.getChildElement().element("password");
      Element nickEl=packet.getChildElement().element("nick");
      if (userEl != null) {
        username=userEl.getTextTrim();
      }
      if (passEl != null) {
        password=passEl.getTextTrim();
      }
      if (nickEl != null) {
        nickname=nickEl.getTextTrim();
      }
      username=(username == null || username.equals("")) ? null : username;
      password=(password == null || password.equals("")) ? null : password;
      nickname=(nickname == null || nickname.equals("")) ? null : nickname;
      if (username == null || (isPasswordRequired() && password == null) || (isNicknameRequired() && nickname == null)) {
        IQ result=IQ.createResultIQ(packet);
        result.setError(Condition.bad_request);
        reply.add(result);
      }
 else {
        boolean rosterlessMode=false;
        Element x=packet.getChildElement().element("x");
        if (x != null && x.getNamespaceURI() != null && x.getNamespaceURI().equals(IQ_GATEWAY_REGISTER)) {
          rosterlessMode=true;
          Log.info("Registered " + packet.getFrom() + " as "+ username+ " in rosterless mode.");
        }
 else {
          Log.info("Registered " + packet.getFrom() + " as "+ username);
        }
        IQ result=IQ.createResultIQ(packet);
        Element response=DocumentHelper.createElement(QName.get("query",IQ_REGISTER));
        result.setChildElement(response);
        reply.add(result);
        try {
          this.addNewRegistration(from,username,password,nickname,rosterlessMode);
        }
 catch (        UserNotFoundException e) {
          Log.error("Someone attempted to register with the gateway who is not registered with the server: " + from);
          IQ eresult=IQ.createResultIQ(packet);
          eresult.setError(Condition.bad_request);
          reply.add(eresult);
          Message em=new Message();
          em.setType(Message.Type.error);
          em.setTo(packet.getFrom());
          em.setFrom(packet.getTo());
          em.setBody(LocaleUtils.getLocalizedString("gateway.base.registrationdeniednoacct","gateway"));
          reply.add(em);
        }
catch (        IllegalAccessException e) {
          Log.error("Someone who is not a user of this server tried to register with the transport: " + from);
          IQ eresult=IQ.createResultIQ(packet);
          eresult.setError(Condition.not_allowed);
          reply.add(eresult);
          Message em=new Message();
          em.setType(Message.Type.error);
          em.setTo(packet.getFrom());
          em.setFrom(packet.getTo());
          em.setBody(LocaleUtils.getLocalizedString("gateway.base.registrationdeniedbyhost","gateway"));
          reply.add(em);
        }
catch (        IllegalArgumentException e) {
          Log.error("Someone attempted to register with the gateway with an invalid username: " + from);
          IQ eresult=IQ.createResultIQ(packet);
          eresult.setError(Condition.bad_request);
          reply.add(eresult);
          Message em=new Message();
          em.setType(Message.Type.error);
          em.setTo(packet.getFrom());
          em.setFrom(packet.getTo());
          em.setBody(LocaleUtils.getLocalizedString("gateway.base.registrationdeniedbadusername","gateway"));
          reply.add(em);
        }
      }
    }
 else     if (packet.getType() == IQ.Type.get) {
      Element response=DocumentHelper.createElement(QName.get("query",IQ_REGISTER));
      IQ result=IQ.createResultIQ(packet);
      String curUsername=null;
      String curPassword=null;
      String curNickname=null;
      Boolean registered=false;
      Collection<Registration> registrations=registrationManager.getRegistrations(from,this.transportType);
      if (registrations.iterator().hasNext()) {
        Registration registration=registrations.iterator().next();
        curUsername=registration.getUsername();
        curPassword=registration.getPassword();
        curNickname=registration.getNickname();
        registered=true;
      }
      if (!registered && !permissionManager.hasAccess(from)) {
        result.setError(Condition.bad_request);
        reply.add(result);
        Message em=new Message();
        em.setType(Message.Type.error);
        em.setTo(packet.getFrom());
        em.setFrom(packet.getTo());
        em.setBody(LocaleUtils.getLocalizedString("gateway.base.registrationdeniedbyacls","gateway"));
        reply.add(em);
        return reply;
      }
      DataForm form=new DataForm(DataForm.Type.form);
      form.addInstruction(getTerminologyRegistration());
      FormField usernameField=form.addField();
      usernameField.setLabel(getTerminologyUsername());
      usernameField.setVariable("username");
      usernameField.setType(FormField.Type.text_single);
      if (curUsername != null) {
        usernameField.addValue(curUsername);
      }
      FormField passwordField=form.addField();
      passwordField.setLabel(getTerminologyPassword());
      passwordField.setVariable("password");
      passwordField.setType(FormField.Type.text_private);
      if (curPassword != null) {
        passwordField.addValue(curPassword);
      }
      String nicknameTerm=getTerminologyNickname();
      if (nicknameTerm != null) {
        FormField nicknameField=form.addField();
        nicknameField.setLabel(nicknameTerm);
        nicknameField.setVariable("nick");
        nicknameField.setType(FormField.Type.text_single);
        if (curNickname != null) {
          nicknameField.addValue(curNickname);
        }
      }
      response.add(form.getElement());
      response.addElement("instructions").addText(getTerminologyRegistration());
      if (registered) {
        response.addElement("registered");
        response.addElement("username").addText(curUsername);
        if (curPassword == null) {
          response.addElement("password");
        }
 else {
          response.addElement("password").addText(curPassword);
        }
        if (nicknameTerm != null) {
          if (curNickname == null) {
            response.addElement("nick");
          }
 else {
            response.addElement("nick").addText(curNickname);
          }
        }
      }
 else {
        response.addElement("username");
        response.addElement("password");
        if (nicknameTerm != null) {
          response.addElement("nick");
        }
      }
      response.addElement("x").addNamespace("",IQ_GATEWAY_REGISTER);
      result.setChildElement(response);
      reply.add(result);
    }
  }
  return reply;
}
