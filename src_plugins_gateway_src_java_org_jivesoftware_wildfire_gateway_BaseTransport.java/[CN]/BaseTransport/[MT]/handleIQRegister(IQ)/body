{
  List<Packet> reply=new ArrayList<Packet>();
  Element remove=packet.getChildElement().element("remove");
  if (remove != null) {
    IQ result=IQ.createResultIQ(packet);
    Collection<Registration> registrations=registrationManager.getRegistrations(packet.getFrom(),this.transportType);
    for (    Registration reg : registrations) {
      registrationManager.deleteRegistration(reg);
    }
    Presence unavailable=new Presence(Presence.Type.unavailable);
    unavailable.setTo(packet.getFrom());
    unavailable.setFrom(packet.getTo());
    reply.add(unavailable);
    try {
      Roster roster=rosterManager.getRoster(packet.getFrom().getNode());
      for (      RosterItem ri : roster.getRosterItems()) {
        if (ri.getJid().getDomain() == this.jid.getDomain()) {
          try {
            roster.deleteRosterItem(ri.getJid(),false);
          }
 catch (          Exception e) {
            Log.error("Error removing roster item: " + ri.toString());
          }
        }
      }
    }
 catch (    UserNotFoundException e) {
      Log.error("Error cleaning up contact list of: " + packet.getFrom());
      result.setError(Condition.bad_request);
    }
    reply.add(result);
  }
 else {
    String username=null;
    String password=null;
    try {
      DataForm form=new DataForm(packet.getChildElement().element("x"));
      List<FormField> fields=form.getFields();
      for (      FormField field : fields) {
        String var=field.getVariable();
        if (var.equals("username")) {
          username=field.getValues().get(0);
        }
 else         if (var.equals("password")) {
          password=field.getValues().get(0);
        }
      }
    }
 catch (    Exception e) {
    }
    if (packet.getType() == IQ.Type.set) {
      Element userEl=packet.getChildElement().element("username");
      Element passEl=packet.getChildElement().element("password");
      if (userEl != null) {
        username=userEl.getTextTrim();
      }
      if (passEl != null) {
        password=passEl.getTextTrim();
      }
      if (username == null || password == null) {
        IQ result=IQ.createResultIQ(packet);
        result.setError(Condition.bad_request);
        reply.add(result);
      }
 else {
        Log.info("Registered " + packet.getFrom() + " as "+ username);
        IQ result=IQ.createResultIQ(packet);
        Element response=DocumentHelper.createElement(QName.get("query",IQ_REGISTER));
        result.setChildElement(response);
        reply.add(result);
        Collection<Registration> registrations=registrationManager.getRegistrations(packet.getFrom(),this.transportType);
        Boolean foundReg=false;
        for (        Registration registration : registrations) {
          if (!registration.getUsername().equals(username)) {
            registrationManager.deleteRegistration(registration);
          }
 else {
            registration.setPassword(password);
            foundReg=true;
          }
        }
        if (!foundReg) {
          registrationManager.createRegistration(packet.getFrom(),this.transportType,username,password);
        }
        try {
          addOrUpdateRosterItem(packet.getFrom(),packet.getTo(),this.getDescription(),"Transports");
        }
 catch (        UserNotFoundException e) {
          Log.error("Someone attempted to register with the gateway who is not registered with the server: " + packet.getFrom());
          IQ eresult=IQ.createResultIQ(packet);
          eresult.setError(Condition.bad_request);
          reply.add(eresult);
        }
        Presence p=new Presence(Presence.Type.probe);
        p.setTo(packet.getFrom());
        p.setFrom(packet.getTo());
        reply.add(p);
      }
    }
 else     if (packet.getType() == IQ.Type.get) {
      Element response=DocumentHelper.createElement(QName.get("query",IQ_REGISTER));
      IQ result=IQ.createResultIQ(packet);
      DataForm form=new DataForm(DataForm.Type.form);
      form.addInstruction("Please enter your " + this.getName() + " username and password.");
      FormField usernameField=form.addField();
      usernameField.setLabel("Username");
      usernameField.setVariable("username");
      usernameField.setType(FormField.Type.text_single);
      FormField passwordField=form.addField();
      passwordField.setLabel("Password");
      passwordField.setVariable("password");
      passwordField.setType(FormField.Type.text_private);
      response.addElement("instructions").addText("Please enter your " + this.getName() + " username and password.");
      response.addElement("username");
      response.addElement("password");
      result.setChildElement(response);
      reply.add(result);
    }
  }
  return reply;
}
