{
  List<Packet> reply=new ArrayList<Packet>();
  JID from=packet.getFrom();
  JID to=packet.getTo();
  Element remove=packet.getChildElement().element("remove");
  if (remove != null) {
    IQ result=IQ.createResultIQ(packet);
    Presence unavailable=new Presence(Presence.Type.unavailable);
    unavailable.setTo(from);
    unavailable.setFrom(to);
    reply.add(unavailable);
    try {
      this.deleteRegistration(from);
    }
 catch (    UserNotFoundException e) {
      Log.error("Error cleaning up contact list of: " + from);
      result.setError(Condition.bad_request);
    }
    reply.add(result);
  }
 else {
    String username=null;
    String password=null;
    try {
      DataForm form=new DataForm(packet.getChildElement().element("x"));
      List<FormField> fields=form.getFields();
      for (      FormField field : fields) {
        String var=field.getVariable();
        if (var.equals("username")) {
          username=field.getValues().get(0);
        }
 else         if (var.equals("password")) {
          password=field.getValues().get(0);
        }
      }
    }
 catch (    Exception e) {
    }
    if (packet.getType() == IQ.Type.set) {
      Element userEl=packet.getChildElement().element("username");
      Element passEl=packet.getChildElement().element("password");
      if (userEl != null) {
        username=userEl.getTextTrim();
      }
      if (passEl != null) {
        password=passEl.getTextTrim();
      }
      if (username == null || password == null) {
        IQ result=IQ.createResultIQ(packet);
        result.setError(Condition.bad_request);
        reply.add(result);
      }
 else {
        Log.info("Registered " + packet.getFrom() + " as "+ username);
        IQ result=IQ.createResultIQ(packet);
        Element response=DocumentHelper.createElement(QName.get("query",IQ_REGISTER));
        result.setChildElement(response);
        reply.add(result);
        try {
          this.addNewRegistration(from,username,password);
        }
 catch (        UserNotFoundException e) {
          Log.error("Someone attempted to register with the gateway who is not registered with the server: " + from);
          IQ eresult=IQ.createResultIQ(packet);
          eresult.setError(Condition.bad_request);
          reply.add(eresult);
        }
        Presence p=new Presence(Presence.Type.probe);
        p.setTo(from);
        p.setFrom(to);
        reply.add(p);
      }
    }
 else     if (packet.getType() == IQ.Type.get) {
      Element response=DocumentHelper.createElement(QName.get("query",IQ_REGISTER));
      IQ result=IQ.createResultIQ(packet);
      DataForm form=new DataForm(DataForm.Type.form);
      form.addInstruction(getTerminologyRegistration());
      FormField usernameField=form.addField();
      usernameField.setLabel(getTerminologyUsername());
      usernameField.setVariable("username");
      usernameField.setType(FormField.Type.text_single);
      FormField passwordField=form.addField();
      passwordField.setLabel(getTerminologyPassword());
      passwordField.setVariable("password");
      passwordField.setType(FormField.Type.text_private);
      response.add(form.getElement());
      response.addElement("instructions").addText(getTerminologyRegistration());
      Collection<Registration> registrations=registrationManager.getRegistrations(from,this.transportType);
      if (registrations.iterator().hasNext()) {
        Registration registration=registrations.iterator().next();
        response.addElement("registered");
        response.addElement("username").addText(registration.getUsername());
        response.addElement("password").addText(registration.getPassword());
      }
 else {
        response.addElement("username");
        response.addElement("password");
      }
      result.setChildElement(response);
      reply.add(result);
    }
  }
  return reply;
}
