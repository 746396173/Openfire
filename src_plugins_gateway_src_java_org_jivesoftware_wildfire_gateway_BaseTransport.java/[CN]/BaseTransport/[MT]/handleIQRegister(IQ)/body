{
  List<Packet> reply=new ArrayList<Packet>();
  Element remove=packet.getChildElement().element("remove");
  if (remove != null) {
    IQ result=IQ.createResultIQ(packet);
    Collection<Registration> registrations=registrationManager.getRegistrations(packet.getFrom(),this.transportType);
    for (    Registration reg : registrations) {
      registrationManager.deleteRegistration(reg);
    }
    Presence unavailable=new Presence(Presence.Type.unavailable);
    unavailable.setTo(packet.getFrom());
    unavailable.setFrom(packet.getTo());
    reply.add(unavailable);
    try {
      Roster roster=rosterManager.getRoster(packet.getFrom().getNode());
      for (      RosterItem ri : roster.getRosterItems()) {
        if (ri.getJid().getDomain() == this.jid.getDomain()) {
          try {
            roster.deleteRosterItem(ri.getJid(),false);
          }
 catch (          Exception e) {
            Log.error("Error removing roster item: " + ri.toString());
          }
        }
      }
    }
 catch (    UserNotFoundException e) {
      Log.error("Error cleaning up contact list of: " + packet.getFrom());
      result.setError(Condition.bad_request);
    }
    reply.add(result);
  }
 else {
    String username=null;
    String password=null;
    if (packet.getType() == IQ.Type.set) {
      Element userEl=packet.getChildElement().element("username");
      Element passEl=packet.getChildElement().element("password");
      if (userEl != null) {
        username=userEl.getTextTrim();
      }
      if (passEl != null) {
        password=passEl.getTextTrim();
      }
      if (username == null || password == null) {
        IQ result=IQ.createResultIQ(packet);
        result.setError(Condition.bad_request);
        reply.add(result);
      }
 else {
        Log.info("Registered " + packet.getFrom() + " as "+ username);
        IQ result=IQ.createResultIQ(packet);
        Element response=DocumentHelper.createElement(QName.get("query",IQ_REGISTER));
        result.setChildElement(response);
        reply.add(result);
        registrationManager.createRegistration(packet.getFrom(),this.transportType,username,password);
        try {
          Roster roster=rosterManager.getRoster(packet.getFrom().getNode());
          try {
            RosterItem gwitem=roster.getRosterItem(packet.getTo());
            if (gwitem.getSubStatus() != RosterItem.SUB_BOTH) {
              gwitem.setSubStatus(RosterItem.SUB_BOTH);
            }
            if (gwitem.getAskStatus() != RosterItem.ASK_NONE) {
              gwitem.setAskStatus(RosterItem.ASK_NONE);
            }
            roster.updateRosterItem(gwitem);
          }
 catch (          UserNotFoundException e) {
            try {
              RosterItem gwitem=roster.createRosterItem(packet.getTo(),true);
              gwitem.setSubStatus(RosterItem.SUB_BOTH);
              gwitem.setAskStatus(RosterItem.ASK_NONE);
              roster.updateRosterItem(gwitem);
            }
 catch (            UserAlreadyExistsException ee) {
              Log.error("getRosterItem claims user exists, but couldn't find via getRosterItem?");
              IQ eresult=IQ.createResultIQ(packet);
              eresult.setError(Condition.bad_request);
              reply.add(eresult);
            }
catch (            Exception ee) {
              Log.error("createRosterItem caused exception: " + ee.getMessage());
              IQ eresult=IQ.createResultIQ(packet);
              eresult.setError(Condition.bad_request);
              reply.add(eresult);
            }
          }
        }
 catch (        UserNotFoundException e) {
          Log.error("Someone attempted to register with the gateway who is not registered with the server: " + packet.getFrom());
          IQ eresult=IQ.createResultIQ(packet);
          eresult.setError(Condition.bad_request);
          reply.add(eresult);
        }
      }
    }
 else     if (packet.getType() == IQ.Type.get) {
      Element response=DocumentHelper.createElement(QName.get("query",IQ_REGISTER));
      IQ result=IQ.createResultIQ(packet);
      response.addElement("instruction").addText("Please enter your " + this.getName() + " username and password.");
      response.addElement("username");
      response.addElement("password");
      result.setChildElement(response);
      reply.add(result);
    }
  }
  return reply;
}
