{
  try {
    Roster roster=rosterManager.getRoster(userjid.getNode());
    Map<JID,TransportBuddy> legacymap=new HashMap<JID,TransportBuddy>();
    for (    TransportBuddy buddy : legacyitems) {
      legacymap.put(convertIDToJID(buddy.getName()),buddy);
    }
    for (    RosterItem ri : roster.getRosterItems()) {
      if (!ri.getJid().getDomain().equals(this.jid.getDomain())) {
        continue;
      }
      if (ri.getJid().getNode() == null) {
        continue;
      }
      JID jid=new JID(ri.getJid().toBareJID());
      if (legacymap.containsKey(jid)) {
        TransportBuddy buddy=legacymap.get(jid);
        try {
          this.addOrUpdateRosterItem(userjid,buddy.getName(),buddy.getNickname(),buddy.getGroup());
        }
 catch (        UserNotFoundException e) {
          Log.error("Failed updating roster item");
        }
        legacymap.remove(jid);
      }
 else {
        try {
          this.removeFromRoster(userjid,jid);
        }
 catch (        UserNotFoundException e) {
          Log.error("Failed removing roster item");
        }
      }
    }
    for (    TransportBuddy buddy : legacymap.values()) {
      try {
        this.addOrUpdateRosterItem(userjid,buddy.getName(),buddy.getNickname(),buddy.getGroup());
      }
 catch (      UserNotFoundException e) {
        Log.error("Failed adding new roster item");
      }
    }
  }
 catch (  UserNotFoundException e) {
    throw new UserNotFoundException("Could not find roster for " + userjid.toString());
  }
}
