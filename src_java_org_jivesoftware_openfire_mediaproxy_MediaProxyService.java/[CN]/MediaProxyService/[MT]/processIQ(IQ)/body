{
  IQ reply=IQ.createResultIQ(iq);
  Element childElement=iq.getChildElement();
  String namespace=childElement.getNamespaceURI();
  Element childElementCopy=iq.getChildElement().createCopy();
  reply.setChildElement(childElementCopy);
  if ("http://jabber.org/protocol/disco#info".equals(namespace)) {
    reply=XMPPServer.getInstance().getIQDiscoInfoHandler().handleIQ(iq);
    router.route(reply);
    return;
  }
 else   if ("http://jabber.org/protocol/disco#items".equals(namespace)) {
    reply=XMPPServer.getInstance().getIQDiscoItemsHandler().handleIQ(iq);
    router.route(reply);
    return;
  }
 else   if (NAMESPACE.equals(namespace) && enabled) {
    Element candidateElement=childElementCopy.element("candidate");
    String sid=childElementCopy.attribute("sid").getValue() + "-" + iq.getFrom();
    if (candidateElement != null) {
      childElementCopy.remove(candidateElement);
      Element candidate=childElementCopy.addElement("candidate ");
      ProxyCandidate proxyCandidate=mediaProxy.addRelayAgent(sid,iq.getFrom().toString());
      Log.debug(sid);
      proxyCandidate.start();
      candidate.addAttribute("name","voicechannel");
      candidate.addAttribute("ip",mediaProxy.getPublicIP());
      candidate.addAttribute("porta",String.valueOf(proxyCandidate.getLocalPortA()));
      candidate.addAttribute("portb",String.valueOf(proxyCandidate.getLocalPortB()));
      candidate.addAttribute("pass",proxyCandidate.getPass());
    }
 else {
      candidateElement=childElementCopy.element("relay");
      if (candidateElement != null) {
        MediaProxySession session=mediaProxy.getSession(sid);
        Log.debug(sid);
        if (session != null) {
          Attribute pass=candidateElement.attribute("pass");
          if (pass != null && pass.getValue().trim().equals(session.getPass().trim())) {
            Attribute portA=candidateElement.attribute("porta");
            Attribute portB=candidateElement.attribute("portb");
            Attribute hostA=candidateElement.attribute("hosta");
            Attribute hostB=candidateElement.attribute("hostb");
            try {
              if (hostA != null && portA != null) {
                for (int i=0; i < 2; i++) {
                  session.sendFromPortA(hostB.getValue(),Integer.parseInt(portB.getValue()));
                }
              }
            }
 catch (            Exception e) {
              Log.error(e);
            }
          }
 else {
            reply.setError(PacketError.Condition.forbidden);
          }
        }
        childElementCopy.remove(candidateElement);
      }
 else {
        candidateElement=childElementCopy.element("publicip");
        if (candidateElement != null) {
          childElementCopy.remove(candidateElement);
          Element publicIp=childElementCopy.addElement("publicip");
          try {
            String ip=sessionManager.getSession(iq.getFrom()).getHostAddress();
            if (ip != null) {
              publicIp.addAttribute("ip",ip);
            }
          }
 catch (          UnknownHostException e) {
            Log.error(e);
          }
        }
 else {
          childElementCopy.remove(candidateElement);
          reply.setError(PacketError.Condition.forbidden);
        }
      }
    }
  }
 else {
    reply.setError(PacketError.Condition.service_unavailable);
  }
  try {
    if (Log.isDebugEnabled()) {
      Log.debug("RETURNED:" + reply.toXML());
    }
    router.route(reply);
  }
 catch (  Exception e) {
    Log.error(e);
  }
}
