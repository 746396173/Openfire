{
  super.handleSnacResponse(e);
  SnacCommand cmd=e.getSnacCommand();
  if (cmd instanceof LocRightsCmd) {
    request(new SetInfoCmd(new InfoData("oscargateway",null,getMainSession().getCapabilities(),null)));
    request(new MyInfoRequest());
  }
 else   if (cmd instanceof ParamInfoCmd) {
    ParamInfoCmd pic=(ParamInfoCmd)cmd;
    ParamInfo info=pic.getParamInfo();
    request(new SetParamInfoCmd(new ParamInfo(0,info.getFlags() | ParamInfo.FLAG_TYPING_NOTIFICATION,8000,info.getMaxSenderWarning(),info.getMaxReceiverWarning(),0)));
  }
 else   if (cmd instanceof ServiceRedirect) {
    ServiceRedirect sr=(ServiceRedirect)cmd;
    getMainSession().connectToService(sr.getSnacFamily(),sr.getRedirectHost(),sr.getCookie());
  }
 else   if (cmd instanceof SsiDataCmd) {
    SsiDataCmd sdc=(SsiDataCmd)cmd;
    List<SsiItem> items=sdc.getItems();
    for (    SsiItem item : items) {
      SsiItemObj obj=itemFactory.getItemObj(item);
      if (obj instanceof BuddyItem) {
        BuddyItem bi=(BuddyItem)obj;
        Log.debug("OSCAR: got buddy item " + bi);
        getMainSession().getSsiHierarchy().gotBuddy(bi);
      }
 else       if (obj instanceof GroupItem) {
        GroupItem gi=(GroupItem)obj;
        Log.debug("OSCAR: got group item " + gi);
        getMainSession().getSsiHierarchy().gotGroup(gi);
      }
 else       if (obj instanceof IconItem) {
        IconItem ii=(IconItem)obj;
        Log.debug("OSCAR: got icon item " + ii);
        getMainSession().getSsiHierarchy().gotIconItem(ii);
      }
 else       if (obj instanceof VisibilityItem) {
        VisibilityItem vi=(VisibilityItem)obj;
        Log.debug("OSCAR: got visibility item " + vi);
        getMainSession().getSsiHierarchy().gotVisibilityItem(vi);
      }
 else {
        Log.debug("OSCAR: got item we're not handling " + obj);
      }
    }
    if (sdc.getLastModDate() != 0) {
      request(new ActivateSsiCmd());
      clientReady();
      getMainSession().setLoginStatus(TransportLoginStatus.LOGGED_IN);
      getMainSession().gotCompleteSSI();
    }
  }
 else   if (cmd instanceof OfflineMsgIcqCmd) {
    OfflineMsgIcqCmd omic=(OfflineMsgIcqCmd)cmd;
    String sn=String.valueOf(omic.getFromUIN());
    Date whenSent=omic.getDate();
    ByteBlock block=omic.getIcqData();
    final int len=LEBinaryTools.getUShort(block,12) - 1;
    String msg=OscarTools.getString(block.subBlock(14,len),null);
    msg=StringUtils.unescapeFromXML(OscarTools.stripHtml(msg));
    getMainSession().getTransport().sendOfflineMessage(getMainSession().getJID(),getMainSession().getTransport().convertIDToJID(sn),msg,whenSent,"Offline Message");
  }
 else   if (cmd instanceof OfflineMsgDoneCmd) {
    request(new OfflineMsgIcqAckCmd(getMainSession().getUIN(),(int)getMainSession().nextIcqId()));
  }
 else   if (cmd instanceof MetaShortInfoCmd) {
  }
 else   if (cmd instanceof AuthReplyCmd) {
    AuthReplyCmd ar=(AuthReplyCmd)cmd;
    if (ar.isAccepted()) {
      Presence p=new Presence();
      p.setType(Presence.Type.subscribed);
      p.setTo(getMainSession().getJID());
      p.setFrom(getMainSession().getTransport().convertIDToJID(ar.getSender()));
      getMainSession().getTransport().sendPacket(p);
    }
 else {
      Presence p=new Presence();
      p.setType(Presence.Type.unsubscribed);
      p.setTo(getMainSession().getJID());
      p.setFrom(getMainSession().getTransport().convertIDToJID(ar.getSender()));
      getMainSession().getTransport().sendPacket(p);
    }
  }
 else   if (cmd instanceof AuthFutureCmd) {
    AuthFutureCmd af=(AuthFutureCmd)cmd;
    Presence p=new Presence();
    p.setType(Presence.Type.subscribe);
    p.setTo(getMainSession().getJID());
    p.setFrom(getMainSession().getTransport().convertIDToJID(af.getUin()));
    getMainSession().getTransport().sendPacket(p);
  }
 else   if (cmd instanceof SnacError) {
    SnacError se=(SnacError)cmd;
    if (se.getErrorCode() == SnacError.CODE_REFUSED_BY_CLIENT) {
      getMainSession().getTransport().sendMessage(getMainSession().getJID(),getMainSession().getTransport().getJID(),LocaleUtils.getLocalizedString("gateway.aim.msgrefused","kraken"));
    }
  }
}
