{
  SnacCommand cmd=e.getSnacCommand();
  if (cmd instanceof KeyResponse) {
    KeyResponse kr=(KeyResponse)cmd;
    ByteBlock authkey=kr.getKey();
    ClientVersionInfo version=new ClientVersionInfo("AOL Instant Messenger, version 5.5.3415/WIN32",-1,5,5,0,3415,239);
    request(new AuthRequest(oscarSession.getRegistration().getUsername(),oscarSession.getRegistration().getPassword(),version,authkey));
  }
 else   if (cmd instanceof AuthResponse) {
    AuthResponse ar=(AuthResponse)cmd;
    int error=ar.getErrorCode();
    if (error != -1) {
      String errormsg;
switch (error) {
case (AuthResponse.ERROR_ACCOUNT_DELETED):
{
          errormsg="This account has been deleted.";
          break;
        }
case (AuthResponse.ERROR_BAD_INPUT):
{
        errormsg="Illegal screen name/uin specified.";
        break;
      }
case (AuthResponse.ERROR_BAD_PASSWORD):
{
      errormsg="Incorrect password specified.";
      break;
    }
case (AuthResponse.ERROR_CLIENT_TOO_OLD):
{
    errormsg="Plugin is identifying itself as too old of a client.  Please contact the develop.";
    break;
  }
case (AuthResponse.ERROR_CONNECTING_TOO_MUCH_A):
case (AuthResponse.ERROR_CONNECTING_TOO_MUCH_B):
{
  errormsg="You have connected too many times in too short of a time frame.  Please wait around 15 minutes before trying again.";
  break;
}
case (AuthResponse.ERROR_INVALID_SN_OR_PASS_A):
case (AuthResponse.ERROR_INVALID_SN_OR_PASS_B):
{
errormsg="Invalid screen name or password specified.  Please re-register with a valid screen name and password.";
break;
}
case (AuthResponse.ERROR_SIGNON_BLOCKED):
{
errormsg="Your account has been temporarily suspended.";
break;
}
default :
{
errormsg="Unknown error code returned from AIM: " + error + "\nURL: "+ ar.getErrorUrl();
}
}
Message m=new Message();
m.setType(Message.Type.error);
m.setTo(getMainSession().getJID());
m.setFrom(getMainSession().getTransport().getJID());
m.setBody(errormsg);
getMainSession().getTransport().sendPacket(m);
if (getMainSession().getTransport().getLegacyMode()) {
Presence p=new Presence();
p.setTo(getMainSession().getJID());
p.setFrom(getMainSession().getTransport().getJID());
p.setType(Presence.Type.unavailable);
getMainSession().getTransport().sendPacket(p);
}
getMainSession().setLoginStatus(TransportLoginStatus.LOGGED_OUT);
}
 else {
getMainSession().setLoginStatus(TransportLoginStatus.LOGGED_IN);
oscarSession.startBosConn(ar.getServer(),ar.getPort(),ar.getCookie());
Log.info("OSCAR connection to " + ar.getServer() + ":"+ ar.getPort());
}
disconnect();
}
}
