{
  boolean isComplete=false;
  boolean success=false;
  while (!isComplete) {
    if (doc.getNamespace().asXML().equals(SASL_NAMESPACE)) {
      ElementType type=ElementType.valueof(doc.getName());
switch (type) {
case AUTH:
        String mechanism=doc.attributeValue("mechanism");
      if (mechanism.equalsIgnoreCase("PLAIN")) {
        if (getSupportedMechanisms().contains("PLAIN")) {
          success=doPlainAuthentication(doc);
        }
 else {
          success=false;
        }
        isComplete=true;
      }
 else       if (mechanism.equalsIgnoreCase("ANONYMOUS")) {
        if (getSupportedMechanisms().contains("ANONYMOUS")) {
          success=doAnonymousAuthentication();
        }
 else {
          success=false;
        }
        isComplete=true;
      }
 else       if (mechanism.equalsIgnoreCase("EXTERNAL")) {
        success=doExternalAuthentication(doc);
        isComplete=true;
      }
 else {
        if (getSupportedMechanisms().contains(mechanism)) {
          try {
            Map<String,String> props=new TreeMap<String,String>();
            props.put(Sasl.QOP,"auth");
            if (mechanism.equals("GSSAPI")) {
              props.put(Sasl.SERVER_AUTH,"TRUE");
            }
            SaslServer ss=Sasl.createSaslServer(mechanism,"xmpp",session.getServerName(),props,new XMPPCallbackHandler());
            byte[] token=new byte[0];
            if (doc.isTextOnly()) {
              token=StringUtils.decodeBase64(doc.getTextTrim());
              if (token == null) {
                token=new byte[0];
              }
            }
            byte[] challenge=ss.evaluateResponse(token);
            sendChallenge(challenge);
            session.setSessionData("SaslServer",ss);
          }
 catch (          SaslException e) {
            isComplete=true;
            Log.warn("SaslException",e);
            authenticationFailed();
          }
        }
 else {
          Log.warn("Client wants to do a MECH we don't support: '" + mechanism + "'");
          isComplete=true;
          success=false;
        }
      }
    break;
case RESPONSE:
  SaslServer ss=(SaslServer)session.getSessionData("SaslServer");
if (ss != null) {
  boolean ssComplete=ss.isComplete();
  String response=doc.getTextTrim();
  try {
    if (ssComplete) {
      authenticationSuccessful(ss.getAuthorizationID(),null);
      success=true;
      isComplete=true;
    }
 else {
      byte[] data=StringUtils.decodeBase64(response);
      if (data == null) {
        data=new byte[0];
      }
      byte[] challenge=ss.evaluateResponse(data);
      if (ss.isComplete()) {
        authenticationSuccessful(ss.getAuthorizationID(),challenge);
        success=true;
        isComplete=true;
      }
 else {
        sendChallenge(challenge);
      }
    }
  }
 catch (  SaslException e) {
    isComplete=true;
    Log.warn("SaslException",e);
    authenticationFailed();
  }
}
 else {
  isComplete=true;
  Log.fatal("SaslServer is null, should be valid object instead.");
  authenticationFailed();
}
break;
default :
break;
}
if (!isComplete) {
doc=reader.parseDocument().getRootElement();
if (doc == null) {
isComplete=true;
}
}
}
 else {
isComplete=true;
Log.debug("Unknown namespace sent in auth element: " + doc.asXML());
authenticationFailed();
}
}
session.removeSessionData("SaslServer");
return success;
}
