{
synchronized (this) {
    if (running) {
      return;
    }
    running=true;
  }
  try {
    running=true;
    String pluginDirs=System.getProperty("pluginDirs");
    if (pluginDirs != null) {
      StringTokenizer st=new StringTokenizer(pluginDirs,", ");
      while (st.hasMoreTokens()) {
        String dir=st.nextToken();
        if (!devPlugins.contains(dir)) {
          loadPlugin(Paths.get(dir));
          devPlugins.add(dir);
        }
      }
    }
    Set<String> jarSet=new HashSet<>();
    try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(pluginDirectory,new DirectoryStream.Filter<Path>(){
      @Override public boolean accept(      Path pathname) throws IOException {
        String fileName=pathname.getFileName().toString().toLowerCase();
        return (fileName.endsWith(".jar") || fileName.endsWith(".war"));
      }
    }
)){
      for (      Path jarFile : directoryStream) {
        jarSet.add(jarFile.getFileName().toString().toLowerCase());
        String pluginName=jarFile.getFileName().toString().substring(0,jarFile.getFileName().toString().length() - 4).toLowerCase();
        Path dir=pluginDirectory.resolve(pluginName);
        pluginFiles.put(pluginName,jarFile);
        if (Files.notExists(dir)) {
          unzipPlugin(pluginName,jarFile,dir);
        }
 else         if (Files.getLastModifiedTime(jarFile).toMillis() > Files.getLastModifiedTime(dir).toMillis()) {
          if (firstRun) {
            int count=0;
            while (!deleteDir(dir) && count++ < 5) {
              Thread.sleep(1000);
            }
          }
 else {
            unloadPlugin(pluginName);
          }
          if (Files.notExists(dir)) {
            unzipPlugin(pluginName,jarFile,dir);
          }
        }
      }
    }
     List<Path> dirs=new ArrayList<>();
    try (DirectoryStream<Path> directoryStream=Files.newDirectoryStream(pluginDirectory,new DirectoryStream.Filter<Path>(){
      @Override public boolean accept(      Path pathname) throws IOException {
        return Files.isDirectory(pathname);
      }
    }
)){
      for (      Path path : directoryStream) {
        dirs.add(path);
      }
    }
     Collections.sort(dirs,new Comparator<Path>(){
      public int compare(      Path file1,      Path file2){
        if (file1.getFileName().toString().equals("admin")) {
          return -1;
        }
 else         if (file2.getFileName().toString().equals("admin")) {
          return 1;
        }
 else {
          return file1.compareTo(file2);
        }
      }
    }
);
    List<String> toDelete=new ArrayList<>();
    for (    Path pluginDir : dirs) {
      String pluginName=pluginDir.getFileName().toString();
      if (pluginName.equals("admin")) {
        continue;
      }
      if (!jarSet.contains(pluginName + ".jar")) {
        if (!jarSet.contains(pluginName + ".war")) {
          Log.info("Plugin '{}' was removed from the file system.",pluginName);
          toDelete.add(pluginName);
        }
      }
    }
    for (    String pluginName : toDelete) {
      unloadPlugin(pluginName);
    }
    boolean somethingChanged=false;
    for (    Path dirFile : dirs) {
      if (Files.exists(dirFile) && !plugins.containsKey(dirFile.getFileName().toString())) {
        somethingChanged=true;
        loadPlugin(dirFile);
      }
    }
    if (somethingChanged) {
      Log.info("Finished processing all plugins.");
    }
    if (!XMPPServer.getInstance().isSetupMode()) {
      executed=true;
    }
    firePluginsMonitored();
  }
 catch (  Throwable e) {
    Log.error("An unexpected exception occurred:",e);
  }
synchronized (this) {
    running=false;
  }
  firstRun=false;
}
