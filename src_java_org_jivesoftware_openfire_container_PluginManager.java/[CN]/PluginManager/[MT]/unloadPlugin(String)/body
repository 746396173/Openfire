{
  Log.debug("PluginManager: Unloading plugin " + pluginName);
  Plugin plugin=plugins.get(pluginName);
  if (plugin != null) {
    pluginDevelopment.remove(plugin);
    if (parentPluginMap.containsKey(plugin)) {
      String[] childPlugins=parentPluginMap.get(plugin).toArray(new String[parentPluginMap.get(plugin).size()]);
      parentPluginMap.remove(plugin);
      for (      String childPlugin : childPlugins) {
        Log.debug("Unloading child plugin: " + childPlugin);
        childPluginMap.remove(plugins.get(childPlugin));
        unloadPlugin(childPlugin);
      }
    }
    Path webXML=pluginDirectory.resolve(pluginName).resolve("web").resolve("WEB-INF").resolve("web.xml");
    if (Files.exists(webXML)) {
      AdminConsole.removeModel(pluginName);
      PluginServlet.unregisterServlets(webXML.toFile());
    }
    Path customWebXML=pluginDirectory.resolve(pluginName).resolve("web").resolve("WEB-INF").resolve("web-custom.xml");
    if (Files.exists(customWebXML)) {
      PluginServlet.unregisterServlets(customWebXML.toFile());
    }
    try {
      plugin.destroyPlugin();
    }
 catch (    Exception e) {
      Log.error(e.getMessage(),e);
    }
  }
  plugins.remove(pluginName);
  Path pluginFile=pluginDirs.remove(plugin);
  PluginClassLoader pluginLoader=classloaders.remove(plugin);
  if (pluginLoader != null) {
    pluginLoader.unloadJarFiles();
  }
 else {
    Log.warn("No plugin loader found for " + pluginName);
  }
  Path dir=pluginDirectory.resolve(pluginName);
  try {
    Thread.sleep(2000);
    System.gc();
    int count=0;
    while (!deleteDir(dir) && count++ < 5) {
      Log.warn("Error unloading plugin " + pluginName + ". "+ "Will attempt again momentarily.");
      Thread.sleep(8000);
      System.gc();
    }
  }
 catch (  InterruptedException e) {
    Log.error(e.getMessage(),e);
  }
  if (plugin != null && Files.notExists(dir)) {
    PluginCacheRegistry.getInstance().unregisterCaches(pluginName);
    if (childPluginMap.containsKey(plugin)) {
      String parentPluginName=childPluginMap.get(plugin);
      Plugin parentPlugin=plugins.get(parentPluginName);
      List<String> childrenPlugins=parentPluginMap.get(parentPlugin);
      childrenPlugins.remove(pluginName);
      childPluginMap.remove(plugin);
      if (parentPlugin instanceof PluginListener) {
        PluginListener listener;
        listener=(PluginListener)parentPlugin;
        listener.pluginDestroyed(pluginName,plugin);
      }
      unloadPlugin(parentPluginName);
    }
    firePluginDestroyedEvent(pluginName,plugin);
  }
 else   if (plugin != null) {
    plugins.put(pluginName,plugin);
    pluginDirs.put(plugin,pluginFile);
    classloaders.put(plugin,pluginLoader);
  }
}
