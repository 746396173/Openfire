{
  if (XMPPServer.getInstance().isSetupMode() && !(pluginDir.getName().equals("admin"))) {
    return;
  }
  Log.debug("PluginManager: Loading plugin " + pluginDir.getName());
  Plugin plugin;
  try {
    File pluginConfig=new File(pluginDir,"plugin.xml");
    if (pluginConfig.exists()) {
      SAXReader saxReader=new SAXReader();
      saxReader.setEncoding("UTF-8");
      Document pluginXML=saxReader.read(pluginConfig);
      Element minServerVersion=(Element)pluginXML.selectSingleNode("/plugin/minServerVersion");
      if (minServerVersion != null) {
        Version requiredVersion=new Version(minServerVersion.getTextTrim());
        Version currentVersion=XMPPServer.getInstance().getServerInfo().getVersion();
        if (requiredVersion.isNewerThan(currentVersion)) {
          String msg="Ignoring plugin " + pluginDir.getName() + ": requires "+ "server version "+ requiredVersion;
          Log.warn(msg);
          System.out.println(msg);
          return;
        }
      }
      PluginClassLoader pluginLoader;
      Element parentPluginNode=(Element)pluginXML.selectSingleNode("/plugin/parentPlugin");
      String pluginName=pluginDir.getName();
      String webRootKey=pluginName + ".webRoot";
      String classesDirKey=pluginName + ".classes";
      String webRoot=System.getProperty(webRootKey);
      String classesDir=System.getProperty(classesDirKey);
      if (webRoot != null) {
        final File compilationClassesDir=new File(pluginDir,"classes");
        if (!compilationClassesDir.exists()) {
          compilationClassesDir.mkdir();
        }
        compilationClassesDir.deleteOnExit();
      }
      if (parentPluginNode != null) {
        String parentPlugin=parentPluginNode.getTextTrim();
        if (plugins.containsKey(parentPlugin)) {
          pluginLoader=classloaders.get(getPlugin(parentPlugin));
          pluginLoader.addDirectory(pluginDir,classesDir != null);
        }
 else {
          if (pluginName.compareTo(parentPlugin) < 0) {
            File file=new File(pluginDir.getParentFile(),parentPlugin + ".jar");
            if (file.exists()) {
              return;
            }
 else {
              file=new File(pluginDir.getParentFile(),parentPlugin + ".war");
              if (file.exists()) {
                return;
              }
 else {
                String msg="Ignoring plugin " + pluginName + ": parent plugin "+ parentPlugin+ " not present.";
                Log.warn(msg);
                System.out.println(msg);
                return;
              }
            }
          }
 else {
            String msg="Ignoring plugin " + pluginName + ": parent plugin "+ parentPlugin+ " not present.";
            Log.warn(msg);
            System.out.println(msg);
            return;
          }
        }
      }
 else {
        pluginLoader=new PluginClassLoader();
        pluginLoader.addDirectory(pluginDir,classesDir != null);
      }
      PluginDevEnvironment dev=null;
      if (webRoot != null || classesDir != null) {
        dev=new PluginDevEnvironment();
        System.out.println("Plugin " + pluginName + " is running in development mode.");
        Log.info("Plugin " + pluginName + " is running in development mode.");
        if (webRoot != null) {
          File webRootDir=new File(webRoot);
          if (!webRootDir.exists()) {
            webRootDir=new File(pluginDir,webRoot);
          }
          if (webRootDir.exists()) {
            dev.setWebRoot(webRootDir);
          }
        }
        if (classesDir != null) {
          File classes=new File(classesDir);
          if (!classes.exists()) {
            classes=new File(pluginDir,classesDir);
          }
          if (classes.exists()) {
            dev.setClassesDir(classes);
            pluginLoader.addURLFile(classes.getAbsoluteFile().toURL());
          }
        }
      }
      String className=pluginXML.selectSingleNode("/plugin/class").getText().trim();
      plugin=(Plugin)pluginLoader.loadClass(className).newInstance();
      if (parentPluginNode != null) {
        String parentPlugin=parentPluginNode.getTextTrim();
        if (plugins.containsKey(parentPlugin)) {
          pluginLoader=classloaders.get(getPlugin(parentPlugin));
          classloaders.put(plugin,pluginLoader);
        }
      }
      plugins.put(pluginName,plugin);
      pluginDirs.put(plugin,pluginDir);
      if (parentPluginNode != null) {
        String parentPlugin=parentPluginNode.getTextTrim();
        List<String> childrenPlugins=parentPluginMap.get(plugins.get(parentPlugin));
        if (childrenPlugins == null) {
          childrenPlugins=new ArrayList<String>();
          parentPluginMap.put(plugins.get(parentPlugin),childrenPlugins);
        }
        childrenPlugins.add(pluginName);
        childPluginMap.put(plugin,parentPlugin);
      }
 else {
        classloaders.put(plugin,pluginLoader);
      }
      if (!DbConnectionManager.getSchemaManager().checkPluginSchema(plugin)) {
        Log.error(pluginName + " - " + LocaleUtils.getLocalizedString("upgrade.database.failure"));
        System.out.println(pluginName + " - " + LocaleUtils.getLocalizedString("upgrade.database.failure"));
      }
      File webXML=new File(pluginDir,"web" + File.separator + "WEB-INF"+ File.separator+ "web.xml");
      if (webXML.exists()) {
        PluginServlet.registerServlets(this,plugin,webXML);
      }
      File customWebXML=new File(pluginDir,"web" + File.separator + "WEB-INF"+ File.separator+ "web-custom.xml");
      if (customWebXML.exists()) {
        PluginServlet.registerServlets(this,plugin,customWebXML);
      }
      if (dev != null) {
        pluginDevelopment.put(plugin,dev);
      }
      configureCaches(pluginDir,pluginName);
      ClassLoader oldLoader=Thread.currentThread().getContextClassLoader();
      Thread.currentThread().setContextClassLoader(pluginLoader);
      plugin.initializePlugin(this,pluginDir);
      Thread.currentThread().setContextClassLoader(oldLoader);
      Element adminElement=(Element)pluginXML.selectSingleNode("/plugin/adminconsole");
      if (adminElement != null) {
        Element appName=(Element)adminElement.selectSingleNode("/plugin/adminconsole/global/appname");
        if (appName != null) {
          appName.addAttribute("plugin",pluginName);
        }
        Element imageEl=(Element)adminElement.selectSingleNode("/plugin/adminconsole/global/logo-image");
        if (imageEl != null) {
          imageEl.setText("plugins/" + pluginName + "/"+ imageEl.getText());
          imageEl.addAttribute("plugin",pluginName);
        }
        imageEl=(Element)adminElement.selectSingleNode("/plugin/adminconsole/global/login-image");
        if (imageEl != null) {
          imageEl.setText("plugins/" + pluginName + "/"+ imageEl.getText());
          imageEl.addAttribute("plugin",pluginName);
        }
        List urls=adminElement.selectNodes("//@url");
        for (        Object url : urls) {
          Attribute attr=(Attribute)url;
          attr.setValue("plugins/" + pluginName + "/"+ attr.getValue());
        }
        String[] elementNames=new String[]{"tab","sidebar","item"};
        for (        String elementName : elementNames) {
          List values=adminElement.selectNodes("//" + elementName);
          for (          Object value : values) {
            Element element=(Element)value;
            if (element.attribute("name") != null || element.attribute("value") != null) {
              element.addAttribute("plugin",pluginName);
            }
          }
        }
        AdminConsole.addModel(pluginName,adminElement);
      }
      firePluginCreatedEvent(pluginName,plugin);
    }
 else {
      Log.warn("Plugin " + pluginDir + " could not be loaded: no plugin.xml file found");
    }
  }
 catch (  Throwable e) {
    Log.error("Error loading plugin: " + pluginDir,e);
  }
}
