{
  final String pluginName=pluginDir.getFileName().toString();
  if (XMPPServer.getInstance().isSetupMode() && !(pluginName.equals("admin"))) {
    return false;
  }
  if (failureToLoadCount.containsKey(pluginName) && failureToLoadCount.get(pluginName) > JiveGlobals.getIntProperty("plugins.loading.retries",5)) {
    Log.debug("The unloaded file for plugin '{}' is silently ignored, as it has failed to load repeatedly.",pluginName);
    return false;
  }
  Log.debug("Loading plugin '{}'...",pluginName);
  try {
    final Path pluginConfig=pluginDir.resolve("plugin.xml");
    if (!Files.exists(pluginConfig)) {
      Log.warn("Plugin '{}' could not be loaded: no plugin.xml file found.",pluginName);
      failureToLoadCount.put(pluginName,Integer.MAX_VALUE);
      return false;
    }
    final SAXReader saxReader=new SAXReader();
    saxReader.setEncoding("UTF-8");
    final Document pluginXML=saxReader.read(pluginConfig.toFile());
    final Element minServerVersion=(Element)pluginXML.selectSingleNode("/plugin/minServerVersion");
    if (minServerVersion != null) {
      final Version requiredVersion=new Version(minServerVersion.getTextTrim());
      final Version currentVersion=XMPPServer.getInstance().getServerInfo().getVersion();
      if (requiredVersion.isNewerThan(currentVersion)) {
        Log.warn("Ignoring plugin '{}': requires server version {}. Current server version is {}.",pluginName,requiredVersion,currentVersion);
        failureToLoadCount.put(pluginName,Integer.MAX_VALUE);
        return false;
      }
    }
    final String devModeClassesDir=System.getProperty(pluginName + ".classes");
    final String devModewebRoot=System.getProperty(pluginName + ".webRoot");
    final boolean devMode=devModewebRoot != null || devModeClassesDir != null;
    final PluginDevEnvironment dev=(devMode ? configurePluginDevEnvironment(pluginDir,devModeClassesDir,devModewebRoot) : null);
    final PluginClassLoader pluginLoader;
    String parentPluginName=null;
    Plugin parentPlugin=null;
    final Element parentPluginNode=(Element)pluginXML.selectSingleNode("/plugin/parentPlugin");
    if (parentPluginNode != null) {
      for (      final Map.Entry<String,Plugin> entry : plugins.entrySet()) {
        if (entry.getKey().equalsIgnoreCase(parentPluginNode.getTextTrim())) {
          parentPluginName=entry.getKey();
          parentPlugin=entry.getValue();
          break;
        }
      }
      if (parentPlugin == null) {
        Log.info("Unable to load plugin '{}': parent plugin '{}' has not been loaded.",pluginName,parentPluginNode.getTextTrim());
        Integer count=failureToLoadCount.get(pluginName);
        if (count == null) {
          count=0;
        }
        failureToLoadCount.put(pluginName,++count);
        return false;
      }
      pluginLoader=classloaders.get(parentPlugin);
    }
 else {
      pluginLoader=new PluginClassLoader();
    }
    pluginLoader.addDirectory(pluginDir.toFile(),devMode);
    if (dev != null && dev.getClassesDir() != null) {
      pluginLoader.addURLFile(dev.getClassesDir().toURI().toURL());
    }
    final String className=pluginXML.selectSingleNode("/plugin/class").getText().trim();
    final Plugin plugin=(Plugin)pluginLoader.loadClass(className).newInstance();
    classloaders.put(plugin,pluginLoader);
    plugins.put(pluginName,plugin);
    pluginDirs.put(plugin,pluginDir);
    if (dev != null) {
      pluginDevelopment.put(plugin,dev);
    }
    if (parentPlugin != null) {
      List<String> childrenPlugins=parentPluginMap.get(parentPlugin);
      if (childrenPlugins == null) {
        childrenPlugins=new ArrayList<>();
        parentPluginMap.put(parentPlugin,childrenPlugins);
      }
      childrenPlugins.add(pluginName);
      childPluginMap.put(plugin,parentPluginName);
    }
    if (!DbConnectionManager.getSchemaManager().checkPluginSchema(plugin)) {
      Log.error("Error while loading plugin '{}': {}",pluginName,LocaleUtils.getLocalizedString("upgrade.database.failure"));
    }
    final Path webXML=pluginDir.resolve("web").resolve("WEB-INF").resolve("web.xml");
    if (Files.exists(webXML)) {
      PluginServlet.registerServlets(this,plugin,webXML.toFile());
    }
    final Path customWebXML=pluginDir.resolve("web").resolve("WEB-INF").resolve("web-custom.xml");
    if (Files.exists(customWebXML)) {
      PluginServlet.registerServlets(this,plugin,customWebXML.toFile());
    }
    configureCaches(pluginDir,pluginName);
    final ClassLoader oldLoader=Thread.currentThread().getContextClassLoader();
    Thread.currentThread().setContextClassLoader(pluginLoader);
    plugin.initializePlugin(this,pluginDir.toFile());
    Log.debug("Initialized plugin '{}'.",pluginName);
    Thread.currentThread().setContextClassLoader(oldLoader);
    final Element adminElement=(Element)pluginXML.selectSingleNode("/plugin/adminconsole");
    if (adminElement != null) {
      final Element appName=(Element)adminElement.selectSingleNode("/plugin/adminconsole/global/appname");
      if (appName != null) {
        appName.addAttribute("plugin",pluginName);
      }
      Element imageEl=(Element)adminElement.selectSingleNode("/plugin/adminconsole/global/logo-image");
      if (imageEl != null) {
        imageEl.setText("plugins/" + pluginName + "/"+ imageEl.getText());
        imageEl.addAttribute("plugin",pluginName);
      }
      imageEl=(Element)adminElement.selectSingleNode("/plugin/adminconsole/global/login-image");
      if (imageEl != null) {
        imageEl.setText("plugins/" + pluginName + "/"+ imageEl.getText());
        imageEl.addAttribute("plugin",pluginName);
      }
      final List urls=adminElement.selectNodes("//@url");
      for (      final Object url : urls) {
        final Attribute attr=(Attribute)url;
        attr.setValue("plugins/" + pluginName + "/"+ attr.getValue());
      }
      final String[] elementNames=new String[]{"tab","sidebar","item"};
      for (      final String elementName : elementNames) {
        final List values=adminElement.selectNodes("//" + elementName);
        for (        final Object value : values) {
          final Element element=(Element)value;
          if (element.attribute("name") != null || element.attribute("value") != null) {
            element.addAttribute("plugin",pluginName);
          }
        }
      }
      AdminConsole.addModel(pluginName,adminElement);
    }
    firePluginCreatedEvent(pluginName,plugin);
    Log.info("Successfully loaded plugin '{}'.",pluginName);
    return true;
  }
 catch (  Throwable e) {
    Log.error("An exception occurred while loading plugin '{}':",pluginName,e);
    Integer count=failureToLoadCount.get(pluginName);
    if (count == null) {
      count=0;
    }
    failureToLoadCount.put(pluginName,++count);
    return false;
  }
}
