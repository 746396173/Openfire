{
  String workgroupNode=workgroup.getJID().getNode();
  String resource=packet.getFrom().getResource();
  boolean usesAgentResource=workgroupNode.equalsIgnoreCase(resource);
  final JID sender=packet.getFrom();
  Agent agent=null;
  try {
    agent=workgroup.getAgentManager().getAgent(sender);
  }
 catch (  AgentNotFoundException notFound) {
    if (usesAgentResource) {
      throw notFound;
    }
  }
  boolean includesExtension=packet.getChildElement("agent-status","http://jabber.org/protocol/workgroup") != null;
  AgentManager agentManager=workgroup.getAgentManager();
  if (agent != null && !agentManager.isInWorkgroup(agent,workgroup) && includesExtension) {
    throw new AgentNotFoundException();
  }
  if (agent == null || !agentManager.isInWorkgroup(agent,workgroup)) {
    if (packet.isAvailable()) {
      if (!sender.equals(workgroup.getJID())) {
        listeners.add(packet.getFrom());
        sendPresence(packet.getFrom());
      }
    }
 else {
      listeners.remove(packet.getFrom());
    }
    return;
  }
  InterceptorManager interceptorManager=AgentInterceptorManager.getInstance();
  try {
    interceptorManager.invokeInterceptors(workgroup.getJID().toBareJID(),packet,true,false);
    AgentSession agentSession=agent.getAgentSession();
    if (agentSession == null) {
      if (!includesExtension) {
        return;
      }
      agentSession=agent.createSession(packet.getFrom());
      if (agentSession == null) {
        Presence reply=new Presence();
        reply.setID(packet.getID());
        reply.setTo(packet.getFrom());
        reply.setFrom(packet.getTo());
        reply.setError(PacketError.Condition.not_allowed);
        workgroup.send(reply);
        return;
      }
    }
    agentSession.updatePresence(packet);
    if (agentSession.getPresence().getType() == null) {
      agentSession.join(workgroup);
    }
 else {
      agentSession.depart(workgroup);
    }
    interceptorManager.invokeInterceptors(workgroup.getJID().toBareJID(),packet,true,true);
  }
 catch (  PacketRejectedException e) {
    workgroup.rejectPacket(packet,e);
  }
}
