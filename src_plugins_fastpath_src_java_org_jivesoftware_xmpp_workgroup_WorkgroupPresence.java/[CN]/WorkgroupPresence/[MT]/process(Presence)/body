{
  try {
    JID sender=packet.getFrom();
    if (Presence.Type.subscribe == packet.getType()) {
      if (!presenceSubscribers.contains(sender.toBareJID())) {
        createRosterItem(sender);
      }
      Presence reply=new Presence();
      reply.setTo(sender);
      reply.setFrom(workgroup.getJID());
      reply.setType(Presence.Type.subscribed);
      workgroup.send(reply);
      sendPresence(packet.getFrom());
    }
 else     if (Presence.Type.unsubscribe == packet.getType()) {
      deleteRosterItem(sender);
      Presence reply=new Presence();
      reply.setTo(sender);
      reply.setFrom(workgroup.getJID());
      reply.setType(Presence.Type.unsubscribed);
      workgroup.send(reply);
      reply=new Presence();
      reply.setTo(sender);
      reply.setFrom(workgroup.getJID());
      reply.setType(Presence.Type.unavailable);
      workgroup.send(reply);
    }
 else     if (Presence.Type.subscribed == packet.getType()) {
    }
 else     if (Presence.Type.unsubscribed == packet.getType()) {
    }
 else     if (Presence.Type.probe == packet.getType()) {
      sendPresence(packet.getFrom());
    }
 else {
      try {
        agentToWorkgroup(packet);
      }
 catch (      AgentNotFoundException e) {
        Presence reply=new Presence();
        reply.setError(new PacketError(PacketError.Condition.not_authorized));
        reply.setTo(packet.getFrom());
        reply.setFrom(workgroup.getJID());
        workgroup.send(reply);
        StringBuilder errorMessage=new StringBuilder();
        errorMessage.append("Sender: ");
        errorMessage.append(packet.getFrom().toString());
        errorMessage.append(" Workgroup: ");
        errorMessage.append(workgroup.getJID().toString());
        Log.debug(errorMessage.toString(),e);
      }
    }
  }
 catch (  Exception e) {
    Log.error(e.getMessage(),e);
    Presence reply=new Presence();
    reply.setError(new PacketError(PacketError.Condition.internal_server_error));
    reply.setTo(packet.getFrom());
    reply.setFrom(workgroup.getJID());
    workgroup.send(reply);
  }
}
