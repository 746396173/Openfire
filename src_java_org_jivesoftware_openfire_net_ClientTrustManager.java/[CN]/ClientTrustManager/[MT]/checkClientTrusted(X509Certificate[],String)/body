{
  Log.debug("ClientTrustManager: checkClientTrusted(x509Certificates," + string + ") called");
  loadCRL();
  ArrayList<X509Certificate> certs=new ArrayList<X509Certificate>();
  for (int i=0; i < x509Certificates.length; i++) {
    certs.add(x509Certificates[i]);
  }
  boolean verify=JiveGlobals.getBooleanProperty("xmpp.client.certificate.verify",true);
  if (verify) {
    int nSize=x509Certificates.length;
    List<String> peerIdentities=CertificateManager.getPeerIdentities(x509Certificates[0]);
    if (JiveGlobals.getBooleanProperty("xmpp.client.certificate.verify.chain",true)) {
      Principal principalLast=null;
      for (int i=nSize - 1; i >= 0; i--) {
        X509Certificate x509certificate=x509Certificates[i];
        Principal principalIssuer=x509certificate.getIssuerDN();
        Principal principalSubject=x509certificate.getSubjectDN();
        if (principalLast != null) {
          if (principalIssuer.equals(principalLast)) {
            try {
              PublicKey publickey=x509Certificates[i + 1].getPublicKey();
              x509Certificates[i].verify(publickey);
            }
 catch (            GeneralSecurityException generalsecurityexception) {
              throw new CertificateException("signature verification failed of " + peerIdentities);
            }
          }
 else {
            throw new CertificateException("subject/issuer verification failed of " + peerIdentities);
          }
        }
        principalLast=principalSubject;
      }
    }
    if (JiveGlobals.getBooleanProperty("xmpp.client.certificate.verify.root",true)) {
      boolean trusted=false;
      try {
        Enumeration<String> aliases=trustStore.aliases();
        while (aliases.hasMoreElements()) {
          String alias=aliases.nextElement();
          X509Certificate tCert=(X509Certificate)trustStore.getCertificate(alias);
          if (x509Certificates[nSize - 1].equals(tCert)) {
            try {
              PublicKey publickey=tCert.getPublicKey();
              x509Certificates[nSize - 1].verify(publickey);
            }
 catch (            GeneralSecurityException generalsecurityexception) {
              throw new CertificateException("signature verification failed of " + peerIdentities);
            }
            trusted=true;
            break;
          }
 else {
            if (x509Certificates[nSize - 1].getIssuerDN().equals(tCert.getSubjectDN())) {
              try {
                PublicKey publickey=tCert.getPublicKey();
                x509Certificates[nSize - 1].verify(publickey);
              }
 catch (              GeneralSecurityException generalsecurityexception) {
                throw new CertificateException("signature verification failed of " + peerIdentities);
              }
              trusted=true;
              break;
            }
          }
        }
      }
 catch (      KeyStoreException e) {
        Log.error(e);
      }
      if (!trusted) {
        throw new CertificateException("root certificate not trusted of " + peerIdentities);
      }
    }
    if (JiveGlobals.getBooleanProperty("xmpp.client.certificate.verify.validity",true)) {
      Date date=new Date();
      for (int i=0; i < nSize; i++) {
        try {
          x509Certificates[i].checkValidity(date);
        }
 catch (        GeneralSecurityException generalsecurityexception) {
          throw new CertificateException("invalid date of " + peerIdentities);
        }
      }
    }
    try {
      CertPathValidator cpv=CertPathValidator.getInstance("PKIX");
      CertPathBuilder cpb=CertPathBuilder.getInstance("PKIX");
      X509CertSelector certSelector=new X509CertSelector();
      certSelector.setSubject(x509Certificates[0].getIssuerX500Principal());
      PKIXBuilderParameters params=new PKIXBuilderParameters(trustStore,new X509CertSelector());
      if (crlStore != null)       params.addCertStore(crlStore);
      CertPathBuilderResult cpbr=cpb.build(params);
      CertPath cp=cpbr.getCertPath();
      PKIXCertPathValidatorResult cpvResult=(PKIXCertPathValidatorResult)cpv.validate(cp,params);
      X509Certificate trustedCert=(X509Certificate)cpvResult.getTrustAnchor().getTrustedCert();
      if (trustedCert == null) {
        throw new CertificateException("certificate path failed: Trusted CA is NULL");
      }
 else {
        Log.debug("ClientTrustManager: Trusted CA: " + trustedCert.getSubjectDN());
      }
    }
 catch (    CertPathBuilderException e) {
      throw new CertificateException("certificate path failed: " + e.getMessage());
    }
catch (    CertPathValidatorException e) {
      throw new CertificateException("certificate path failed: " + e.getMessage());
    }
catch (    KeyStoreException e) {
      Log.debug("ClientTrustManager: ",e);
    }
catch (    InvalidAlgorithmParameterException e) {
      Log.debug("ClientTrustManager: ",e);
    }
catch (    NoSuchAlgorithmException e) {
      Log.debug("ClientTrustManager: ",e);
    }
    if (crlStore == null)     return;
    try {
      X509CRLSelector crlSelector=new X509CRLSelector();
      crlSelector.addIssuerName(x509Certificates[0].getIssuerDN().getName());
      crlSelector.setDateAndTime(new Date());
      Collection<X509CRL> selectedCrls=(Collection<X509CRL>)crlStore.getCRLs(crlSelector);
      for (      X509CRL crl : selectedCrls) {
        if (crl.isRevoked(x509Certificates[0])) {
          throw new CertificateException("certificate is revoked: " + peerIdentities);
        }
      }
    }
 catch (    CertStoreException e) {
      Log.error("ClientTrustManager: ",e);
    }
catch (    IOException e) {
      Log.error("ClientTrustManager: ",e);
    }
  }
}
