{
  if (connection == null) {
    throw new IllegalArgumentException("Connection cannot be null.");
  }
  if (isSecure && !connection.isSecure()) {
    throw new HttpBindException("Session was started from secure connection, all " + "connections on this session must be secured.",BoshBindingError.badRequest);
  }
  final long rid=connection.getRequestId();
synchronized (connectionQueue) {
    for (    HttpConnection queuedConnection : connectionQueue) {
      if (queuedConnection.getRequestId() == rid) {
        if (Log.isDebugEnabled()) {
          Log.debug("Found previous connection in queue with rid " + rid);
        }
        if (queuedConnection.isClosed()) {
          if (Log.isDebugEnabled()) {
            Log.debug("It's closed - copying deliverables");
          }
          Delivered deliverable=retrieveDeliverable(rid);
          if (deliverable == null) {
            Log.warn("Deliverable unavailable for " + rid);
            throw new HttpBindException("Unexpected RID error.",BoshBindingError.itemNotFound);
          }
          connection.deliverBody(createDeliverable(deliverable.deliverables),true);
        }
 else {
          if (Log.isDebugEnabled()) {
            Log.debug("It's still open - calling close()");
          }
          deliver(queuedConnection,Collections.singleton(new Deliverable("")));
          connection.close();
          if (rid == (lastRequestID + 1)) {
            lastRequestID=rid;
          }
        }
        break;
      }
    }
  }
  checkOveractivity(isPoll);
  sslCertificates=connection.getPeerCertificates();
  if (isPollingSession() || (pendingElements.size() > 0 && connection.getRequestId() == lastRequestID + 1)) {
    fireConnectionOpened(connection);
synchronized (pendingElements) {
      deliver(connection,pendingElements);
      lastRequestID=connection.getRequestId();
      pendingElements.clear();
    }
  }
 else {
    connectionQueue.add(connection);
    Collections.sort(connectionQueue,connectionComparator);
synchronized (connectionQueue) {
      int connectionsToClose;
      if (connectionQueue.get(connectionQueue.size() - 1) != connection) {
        connectionsToClose=connectionQueue.size();
      }
 else {
        connectionsToClose=getOpenConnectionCount() - hold;
      }
      int closed=0;
      for (int i=0; i < connectionQueue.size() && closed < connectionsToClose; i++) {
        HttpConnection toClose=connectionQueue.get(i);
        if (!toClose.isClosed() && toClose.getRequestId() == lastRequestID + 1) {
          if (toClose == connection) {
            deliver("");
          }
 else {
            toClose.close();
          }
          lastRequestID=toClose.getRequestId();
          closed++;
        }
      }
    }
  }
}
