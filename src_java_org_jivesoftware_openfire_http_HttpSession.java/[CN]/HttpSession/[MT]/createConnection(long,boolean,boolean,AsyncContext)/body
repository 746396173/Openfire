{
  final HttpConnection connection=new HttpConnection(rid,isSecure,sslCertificates,context);
  connection.setSession(this);
  context.setTimeout(getWait() * JiveConstants.SECOND);
  context.addListener(new AsyncListener(){
    @Override public void onComplete(    AsyncEvent asyncEvent) throws IOException {
      Log.debug("complete event " + asyncEvent);
      connectionQueue.remove(connection);
      fireConnectionClosed(connection);
    }
    @Override public void onTimeout(    AsyncEvent asyncEvent) throws IOException {
      Log.debug("timeout event " + asyncEvent);
      try {
        connection.deliverBody(createEmptyBody(),false);
        setLastResponseEmpty(true);
        if (connection.getRequestId() != lastRequestID + 1) {
          throw new IOException("Unexpected RID error.");
        }
        lastRequestID=connection.getRequestId();
      }
 catch (      HttpConnectionClosedException e) {
        Log.warn("Unexpected exception while processing connection timeout.",e);
      }
    }
    @Override public void onError(    AsyncEvent asyncEvent) throws IOException {
      Log.debug("error event " + asyncEvent);
      Log.warn("Unhandled AsyncListener error: " + asyncEvent.getThrowable());
      connectionQueue.remove(connection);
      fireConnectionClosed(connection);
    }
    @Override public void onStartAsync(    AsyncEvent asyncEvent) throws IOException {
    }
  }
);
  if (rid <= lastRequestID) {
    Delivered deliverable=retrieveDeliverable(rid);
    if (deliverable == null) {
      Log.warn("Deliverable unavailable for " + rid);
      throw new HttpBindException("Unexpected RID error.",BoshBindingError.itemNotFound);
    }
    connection.deliverBody(createDeliverable(deliverable.deliverables),true);
    addConnection(connection,isPoll);
    return connection;
  }
 else   if (rid > (lastRequestID + maxRequests)) {
    Log.warn("Request " + rid + " > "+ (lastRequestID + maxRequests)+ ", ending session.");
    throw new HttpBindException("Unexpected RID error.",BoshBindingError.itemNotFound);
  }
  addConnection(connection,isPoll);
  return connection;
}
