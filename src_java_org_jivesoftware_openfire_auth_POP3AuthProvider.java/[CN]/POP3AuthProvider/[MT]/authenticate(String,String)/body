{
  if (username == null || password == null) {
    throw new UnauthorizedException();
  }
  if (username.contains("@")) {
    int index=username.indexOf("@");
    String domain=username.substring(index + 1);
    if (domain.equals(XMPPServer.getInstance().getServerInfo().getName())) {
      username=username.substring(0,index);
    }
  }
 else {
    throw new UnauthorizedException();
  }
  Log.debug("POP3AuthProvider.authenticate(" + username + ", ******)");
  if (authCache != null && authCache.containsKey(username)) {
    String hash=(String)authCache.get(username);
    if (StringUtils.hash(password).equals(hash)) {
      return;
    }
  }
  Properties mailProps=new Properties();
  mailProps.setProperty("mail.debug",String.valueOf(debugEnabled));
  Session session=Session.getInstance(mailProps,null);
  Store store;
  try {
    store=session.getStore(useSSL ? "pop3s" : "pop3");
  }
 catch (  NoSuchProviderException e) {
    Log.error(e);
    throw new UnauthorizedException(e);
  }
  try {
    if (authRequiresDomain) {
      store.connect(host,port,username + "@" + domain,password);
    }
 else {
      store.connect(host,port,username,password);
    }
  }
 catch (  Exception e) {
    Log.error(e);
    throw new UnauthorizedException(e);
  }
  if (!store.isConnected()) {
    throw new UnauthorizedException("Could not authenticate user");
  }
  try {
    store.close();
  }
 catch (  Exception e) {
  }
  if (authCache != null) {
    authCache.put(username,StringUtils.hash(password));
  }
  UserManager userManager=UserManager.getInstance();
  try {
    userManager.getUser(username);
  }
 catch (  UserNotFoundException unfe) {
    String email=username + "@" + (domain != null ? domain : host);
    try {
      Log.debug("POP3AuthProvider: Automatically creating new user account for " + username);
      UserManager.getUserProvider().createUser(username,StringUtils.randomString(8),null,email);
    }
 catch (    UserAlreadyExistsException uaee) {
    }
  }
}
