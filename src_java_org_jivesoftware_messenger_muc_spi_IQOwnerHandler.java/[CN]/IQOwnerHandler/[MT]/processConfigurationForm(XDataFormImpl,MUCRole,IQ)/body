{
  Iterator values;
  String booleanValue;
  List list;
  FormField field;
  field=completedForm.getField("muc#owner_roomadmins");
  List admins=new ArrayList();
  if (field != null) {
    values=field.getValues();
    while (values.hasNext()) {
      admins.add(values.next());
    }
  }
  field=completedForm.getField("muc#owner_roomowners");
  List owners=new ArrayList();
  if (field != null) {
    values=field.getValues();
    while (values.hasNext()) {
      owners.add(values.next());
    }
  }
  if (owners.isEmpty()) {
    reply.setError(XMPPError.Code.CONFLICT);
    return;
  }
  List presences=new ArrayList(admins.size() + owners.size());
  room.lock.writeLock().lock();
  try {
    field=completedForm.getField("muc#owner_roomname");
    if (field != null) {
      values=field.getValues();
      room.setName((values.hasNext() ? (String)values.next() : " "));
    }
    field=completedForm.getField("muc#owner_roomdesc");
    if (field != null) {
      values=field.getValues();
      room.setDescription((values.hasNext() ? (String)values.next() : " "));
    }
    field=completedForm.getField("muc#owner_changesubject");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? (String)values.next() : "1");
      room.setCanOccupantsChangeSubject(("1".equals(booleanValue) ? true : false));
    }
    field=completedForm.getField("muc#owner_maxusers");
    if (field != null) {
      values=field.getValues();
      room.setMaxUsers((values.hasNext() ? Integer.parseInt((String)values.next()) : 30));
    }
    field=completedForm.getField("muc#owner_presencebroadcast");
    if (field != null) {
      values=field.getValues();
      list=new ArrayList();
      while (values.hasNext()) {
        list.add(values.next());
      }
      room.setRolesToBroadcastPresence(list);
    }
    field=completedForm.getField("muc#owner_publicroom");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? (String)values.next() : "1");
      room.setPublicRoom(("1".equals(booleanValue) ? true : false));
    }
    field=completedForm.getField("muc#owner_persistentroom");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? (String)values.next() : "1");
      boolean isPersistent=("1".equals(booleanValue) ? true : false);
      if (room.isPersistent() && !isPersistent) {
        MUCPersistenceManager.deleteFromDB(room);
      }
      room.setPersistent(isPersistent);
    }
    field=completedForm.getField("muc#owner_moderatedroom");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? (String)values.next() : "1");
      room.setModerated(("1".equals(booleanValue) ? true : false));
    }
    field=completedForm.getField("muc#owner_inviteonly");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? (String)values.next() : "1");
      room.setInvitationRequiredToEnter(("1".equals(booleanValue) ? true : false));
    }
    field=completedForm.getField("muc#owner_allowinvites");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? (String)values.next() : "1");
      room.setCanOccupantsInvite(("1".equals(booleanValue) ? true : false));
    }
    field=completedForm.getField("muc#owner_passwordprotectedroom");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? (String)values.next() : "1");
      boolean isPasswordProtected="1".equals(booleanValue);
      if (isPasswordProtected) {
        field=completedForm.getField("muc#owner_roomsecret");
        if (field != null) {
          values=completedForm.getField("muc#owner_roomsecret").getValues();
          room.setPassword((values.hasNext() ? (String)values.next() : null));
        }
      }
 else {
        room.setPassword(null);
      }
    }
    field=completedForm.getField("muc#owner_whois");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? (String)values.next() : "1");
      room.setCanAnyoneDiscoverJID(("anyone".equals(booleanValue) ? true : false));
    }
    field=completedForm.getField("muc#owner_enablelogging");
    if (field != null) {
      values=field.getValues();
      booleanValue=(values.hasNext() ? (String)values.next() : "1");
      room.setLogEnabled(("1".equals(booleanValue) ? true : false));
    }
    if (room.isPersistent()) {
      room.saveToDB();
    }
    presences.addAll(room.addOwners(owners,senderRole));
    presences.addAll(room.addAdmins(admins,senderRole));
    List ownersToRemove=new ArrayList(room.owners);
    ownersToRemove.removeAll(admins);
    ownersToRemove.removeAll(owners);
    String jid;
    for (Iterator it=ownersToRemove.iterator(); it.hasNext(); ) {
      jid=(String)it.next();
      presences.addAll(room.addMember(jid,null,senderRole));
    }
    List adminsToRemove=new ArrayList(room.admins);
    adminsToRemove.removeAll(admins);
    adminsToRemove.removeAll(owners);
    for (Iterator it=adminsToRemove.iterator(); it.hasNext(); ) {
      jid=(String)it.next();
      presences.addAll(room.addMember(jid,null,senderRole));
    }
  }
  finally {
    room.lock.writeLock().unlock();
  }
  try {
    for (Iterator it=presences.iterator(); it.hasNext(); ) {
      room.send((Presence)it.next());
    }
  }
 catch (  UnauthorizedException e) {
  }
}
