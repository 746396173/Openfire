{
  Element features;
  Log.debug("OS - Indicating we want TLS to " + hostname);
  connection.deliverRawText("<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>");
  MXParser xpp=(MXParser)reader.getXPPParser();
  Element proceed=reader.parseDocument().getRootElement();
  if (proceed != null && proceed.getName().equals("proceed")) {
    Log.debug("OS - Negotiating TLS with " + hostname);
    connection.startTLS(true,hostname);
    Log.debug("OS - TLS negotiation with " + hostname + " was successful");
    connection.deliverRawText(openingStream.toString());
    xpp.setInput(new InputStreamReader(connection.getTLSStreamHandler().getInputStream(),CHARSET));
    for (int eventType=xpp.getEventType(); eventType != XmlPullParser.START_TAG; ) {
      eventType=xpp.next();
    }
    features=reader.parseDocument().getRootElement();
    if (features != null && features.element("mechanisms") != null) {
      String policyName=JiveGlobals.getProperty("xmpp.server.compression.policy",Connection.CompressionPolicy.disabled.toString());
      Connection.CompressionPolicy compressionPolicy=Connection.CompressionPolicy.valueOf(policyName);
      if (Connection.CompressionPolicy.optional == compressionPolicy) {
        Element compression=features.element("compression");
        if (compression != null) {
          boolean zlibSupported=false;
          Iterator it=compression.elementIterator("method");
          while (it.hasNext()) {
            Element method=(Element)it.next();
            if ("zlib".equals(method.getTextTrim())) {
              zlibSupported=true;
            }
          }
          if (zlibSupported) {
            connection.deliverRawText("<compress xmlns='http://jabber.org/protocol/compress'><method>zlib</method></compress>");
            Element answer=reader.parseDocument().getRootElement();
            if ("compressed".equals(answer.getName())) {
              connection.startCompression();
              Log.debug("OS - Stream compression was successful with " + hostname);
              connection.deliverRawText(openingStream.toString());
              ZInputStream in=new ZInputStream(connection.getTLSStreamHandler().getInputStream());
              in.setFlushMode(JZlib.Z_PARTIAL_FLUSH);
              xpp.setInput(new InputStreamReader(in,CHARSET));
              for (int eventType=xpp.getEventType(); eventType != XmlPullParser.START_TAG; ) {
                eventType=xpp.next();
              }
              features=reader.parseDocument().getRootElement();
              if (features == null || features.element("mechanisms") == null) {
                Log.debug("OS - Error, EXTERNAL SASL was not offered by " + hostname);
                return null;
              }
            }
 else {
              Log.debug("OS - Stream compression was rejected by " + hostname);
            }
          }
 else {
            Log.debug("OS - Stream compression found but zlib method is not supported by" + hostname);
          }
        }
 else {
          Log.debug("OS - Stream compression not supoprted by " + hostname);
        }
      }
      Iterator it=features.element("mechanisms").elementIterator();
      while (it.hasNext()) {
        Element mechanism=(Element)it.next();
        if ("EXTERNAL".equals(mechanism.getTextTrim())) {
          Log.debug("OS - Starting EXTERNAL SASL with " + hostname);
          if (doExternalAuthentication(domain,connection,reader)) {
            Log.debug("OS - EXTERNAL SASL with " + hostname + " was successful");
            connection.deliverRawText(openingStream.toString());
            xpp.resetInput();
            for (int eventType=xpp.getEventType(); eventType != XmlPullParser.START_TAG; ) {
              eventType=xpp.next();
            }
            String id=xpp.getAttributeValue("","id");
            StreamID streamID=new BasicStreamIDFactory().createStreamID(id);
            OutgoingServerSession session=new OutgoingServerSession(domain,connection,new OutgoingServerSocketReader(reader),streamID);
            connection.init(session);
            session.setAddress(new JID(null,hostname,null));
            session.usingServerDialback=false;
            return session;
          }
 else {
            Log.debug("OS - Error, EXTERNAL SASL authentication with " + hostname + " failed");
            return null;
          }
        }
      }
      Log.debug("OS - Error, EXTERNAL SASL was not offered by " + hostname);
    }
 else {
      Log.debug("OS - Error, no SASL mechanisms were offered by " + hostname);
    }
  }
 else {
    Log.debug("OS - Error, <proceed> was not received");
  }
  return null;
}
