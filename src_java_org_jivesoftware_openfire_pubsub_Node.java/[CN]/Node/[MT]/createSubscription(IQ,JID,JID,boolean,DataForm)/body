{
  if (getAffiliate(owner) == null) {
    addNoneAffiliation(owner);
  }
  NodeSubscription.State subState=NodeSubscription.State.subscribed;
  if (isSubscriptionConfigurationRequired()) {
    subState=NodeSubscription.State.unconfigured;
  }
 else   if (authorizationRequired && !isAdmin(owner)) {
    subState=NodeSubscription.State.pending;
  }
  String id=StringUtils.randomString(40);
  NodeSubscription subscription=new NodeSubscription(this,owner,subscriber,subState,id);
  if (options != null) {
    subscription.configure(options);
  }
  addSubscription(subscription);
  if (savedToDB) {
    PubSubPersistenceManager.saveSubscription(this,subscription,true);
  }
  if (originalIQ != null) {
    subscription.sendSubscriptionState(originalIQ);
  }
  if (subscription.isAuthorizationPending()) {
    subscription.sendAuthorizationRequest();
  }
  CacheFactory.doClusterTask(new NewSubscriptionTask(subscription));
  if (isSendItemSubscribe() && subscription.isActive()) {
    PublishedItem lastItem=getLastPublishedItem();
    if (lastItem != null) {
      subscription.sendLastPublishedItem(lastItem);
    }
  }
  if (isPresenceBasedDelivery() && getSubscriptions(subscription.getOwner()).size() == 1) {
    if (subscription.getPresenceStates().isEmpty()) {
      service.presenceSubscriptionRequired(this,owner);
    }
  }
}
