{
  if (condition == null) {
    throw new NullPointerException();
  }
  condition=condition.toLowerCase();
  if (bad_request.toXMPP().equals(condition)) {
    return bad_request;
  }
 else   if (conflict.toXMPP().equals(condition)) {
    return conflict;
  }
 else   if (feature_not_implemented.toXMPP().equals(condition)) {
    return feature_not_implemented;
  }
 else   if (forbidden.toXMPP().equals(condition)) {
    return forbidden;
  }
 else   if (gone.toXMPP().equals(condition)) {
    return gone;
  }
 else   if (internal_server_error.toXMPP().equals(condition)) {
    return internal_server_error;
  }
 else   if (item_not_found.toXMPP().equals(condition)) {
    return item_not_found;
  }
 else   if (jid_malformed.toXMPP().equals(condition)) {
    return jid_malformed;
  }
 else   if (not_acceptable.toXMPP().equals(condition)) {
    return not_acceptable;
  }
 else   if (not_allowed.toXMPP().equals(condition)) {
    return not_allowed;
  }
 else   if (not_authorized.toXMPP().equals(condition)) {
    return not_authorized;
  }
 else   if (payment_required.toXMPP().equals(condition)) {
    return payment_required;
  }
 else   if (recipient_unavailable.toXMPP().equals(condition)) {
    return recipient_unavailable;
  }
 else   if (redirect.toXMPP().equals(condition)) {
    return redirect;
  }
 else   if (registration_required.toXMPP().equals(condition)) {
    return registration_required;
  }
 else   if (remote_server_not_found.toXMPP().equals(condition)) {
    return remote_server_not_found;
  }
 else   if (remote_server_timeout.toXMPP().equals(condition)) {
    return remote_server_timeout;
  }
 else   if (resource_constraint.toXMPP().equals(condition)) {
    return resource_constraint;
  }
 else   if (service_unavailable.toXMPP().equals(condition)) {
    return service_unavailable;
  }
 else   if (subscription_required.toXMPP().equals(condition)) {
    return subscription_required;
  }
 else   if (undefined_condition.toXMPP().equals(condition)) {
    return undefined_condition;
  }
 else   if (unexpected_request.toXMPP().equals(condition)) {
    return unexpected_request;
  }
 else {
    throw new IllegalArgumentException("Condition invalid:" + condition);
  }
}
