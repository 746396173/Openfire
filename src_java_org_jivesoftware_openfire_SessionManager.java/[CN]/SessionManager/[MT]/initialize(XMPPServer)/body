{
  super.initialize(server);
  this.server=server;
  router=server.getPacketRouter();
  userManager=server.getUserManager();
  routingTable=server.getRoutingTable();
  serverName=server.getServerInfo().getName();
  serverAddress=new JID(serverName);
  if (JiveGlobals.getBooleanProperty("xmpp.audit.active")) {
    streamIDFactory=new AuditStreamIDFactory();
  }
 else {
    streamIDFactory=new BasicStreamIDFactory();
  }
  String conflictLimitProp=JiveGlobals.getProperty("xmpp.session.conflict-limit");
  if (conflictLimitProp == null) {
    conflictLimit=0;
    JiveGlobals.setProperty("xmpp.session.conflict-limit",Integer.toString(conflictLimit));
  }
 else {
    try {
      conflictLimit=Integer.parseInt(conflictLimitProp);
    }
 catch (    NumberFormatException e) {
      conflictLimit=0;
      JiveGlobals.setProperty("xmpp.session.conflict-limit",Integer.toString(conflictLimit));
    }
  }
  countersCache=CacheFactory.createCache("Session Manager Counters");
  componentSessionsCache=CacheFactory.createCache(COMPONENT_SESSION_CACHE_NAME);
  multiplexerSessionsCache=CacheFactory.createCache(CM_CACHE_NAME);
  incomingServerSessionsCache=CacheFactory.createCache(ISS_CACHE_NAME);
  hostnameSessionsCache=CacheFactory.createCache("Sessions by Hostname");
}
