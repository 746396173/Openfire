{
  try {
    LocalClientSession session=(LocalClientSession)handback;
    try {
      if ((session.getPresence().isAvailable() || !session.wasAvailable()) && routingTable.hasClientRoute(session.getAddress())) {
        Presence presence=new Presence();
        presence.setType(Presence.Type.unavailable);
        presence.setFrom(session.getAddress());
        router.route(presence);
      }
      if (session.getStreamManager().isEnabled()) {
        session.getStreamManager().setEnabled(false);
        Deque<StreamManager.UnackedPacket> unacknowledgedStanzas=session.getStreamManager().getUnacknowledgedServerStanzas();
        if (!unacknowledgedStanzas.isEmpty()) {
          for (          StreamManager.UnackedPacket unacked : unacknowledgedStanzas) {
            if (unacked.packet instanceof Message) {
              Message m=(Message)unacked.packet;
              Element delayInformation=m.addChildElement("delay","urn:xmpp:delay");
              Element delayInformationOld=m.addChildElement("x","jabber:x:delay");
              delayInformation.addAttribute("stamp",XMPPDateTimeFormat.format(unacked.timestamp));
              delayInformationOld.addAttribute("stamp",XMPPDateTimeFormat.formatOld(unacked.timestamp));
              delayInformation.addAttribute("from",serverAddress.toBareJID());
              delayInformationOld.addAttribute("from",serverAddress.toBareJID());
            }
            router.route(unacked.packet);
          }
        }
      }
    }
  finally {
      removeSession(session);
    }
  }
 catch (  Exception e) {
    Log.error(LocaleUtils.getLocalizedString("admin.error.close"),e);
  }
}
