{
  if (!packet.getType().equals(IQ.Type.set)) {
    throw new IllegalArgumentException("This method only accepts 'set' typed IQ stanzas as an argument.");
  }
  JID fromJID=packet.getFrom();
  final IQ resultIQ;
  if (!isValidSearchRequest(packet)) {
    resultIQ=IQ.createResultIQ(packet);
    resultIQ.setError(Condition.bad_request);
    return resultIQ;
  }
  final Element incomingForm=packet.getChildElement();
  final boolean isDataFormQuery=(incomingForm.element(QName.get("x","jabber:x:data")) != null);
  final Element rsmElement=incomingForm.element(QName.get("set",ResultSet.NAMESPACE_RESULT_SET_MANAGEMENT));
  if (rsmElement != null) {
    final Element maxElement=rsmElement.element("max");
    final Element startIndexElement=rsmElement.element("index");
    int startIndex=0;
    if (startIndexElement != null) {
      startIndex=Integer.parseInt(startIndexElement.getTextTrim());
    }
    int max=-1;
    if (maxElement != null) {
      max=Integer.parseInt(maxElement.getTextTrim());
    }
    final Set<User> searchResults=performSearch(incomingForm,startIndex,max);
    if (groupOnly) {
      Collection<Group> groups=GroupManager.getInstance().getGroups(fromJID);
      Set<User> allSearchResults=new HashSet<User>(searchResults);
      searchResults.clear();
      for (      User user : allSearchResults) {
        for (        Group group : groups) {
          if (group.isUser(user.getUID())) {
            searchResults.add(user);
          }
        }
      }
    }
    final List<User> rsmResults;
    final ResultSet<User> rs=new ResultSetImpl<User>(searchResults);
    try {
      rsmResults=rs.applyRSMDirectives(rsmElement);
    }
 catch (    NullPointerException e) {
      final IQ itemNotFound=IQ.createResultIQ(packet);
      itemNotFound.setError(Condition.item_not_found);
      return itemNotFound;
    }
    if (isDataFormQuery) {
      resultIQ=replyDataFormResult(rsmResults,packet);
    }
 else {
      resultIQ=replyNonDataFormResult(rsmResults,packet);
    }
    final Element set=rs.generateSetElementFromResults(rsmResults);
    resultIQ.getChildElement().add(set);
  }
 else {
    final Set<User> searchResults=performSearch(incomingForm);
    if (groupOnly) {
      Collection<Group> groups=GroupManager.getInstance().getGroups(fromJID);
      Set<User> allSearchResults=new HashSet<User>(searchResults);
      searchResults.clear();
      for (      User user : allSearchResults) {
        for (        Group group : groups) {
          if (group.isUser(user.getUID())) {
            searchResults.add(user);
          }
        }
      }
    }
    if (isDataFormQuery) {
      resultIQ=replyDataFormResult(searchResults,packet);
    }
 else {
      resultIQ=replyNonDataFormResult(searchResults,packet);
    }
  }
  return resultIQ;
}
