{
  super.start();
  if (isEnabled()) {
    if (ExternalComponentManager.getDefaultSecret() == null || "".equals(ExternalComponentManager.getDefaultSecret())) {
      try {
        ExternalComponentManager.setDefaultSecret(StringUtils.randomString(10));
      }
 catch (      ModificationNotAllowedException e) {
        Log.warn("Failed to set a default secret to external component service",e);
      }
    }
    if (!ExternalComponentManager.isServiceEnabled()) {
      try {
        ExternalComponentManager.setServiceEnabled(true);
      }
 catch (      ModificationNotAllowedException e) {
        Log.warn("Failed to start external component service",e);
      }
    }
    ExternalComponentManager.addListener(this);
    InternalComponentManager.getInstance().addListener(this);
    CertificateManager.addListener(this);
    PropertyEventDispatcher.addListener(this);
    MultiUserChatServiceImpl muc=(MultiUserChatServiceImpl)XMPPServer.getInstance().getMultiUserChatManager().getMultiUserChatService(MUC_SUBDOMAIN);
    if (muc == null) {
      try {
        muc=XMPPServer.getInstance().getMultiUserChatManager().createMultiUserChatService(MUC_SUBDOMAIN,MUC_DESCRIPTION,true);
      }
 catch (      AlreadyExistsException e) {
        Log.error("ClearspaceManager: Found no " + MUC_SUBDOMAIN + " service, but got already exists when creation attempted?  Service probably not started!");
      }
    }
    if (muc != null) {
      muc.setMUCDelegate(new ClearspaceMUCEventDelegate());
      muc.addExtraFeature("clearspace:service");
      muc.addExtraIdentity("conference","Clearspace Chat Service","text");
    }
    startClearspaceConfig();
    mucTranscriptManager.start();
  }
}
