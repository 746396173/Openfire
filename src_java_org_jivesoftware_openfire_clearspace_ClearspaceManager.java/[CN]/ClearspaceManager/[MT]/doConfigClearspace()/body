{
  Log.debug("Starting Clearspace configuration.");
  List<String> bindInterfaces=getServerInterfaces();
  if (bindInterfaces.size() == 0) {
    Log.debug("No bind interfaces found to config Clearspace");
    throw new IllegalStateException("There are no binding interfaces.");
  }
  try {
    XMPPServerInfo serverInfo=XMPPServer.getInstance().getServerInfo();
    ConnectionManagerImpl connectionManager=((ConnectionManagerImpl)XMPPServer.getInstance().getConnectionManager());
    SocketAcceptor socketAcceptor=connectionManager.getSocketAcceptor();
    HttpBindManager httpBindManager=HttpBindManager.getInstance();
    String path=IM_URL_PREFIX + "configureComponent/";
    Document groupDoc=DocumentHelper.createDocument();
    Element rootE=groupDoc.addElement("configureComponent");
    Element domainE=rootE.addElement("domain");
    domainE.setText(serverInfo.getXMPPDomain());
    for (    String bindInterface : bindInterfaces) {
      Element hostsE=rootE.addElement("hosts");
      hostsE.setText(bindInterface);
    }
    Element portE=rootE.addElement("port");
    portE.setText(String.valueOf(ExternalComponentManager.getServicePort()));
    Integer boshUnsecurePort=0;
    Integer boshSecurePort=0;
    Integer tcpPort=0;
    if (httpBindManager.isHttpBindEnabled()) {
      if (httpBindManager.getHttpBindSecurePort() > 0) {
        boshSecurePort=httpBindManager.getHttpBindSecurePort();
      }
      if (httpBindManager.getHttpBindUnsecurePort() > 0) {
        boshUnsecurePort=httpBindManager.getHttpBindUnsecurePort();
      }
    }
    if (socketAcceptor != null) {
      for (      SocketAddress socketAddress : socketAcceptor.getManagedServiceAddresses()) {
        InetSocketAddress address=(InetSocketAddress)socketAddress;
        tcpPort=address.getPort();
        break;
      }
    }
    Element boshSecurePortElem=rootE.addElement("clientBoshSslPort");
    boshSecurePortElem.setText(String.valueOf(boshSecurePort));
    Element boshUnsecurePortElem=rootE.addElement("clientBoshPort");
    boshUnsecurePortElem.setText(String.valueOf(boshUnsecurePort));
    Element tcpPortElem=rootE.addElement("clientTcpPort");
    tcpPortElem.setText(String.valueOf(tcpPort));
    Log.debug("Trying to configure Clearspace with: Domain: " + serverInfo.getXMPPDomain() + ", hosts: "+ bindInterfaces.toString()+ ", port: "+ port+ ", client bosh ssl port: "+ boshSecurePort+ ", client bosh port: "+ boshUnsecurePort+ ", client tcp port: "+ tcpPort);
    executeRequest(POST,path,rootE.asXML());
    Log.debug("Clearspace was configured, stopping the task.");
    TaskEngine.getInstance().cancelScheduledTask(configClearspaceTask);
    configClearspaceTask=null;
  }
 catch (  UnauthorizedException ue) {
    throw ue;
  }
catch (  Exception e) {
    throw new UnsupportedOperationException("Unexpected error",e);
  }
}
