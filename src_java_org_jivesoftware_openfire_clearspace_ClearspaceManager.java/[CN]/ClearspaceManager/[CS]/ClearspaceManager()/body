{
  super("Clearspace integration module");
  this.properties=new Map<String,String>(){
    public String get(    Object key){
      return JiveGlobals.getXMLProperty((String)key);
    }
    public String put(    String key,    String value){
      JiveGlobals.setXMLProperty(key,value);
      return null;
    }
    public String remove(    Object key){
      JiveGlobals.deleteXMLProperty((String)key);
      return null;
    }
    public int size(){
      return 0;
    }
    public boolean isEmpty(){
      return false;
    }
    public boolean containsKey(    Object key){
      return false;
    }
    public boolean containsValue(    Object value){
      return false;
    }
    public void putAll(    Map<? extends String,? extends String> t){
    }
    public void clear(){
    }
    public Set<String> keySet(){
      return null;
    }
    public Collection<String> values(){
      return null;
    }
    public Set<Entry<String,String>> entrySet(){
      return null;
    }
  }
;
  this.uri=JiveGlobals.getXMLProperty("clearspace.uri");
  sharedSecret=JiveGlobals.getXMLProperty("clearspace.sharedSecret");
  if (uri != null && !"".equals(uri.trim())) {
    try {
      URL url=new URL(uri);
      host=url.getHost();
      port=url.getPort();
    }
 catch (    MalformedURLException e) {
    }
  }
  if (Log.isDebugEnabled()) {
    StringBuilder buf=new StringBuilder();
    buf.append("Created new ClearspaceManager() instance, fields:\n");
    buf.append("\t URI: ").append(uri).append("\n");
    buf.append("\t sharedSecret: ").append(sharedSecret).append("\n");
    Log.debug("ClearspaceManager: " + buf.toString());
  }
}
