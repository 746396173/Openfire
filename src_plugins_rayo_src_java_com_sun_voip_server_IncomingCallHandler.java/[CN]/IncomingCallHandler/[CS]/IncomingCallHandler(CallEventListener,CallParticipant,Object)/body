{
  System.out.println("IncomingCallHandler " + cp);
  if (CallHandler.enablePSTNCalls() == false) {
    Logger.println("Ignoring incoming call " + cp.getToPhoneNumber());
    return;
  }
  if (listener != null) {
    addCallEventListener(listener);
  }
  this.cp=cp;
  this.requestEvent=requestEvent;
  addCallEventListener(this);
  if (directConferencing) {
    if (cp.getConferenceId() == null || cp.getConferenceId().length() == 0) {
      System.out.println("Don't have conf, using default....");
      cp.setConferenceId(defaultIncomingConferenceId);
    }
 else {
      Logger.println("Have conf " + cp.getConferenceId());
      haveIncomingConferenceId=true;
    }
    start();
  }
 else {
    System.out.println("Incoming SIP, call " + cp);
    if (RayoComponent.self.routeIncomingSIP(cp)) {
      haveIncomingConferenceId=true;
      start();
    }
 else {
      if (Config.getInstance().getConferenceExten().equals(cp.getToPhoneNumber())) {
        incomingConferenceHandler=new IncomingConferenceHandler(this,cp.getToPhoneNumber());
        start();
      }
 else       if (Config.getInstance().getConferenceByPhone(cp.getToPhoneNumber()) != null) {
        incomingConferenceHandler=new IncomingConferenceHandler(this,cp.getToPhoneNumber());
        start();
      }
 else {
        cancelRequest(cp.getToPhoneNumber() + " is not a valid endpoint");
      }
    }
  }
}
