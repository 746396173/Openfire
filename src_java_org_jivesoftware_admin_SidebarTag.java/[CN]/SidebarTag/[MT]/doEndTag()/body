{
  HttpServletRequest request=(HttpServletRequest)pageContext.getRequest();
  if (getBodyContent().getString() == null) {
    throw new JspException("Error, no template (body value) set for the sidebar tag.");
  }
  if (subsidebarTag.getBody() == null) {
    throw new JspException("Error, no template (body value) set for the subsidebar tag");
  }
  String subPageID=(String)request.getAttribute("subPageID");
  String pageID=(String)request.getAttribute("pageID");
  if (subPageID != null || pageID != null) {
    if (pageID == null) {
      Element subPage=AdminConsole.getElemnetByID(subPageID);
      pageID=subPage.getParent().getParent().attributeValue("id");
    }
    if (AdminConsole.getModel().elements().size() > 0) {
      JspWriter out=pageContext.getOut();
      StringBuilder buf=new StringBuilder();
      Element current=null;
      Element subcurrent=null;
      if (subPageID != null) {
        subcurrent=AdminConsole.getElemnetByID(subPageID);
      }
      current=AdminConsole.getElemnetByID(pageID);
      Element currentTab=(Element)AdminConsole.getModel().selectSingleNode("//*[@id='" + pageID + "']/ancestor::tab");
      boolean isSubmenu=false;
      if (subcurrent != null) {
        isSubmenu=subcurrent.getParent().getParent().getName().equals("item");
      }
      if (currentTab != null) {
        Collection items=currentTab.elements();
        if (items.size() > 0) {
          buf.append("<ul>");
          for (Iterator iter=items.iterator(); iter.hasNext(); ) {
            Element sidebar=(Element)iter.next();
            String header=sidebar.attributeValue("name");
            String hcss=getHeadercss();
            if (hcss == null) {
              hcss="";
            }
            buf.append("<li class=\"").append(hcss).append("\">").append(clean(i18n(header))).append("</li>");
            for (Iterator subitems=sidebar.elementIterator(); subitems.hasNext(); ) {
              Element item=(Element)subitems.next();
              String subitemID=item.attributeValue("id");
              String subitemName=item.attributeValue("name");
              String subitemURL=item.attributeValue("url");
              String subitemDescr=item.attributeValue("description");
              String value=getBodyContent().getString();
              if (value != null) {
                value=StringUtils.replace(value,"[id]",clean(subitemID));
                value=StringUtils.replace(value,"[name]",clean(i18n(subitemName)));
                value=StringUtils.replace(value,"[description]",clean(i18n(subitemDescr)));
                value=StringUtils.replace(value,"[url]",request.getContextPath() + "/" + clean(subitemURL));
              }
              String css=getCss();
              boolean isCurrent=item.equals(current);
              boolean showSubmenu=subPageID != null;
              if (isCurrent && !showSubmenu) {
                css=getCurrentcss();
              }
              buf.append("<li class=\"").append(css).append("\">").append(value).append("</li>");
              if (isSubmenu && isCurrent) {
                Iterator siblings=subcurrent.getParent().elementIterator();
                boolean hadNext=siblings.hasNext();
                if (hadNext) {
                  buf.append("<ul class=\"subitems\">\n");
                  String subheader=subcurrent.getParent().attributeValue("name");
                  buf.append("<li class=\"").append(hcss).append("\">").append(clean(i18n(subheader))).append("</li>");
                }
                String extraParams=(String)request.getAttribute("extraParams");
                while (siblings.hasNext()) {
                  Element sibling=(Element)siblings.next();
                  String sibID=sibling.attributeValue("id");
                  String sibName=sibling.attributeValue("name");
                  String sibDescr=sibling.attributeValue("description");
                  String sibURL=sibling.attributeValue("url");
                  if (extraParams != null) {
                    sibURL+=((sibURL.indexOf('?') > -1 ? "&" : "?") + extraParams);
                  }
                  boolean isSubCurrent=sibling.equals(subcurrent);
                  String subcss=getCss();
                  if (isSubCurrent) {
                    subcss=getCurrentcss();
                  }
                  String svalue=getSubsidebarTag().getBody();
                  if (svalue != null) {
                    svalue=StringUtils.replace(svalue,"[id]",clean(sibID));
                    svalue=StringUtils.replace(svalue,"[name]",clean(i18n(sibName)));
                    svalue=StringUtils.replace(svalue,"[description]",clean(i18n(sibDescr)));
                    svalue=StringUtils.replace(svalue,"[url]",request.getContextPath() + "/" + clean(sibURL));
                  }
                  buf.append("<li class=\"").append(subcss).append("\">").append(svalue).append("</li>\n");
                }
                if (hadNext) {
                  buf.append("<br></ul>\n");
                }
              }
            }
          }
          buf.append("</ul>");
          try {
            out.write(buf.toString());
          }
 catch (          IOException e) {
            throw new JspException(e);
          }
        }
      }
    }
  }
  return EVAL_PAGE;
}
