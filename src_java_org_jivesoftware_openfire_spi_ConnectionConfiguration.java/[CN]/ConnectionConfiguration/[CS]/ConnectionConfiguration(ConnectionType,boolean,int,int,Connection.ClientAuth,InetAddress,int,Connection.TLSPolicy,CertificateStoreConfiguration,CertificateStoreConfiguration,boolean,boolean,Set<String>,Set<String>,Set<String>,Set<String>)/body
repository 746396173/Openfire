{
  if (maxThreadPoolSize <= 0) {
    throw new IllegalArgumentException("Argument 'maxThreadPoolSize' must be equal to or greater than one.");
  }
  if (clientAuth == null) {
    throw new IllegalArgumentException("Argument 'clientAuth' cannot be null.");
  }
  this.enabled=enabled;
  this.tlsPolicy=tlsPolicy;
  this.type=type;
  this.maxThreadPoolSize=maxThreadPoolSize;
  this.maxBufferSize=maxBufferSize;
  this.clientAuth=clientAuth;
  this.bindAddress=bindAddress;
  this.port=port;
  this.identityStoreConfiguration=identityStoreConfiguration;
  this.trustStoreConfiguration=trustStoreConfiguration;
  this.acceptSelfSignedCertificates=acceptSelfSignedCertificates;
  this.verifyCertificateValidity=verifyCertificateValidity;
  final Set<String> protocolsEnabled=new HashSet<>();
  protocolsEnabled.addAll(encryptionProtocolsEnabled);
  protocolsEnabled.removeAll(encryptionProtocolsDisabled);
  this.encryptionProtocolsEnabled=Collections.unmodifiableSet(protocolsEnabled);
  this.encryptionProtocolsDisabled=Collections.unmodifiableSet(encryptionProtocolsDisabled);
  final Set<String> suitesEnabled=new HashSet<>();
  suitesEnabled.addAll(cipherSuitesEnabled);
  suitesEnabled.removeAll(cipherSuitesDisabled);
  this.cipherSuitesEnabled=Collections.unmodifiableSet(suitesEnabled);
  this.cipherSuitesDisabled=Collections.unmodifiableSet(cipherSuitesDisabled);
  final CertificateStoreManager certificateStoreManager=XMPPServer.getInstance().getCertificateStoreManager();
  this.identityStore=certificateStoreManager.getIdentityStore(type);
  this.trustStore=certificateStoreManager.getTrustStore(type);
}
