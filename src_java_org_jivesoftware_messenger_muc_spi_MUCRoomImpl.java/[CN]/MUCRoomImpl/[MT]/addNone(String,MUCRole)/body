{
  int oldAffiliation=MUCRole.NONE;
  if (MUCRole.ADMINISTRATOR != senderRole.getAffiliation() && MUCRole.OWNER != senderRole.getAffiliation()) {
    throw new ForbiddenException();
  }
  if (owners.contains(bareJID) && owners.size() == 1) {
    throw new ConflictException();
  }
  List<Presence> updatedPresences=null;
  boolean wasMember=members.containsKey(bareJID) || admins.contains(bareJID) || owners.contains(bareJID);
  if (removeOwner(bareJID)) {
    oldAffiliation=MUCRole.OWNER;
  }
 else   if (removeAdmin(bareJID)) {
    oldAffiliation=MUCRole.ADMINISTRATOR;
  }
 else   if (removeMember(bareJID)) {
    oldAffiliation=MUCRole.MEMBER;
  }
 else   if (removeOutcast(bareJID)) {
    oldAffiliation=MUCRole.OUTCAST;
  }
  MUCPersistenceManager.removeAffiliationFromDB(this,bareJID,oldAffiliation);
  try {
    int newRole;
    if (isInvitationRequiredToEnter() && wasMember) {
      newRole=MUCRole.NONE_ROLE;
    }
 else {
      newRole=isModerated() ? MUCRole.VISITOR : MUCRole.PARTICIPANT;
    }
    updatedPresences=changeOccupantAffiliation(bareJID,MUCRole.NONE,newRole);
    if (isInvitationRequiredToEnter() && wasMember) {
      Element frag;
      for (      Presence presence : updatedPresences) {
        presence.setType(Presence.Type.unavailable);
        frag=presence.getChildElement("x","http://jabber.org/protocol/muc#user");
        frag.addElement("status").addAttribute("code","321");
        MUCUser senderUser=senderRole.getChatUser();
        JID actorJID=(senderUser == null ? null : senderUser.getAddress());
        kickPresence(presence,actorJID);
      }
    }
  }
 catch (  NotAllowedException e) {
  }
  return updatedPresences;
}
