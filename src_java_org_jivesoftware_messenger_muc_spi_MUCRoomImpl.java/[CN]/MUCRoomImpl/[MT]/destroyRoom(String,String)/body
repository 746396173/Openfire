{
  MUCRole leaveRole=null;
  lock.writeLock().lock();
  try {
    for (    String nickname : occupants.keySet()) {
      leaveRole=occupants.remove(nickname);
      if (leaveRole != null) {
        try {
          Presence presence=createPresence(Presence.Type.unavailable);
          presence.setFrom(leaveRole.getRoleAddress());
          presence.setTo(leaveRole.getChatUser().getAddress());
          Element fragment;
          fragment=presence.addChildElement("x","http://jabber.org/protocol/muc#user");
          Element item=fragment.addElement("item");
          item.addAttribute("affiliation","none");
          item.addAttribute("role","none");
          if (alternateJID != null && alternateJID.length() > 0) {
            fragment.addElement("destroy").addAttribute("jid",alternateJID);
          }
          if (reason != null && reason.length() > 0) {
            Element destroy=fragment.element("destroy");
            if (destroy == null) {
              destroy=fragment.addElement("destroy");
            }
            destroy.addElement("reason").setText(reason);
          }
          router.route(presence);
          leaveRole.kick();
        }
 catch (        Exception e) {
          Log.error(e);
        }
      }
    }
    endTime=System.currentTimeMillis();
    MUCPersistenceManager.deleteFromDB(this);
    server.removeChatRoom(name);
    isDestroyed=true;
  }
  finally {
    lock.writeLock().unlock();
  }
}
