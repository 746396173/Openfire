{
  try {
    String binaryPath=(new URL(Videobridge.class.getProtectionDomain().getCodeSource().getLocation(),".")).openConnection().getPermission().getName();
    File pluginJarfile=new File(binaryPath);
    File nativeLibFolder=new File(pluginJarfile.getParentFile(),"native");
    if (!nativeLibFolder.exists()) {
      nativeLibFolder.mkdirs();
      String jarFileSuffix=null;
      if (OSUtils.IS_LINUX32) {
        jarFileSuffix="-native-linux-32.jar";
      }
 else       if (OSUtils.IS_LINUX64) {
        jarFileSuffix="-native-linux-64.jar";
      }
 else       if (OSUtils.IS_WINDOWS32) {
        jarFileSuffix="-native-windows-32.jar";
      }
 else       if (OSUtils.IS_WINDOWS64) {
        jarFileSuffix="-native-windows-64.jar";
      }
 else       if (OSUtils.IS_MAC) {
        jarFileSuffix="-native-macosx.jar";
      }
      String nativeLibsJarPath=pluginJarfile.getCanonicalPath();
      nativeLibsJarPath=nativeLibsJarPath.replaceFirst("\\.jar",jarFileSuffix);
      JarFile jar=new JarFile(nativeLibsJarPath);
      Enumeration en=jar.entries();
      while (en.hasMoreElements()) {
        try {
          JarEntry file=(JarEntry)en.nextElement();
          File f=new File(nativeLibFolder,file.getName());
          if (file.isDirectory()) {
            continue;
          }
          InputStream is=jar.getInputStream(file);
          FileOutputStream fos=new FileOutputStream(f);
          while (is.available() > 0) {
            fos.write(is.read());
          }
          fos.close();
          is.close();
        }
 catch (        Throwable t) {
        }
      }
      Log.info("Native lib folder created and natives extracted");
    }
 else     Log.info("Native lib folder already exist.");
    String newLibPath=nativeLibFolder.getCanonicalPath() + File.pathSeparator + System.getProperty("java.library.path");
    System.setProperty("java.library.path",newLibPath);
    Field fieldSysPath=ClassLoader.class.getDeclaredField("sys_paths");
    fieldSysPath.setAccessible(true);
    fieldSysPath.set(System.class.getClassLoader(),null);
  }
 catch (  Exception e) {
    Log.error(e.getMessage(),e);
  }
}
