{
  Log.info("inviteNewParticipant " + fromUri + " "+ toUri);
  String from=fromUri.toString();
  String to=toUri.toString();
  String hostname=XMPPServer.getInstance().getServerInfo().getHostname();
  boolean toSip=to.indexOf("sip:") == 0;
  boolean toPhone=to.indexOf("tel:") == 0;
  boolean toXmpp=to.indexOf("xmpp:") == 0;
  if (toSip) {
    from="sip:jitsi-videobridge" + System.currentTimeMillis() + "@"+ hostname;
  }
 else   if (toPhone) {
    String outboundProxy=JiveGlobals.getProperty("voicebridge.default.proxy.outboundproxy",null);
    String sipUsername=JiveGlobals.getProperty("voicebridge.default.proxy.sipauthuser",null);
    if (outboundProxy != null && sipUsername != null) {
      to="sip:" + to.substring(4) + "@"+ outboundProxy;
      from="sip:" + sipUsername + "@"+ outboundProxy;
    }
 else {
      reply.setError(PacketError.Condition.not_allowed);
      return;
    }
  }
 else   if (toXmpp) {
    reply.setError(PacketError.Condition.not_allowed);
    return;
  }
 else {
    reply.setError(PacketError.Condition.not_allowed);
    return;
  }
  Conference conference=null;
  String focusJid=XMPPServer.getInstance().createJID(focusName,focusName).toString();
  if (focusId != null) {
    conference=getVideoBridge().getConference(focusId,focusJid);
  }
  if (conference != null) {
    MediaService mediaService=LibJitsi.getMediaService();
    MediaStream mediaStream=mediaService.createMediaStream(null,org.jitsi.service.neomedia.MediaType.AUDIO,mediaService.createSrtpControl(SrtpControlType.MIKEY));
    mediaStream.setName("rayo-" + System.currentTimeMillis());
    mediaStream.setSSRCFactory(ssrcFactory);
    mediaStream.setDevice(conference.getOrCreateContent("audio").getMixer());
    initialLocalSSRC=ssrcFactory.doGenerateSSRC() & 0xFFFFFFFFL;
    CallSession cs=new CallSession(mediaStream,hostname);
    callSessions.put(toUri.toString(),cs);
    cs.jabberRemote=to;
    cs.jabberLocal=from;
    SipService.sendInvite(cs);
  }
 else {
    reply.setError(PacketError.Condition.not_allowed);
  }
}
