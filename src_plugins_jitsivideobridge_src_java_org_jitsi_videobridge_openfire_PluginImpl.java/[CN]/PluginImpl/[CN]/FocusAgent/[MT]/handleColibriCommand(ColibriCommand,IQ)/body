{
  String focusJid=XMPPServer.getInstance().createJID(focusName,focusName).toString();
  Log.info("FocusAgent handleColibriCommand " + focusId + " "+ focusJid);
  IQ reply=IQ.createResultIQ(iq);
  Conference conference=getVideoBridge().getConference(focusId,focusJid);
  try {
    int localRTPPort=Integer.parseInt(command.getLocalRTPPort());
    int localRTCPPort=Integer.parseInt(command.getLocalRTCPPort());
    int remoteRTPPort=Integer.parseInt(command.getRemoteRTPPort());
    int remoteRTCPPort=Integer.parseInt(command.getRemoteRTCPPort());
    String codec=command.getCodec();
    if (conference != null) {
      if (mediaStream != null) {
        mediaStream.stop();
      }
      Content content=conference.getOrCreateContent("audio");
      MediaDevice mediaDevice=content.getMixer();
      MediaService mediaService=LibJitsi.getMediaService();
      mediaStream=mediaService.createMediaStream(org.jitsi.service.neomedia.MediaType.AUDIO);
      MediaFormat mediaFormat;
      if ("opus".equals(codec))       mediaFormat=mediaService.getFormatFactory().createMediaFormat("opus",48000,2);
 else       mediaFormat=mediaService.getFormatFactory().createMediaFormat("PCMU",8000,1);
      mediaStream.setName("rayo-" + System.currentTimeMillis());
      mediaStream.setDevice(mediaDevice);
      mediaStream.setDirection(MediaDirection.SENDRECV);
      mediaStream.addDynamicRTPPayloadType((byte)111,mediaFormat);
      mediaStream.setFormat(mediaFormat);
      StreamConnector connector=new DefaultStreamConnector(new DatagramSocket(localRTPPort),new DatagramSocket(localRTCPPort));
      mediaStream.setConnector(connector);
      InetAddress remoteAddr=InetAddress.getByName("localhost");
      MediaStreamTarget target=new MediaStreamTarget(new InetSocketAddress(remoteAddr,remoteRTPPort),new InetSocketAddress(remoteAddr,remoteRTCPPort));
      mediaStream.setTarget(target);
      mediaStream.start();
    }
  }
 catch (  Exception e) {
    reply.setError(PacketError.Condition.not_allowed);
    e.printStackTrace();
  }
  return reply;
}
