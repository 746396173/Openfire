{
  Log.info("FocusAgent deliver\n" + packet + " "+ getVideoBridge());
  IQ iq=(IQ)packet;
  if (iq.getType() == IQ.Type.result) {
    Element conference=iq.getChildElement().createCopy();
    if (focusId == null) {
      focusId=conference.attributeValue("id");
    }
    String id=packet.getID();
    if (ids.containsKey(id)) {
      Participant participant=ids.remove(id);
      String username=participant.getUser().toString();
      Log.info("FocusAgent response for user " + participant + " "+ focusId+ "\n"+ conference);
      if (id.startsWith("offer-") && users.containsKey(username) == false) {
        addUser(participant,conference);
      }
      if (id.startsWith("answer-")) {
        broadcastSSRC(participant);
      }
    }
  }
 else   if (iq.getType() == IQ.Type.error) {
    closeColibri();
    Log.error("Videobrideg error \n" + packet);
    for (    Participant reciepient : users.values()) {
      sendRayoEvent(reciepient,null,false,reciepient);
    }
  }
 else   if (iq.getType() == IQ.Type.set || iq.getType() == IQ.Type.get) {
    JID user=iq.getFrom();
    Element root=iq.getChildElement();
    Element conference=null;
    if (user.toString().equals("jitsi-videobridge." + domainName)) {
      conference=root.createCopy();
      boolean recordMedia="true".equals(JiveGlobals.getProperty(RECORD_PROPERTY_NAME,"false"));
      if (recordMedia && recorder == null) {
        try {
synchronized (this) {
            Log.info("Creating recorder file " + iq.getTo());
            String focusJid=XMPPServer.getInstance().createJID(focusName,focusName).toString();
            Content content=getVideoBridge().getConference(focusId,focusJid).getOrCreateContent("audio");
            AudioMixerMediaDevice mediaDevice=(AudioMixerMediaDevice)content.getMixer();
            outDataSource=mediaDevice.createOutputDataSource();
            outDataSource.connect();
            BufferTransferHandler transferHandler=new BufferTransferHandler(){
              private final Buffer buffer=new Buffer();
              public void transferData(              PushBufferStream stream){
                try {
                  stream.read(buffer);
                  byte[] data=(byte[])buffer.getData();
                  byte[] ulawData=new byte[data.length / 2];
                  AudioConversion.linearToUlaw(data,0,ulawData,0);
                  if (recorder != null)                   recorder.write(ulawData,0,ulawData.length);
                }
 catch (                Exception e) {
                  Log.error("transferData exception",e);
                }
              }
            }
;
            AudioMixingPushBufferStream stream=(AudioMixingPushBufferStream)outDataSource.getStreams()[0];
            stream.setTransferHandler(transferHandler);
            AudioFormat format=stream.getFormat();
            String recordingPath=JiveGlobals.getHomeDirectory() + File.separator + "resources"+ File.separator+ "spank"+ File.separator+ "rayo"+ File.separator+ "video_recordings";
            String fileName="audio-" + focusName + "-"+ System.currentTimeMillis()+ ".au";
            boolean pcmu=format.getEncoding() == AudioFormat.ULAW;
            int sampleRate=(int)Math.round(format.getSampleRate());
            int channels=format.getChannels();
            recorder=new Recorder(recordingPath,fileName,"au",true,sampleRate,channels);
            outDataSource.start();
          }
        }
 catch (        Exception e) {
          Log.error("Error creating recording file",e);
        }
      }
    }
 else {
      conference=root.element("conference").createCopy();
      IQ reply=IQ.createResultIQ(iq);
      if (users.containsKey(user.toString()))       processUserAnswer(users.get(user.toString()),conference);
 else       reply.setError(PacketError.Condition.not_allowed);
      router.route(reply);
    }
  }
 else {
    Log.warn("Unexpected Videobrideg message \n" + packet);
  }
}
