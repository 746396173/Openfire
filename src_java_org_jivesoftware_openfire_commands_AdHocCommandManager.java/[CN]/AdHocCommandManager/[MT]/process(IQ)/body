{
  IQ reply=IQ.createResultIQ(packet);
  Element iqCommand=packet.getChildElement();
  if (!IQ.Type.set.equals(packet.getType())) {
    reply.setChildElement(iqCommand.createCopy());
    reply.setError(PacketError.Condition.bad_request);
    return reply;
  }
  String sessionid=iqCommand.attributeValue("sessionid");
  String commandCode=iqCommand.attributeValue("node");
  String from=packet.getFrom().toString();
  AdHocCommand command=commands.get(commandCode);
  if (sessionid == null) {
    if (command == null) {
      reply.setChildElement(iqCommand.createCopy());
      reply.setError(PacketError.Condition.item_not_found);
    }
 else {
      if (!command.hasPermission(packet.getFrom())) {
        reply.setChildElement(iqCommand.createCopy());
        reply.setError(PacketError.Condition.forbidden);
        return reply;
      }
      sessionid=StringUtils.randomString(15);
      Element childElement=reply.setChildElement("command",NAMESPACE);
      if (command.getMaxStages(null) == 0) {
        command.execute(null,childElement);
        childElement.addAttribute("sessionid",sessionid);
        childElement.addAttribute("node",commandCode);
        childElement.addAttribute("status",AdHocCommand.Status.completed.name());
      }
 else {
        AtomicInteger counter=sessionsCounter.get(from);
        if (counter == null) {
synchronized (from.intern()) {
            counter=sessionsCounter.get(from);
            if (counter == null) {
              counter=new AtomicInteger(0);
              sessionsCounter.put(from,counter);
            }
          }
        }
        int limit=JiveGlobals.getIntProperty("xmpp.command.limit",100);
        if (counter.incrementAndGet() > limit) {
          counter.decrementAndGet();
          reply.setChildElement(iqCommand.createCopy());
          reply.setError(PacketError.Condition.not_allowed);
          return reply;
        }
        SessionData session=new SessionData(sessionid,packet.getFrom());
        sessions.put(sessionid,session);
        childElement.addAttribute("sessionid",sessionid);
        childElement.addAttribute("node",commandCode);
        childElement.addAttribute("status",AdHocCommand.Status.executing.name());
        command.addNextStageInformation(session,childElement);
      }
    }
  }
 else {
    String action=iqCommand.attributeValue("action");
    SessionData session=sessions.get(sessionid);
    if (session == null) {
      reply.setChildElement(iqCommand.createCopy());
      reply.setError(PacketError.Condition.bad_request);
      return reply;
    }
    int timeout=JiveGlobals.getIntProperty("xmpp.command.timeout",10 * 60 * 1000);
    if (System.currentTimeMillis() - session.getCreationStamp() > timeout) {
      removeSessionData(sessionid,from);
      reply.setChildElement(iqCommand.createCopy());
      reply.setError(PacketError.Condition.not_allowed);
      return reply;
    }
synchronized (sessionid.intern()) {
      if (AdHocCommand.Action.cancel.name().equals(action)) {
        removeSessionData(sessionid,from);
        Element childElement=reply.setChildElement("command",NAMESPACE);
        childElement.addAttribute("sessionid",sessionid);
        childElement.addAttribute("node",commandCode);
        childElement.addAttribute("status",AdHocCommand.Status.canceled.name());
      }
      if (action == null || AdHocCommand.Action.execute.name().equals(action)) {
        action=session.getExecuteAction().name();
      }
      if (!session.isValidAction(action)) {
        reply.setChildElement(iqCommand.createCopy());
        reply.setError(PacketError.Condition.bad_request);
        return reply;
      }
 else       if (AdHocCommand.Action.prev.name().equals(action)) {
        Element childElement=reply.setChildElement("command",NAMESPACE);
        childElement.addAttribute("sessionid",sessionid);
        childElement.addAttribute("node",commandCode);
        childElement.addAttribute("status",AdHocCommand.Status.executing.name());
        command.addPreviousStageInformation(session,childElement);
      }
 else       if (AdHocCommand.Action.next.name().equals(action)) {
        saveCompletedForm(iqCommand,session);
        Element childElement=reply.setChildElement("command",NAMESPACE);
        childElement.addAttribute("sessionid",sessionid);
        childElement.addAttribute("node",commandCode);
        childElement.addAttribute("status",AdHocCommand.Status.executing.name());
        command.addNextStageInformation(session,childElement);
      }
 else       if (AdHocCommand.Action.complete.name().equals(action)) {
        saveCompletedForm(iqCommand,session);
        Element childElement=reply.setChildElement("command",NAMESPACE);
        command.execute(session,childElement);
        childElement.addAttribute("sessionid",sessionid);
        childElement.addAttribute("node",commandCode);
        childElement.addAttribute("status",AdHocCommand.Status.completed.name());
        removeSessionData(sessionid,from);
      }
    }
  }
  return reply;
}
