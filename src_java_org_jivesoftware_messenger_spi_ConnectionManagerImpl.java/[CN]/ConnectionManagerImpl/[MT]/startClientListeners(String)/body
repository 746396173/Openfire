{
  if (JiveGlobals.getBooleanProperty("xmpp.socket.plain.active",true)) {
    int port=JiveGlobals.getIntProperty("xmpp.socket.plain.port",SocketAcceptThread.DEFAULT_PORT);
    String interfaceName=JiveGlobals.getProperty("xmpp.socket.plain.interface");
    ServerPort serverPort=new ServerPort(port,interfaceName,serverName,localIPAddress,false,null,ServerPort.Type.client);
    try {
      socketThread=new SocketAcceptThread(this,serverPort);
      ports.add(serverPort);
      socketThread.setDaemon(true);
      socketThread.start();
      List params=new ArrayList();
      params.add(Integer.toString(socketThread.getPort()));
      Log.info(LocaleUtils.getLocalizedString("startup.plain",params));
    }
 catch (    Exception e) {
      System.err.println("Error starting XMPP listener on port " + port + ": "+ e.getMessage());
      Log.error(LocaleUtils.getLocalizedString("admin.error.socket-setup"),e);
    }
  }
  if (JiveGlobals.getBooleanProperty("xmpp.socket.ssl.active",true)) {
    int port=JiveGlobals.getIntProperty("xmpp.socket.ssl.port",SSLSocketAcceptThread.DEFAULT_PORT);
    String interfaceName=JiveGlobals.getProperty("xmpp.socket.ssl.interface");
    String algorithm=JiveGlobals.getProperty("xmpp.socket.ssl.algorithm");
    if ("".equals(algorithm) || algorithm == null) {
      algorithm="TLS";
    }
    ServerPort serverPort=new ServerPort(port,interfaceName,serverName,localIPAddress,true,algorithm,ServerPort.Type.client);
    try {
      sslSocketThread=new SSLSocketAcceptThread(this,serverPort);
      ports.add(serverPort);
      sslSocketThread.setDaemon(true);
      sslSocketThread.start();
      List params=new ArrayList();
      params.add(Integer.toString(sslSocketThread.getPort()));
      Log.info(LocaleUtils.getLocalizedString("startup.ssl",params));
    }
 catch (    Exception e) {
      System.err.println("Error starting SSL XMPP listener on port " + port + ": "+ e.getMessage());
      Log.error(LocaleUtils.getLocalizedString("admin.error.ssl"),e);
    }
  }
}
