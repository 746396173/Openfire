{
  otherItem.getJid();
  UserManager userManager=UserManager.getInstance();
  String username=otherItem.getJid().getNode();
  if (username != null && username.length() > 0 && userManager.isRegisteredUser(username) && XMPPServer.getInstance().isLocal(XMPPServer.getInstance().createJID(currentUser,null))) {
    try {
      User otherUser=userManager.getUser(username);
      Roster otherRoster=otherUser.getRoster();
      RosterItem oldUserOnOthersRoster=otherRoster.getRosterItem(XMPPServer.getInstance().createJID(currentUser,null));
      try {
        if (!oldUserOnOthersRoster.isOnlyShared()) {
          RosterItem justCreated=otherRoster.createRosterItem(XMPPServer.getInstance().createJID(newUser.getUsername(),null),oldUserOnOthersRoster.getNickname(),oldUserOnOthersRoster.getGroups(),true,true);
          justCreated.setAskStatus(oldUserOnOthersRoster.getAskStatus());
          justCreated.setRecvStatus(oldUserOnOthersRoster.getRecvStatus());
          justCreated.setSubStatus(oldUserOnOthersRoster.getSubStatus());
        }
      }
 catch (      UserAlreadyExistsException e) {
        Log.error("Could not create roster item for user " + newUser.getUsername(),e);
      }
catch (      SharedGroupException e) {
        Log.error(e);
      }
    }
 catch (    UserNotFoundException e) {
      Log.error("Could not create roster item for user " + newUser.getUsername() + " because it is a contact from a shared group",e);
    }
  }
}
