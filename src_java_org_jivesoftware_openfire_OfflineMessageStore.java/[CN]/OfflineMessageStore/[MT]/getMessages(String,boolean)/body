{
  List<OfflineMessage> messages=new ArrayList<>();
  SAXReader xmlReader=null;
  Connection con=null;
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    xmlReader=xmlReaders.take();
    con=DbConnectionManager.getConnection();
    pstmt=con.prepareStatement(LOAD_OFFLINE);
    pstmt.setString(1,username);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      String msgXML=rs.getString(1);
      Date creationDate=new Date(Long.parseLong(rs.getString(2).trim()));
      OfflineMessage message;
      try {
        message=new OfflineMessage(creationDate,xmlReader.read(new StringReader(msgXML)).getRootElement());
      }
 catch (      DocumentException e) {
        Matcher matcher=pattern.matcher(msgXML);
        if (matcher.find()) {
          msgXML=matcher.replaceAll("");
        }
        try {
          message=new OfflineMessage(creationDate,xmlReader.read(new StringReader(msgXML)).getRootElement());
        }
 catch (        DocumentException de) {
          Log.error("Failed to route packet (offline message): " + msgXML,de);
          continue;
        }
      }
      Element delaytest=message.getChildElement("delay","urn:xmpp:delay");
      if (delaytest == null) {
        Element delay=message.addChildElement("delay","urn:xmpp:delay");
        delay.addAttribute("from",XMPPServer.getInstance().getServerInfo().getXMPPDomain());
        delay.addAttribute("stamp",XMPPDateTimeFormat.format(creationDate));
        delay=message.addChildElement("x","jabber:x:delay");
        delay.addAttribute("from",XMPPServer.getInstance().getServerInfo().getXMPPDomain());
        delay.addAttribute("stamp",XMPPDateTimeFormat.formatOld(creationDate));
      }
      messages.add(message);
    }
    if (delete && !messages.isEmpty()) {
      PreparedStatement pstmt2=null;
      try {
        pstmt2=con.prepareStatement(DELETE_OFFLINE);
        pstmt2.setString(1,username);
        pstmt2.executeUpdate();
        removeUsernameFromSizeCache(username);
      }
 catch (      Exception e) {
        Log.error("Error deleting offline messages of username: " + username,e);
      }
 finally {
        DbConnectionManager.closeStatement(pstmt2);
      }
    }
  }
 catch (  Exception e) {
    Log.error("Error retrieving offline messages of username: " + username,e);
  }
 finally {
    DbConnectionManager.closeConnection(rs,pstmt,con);
    if (xmlReader != null) {
      xmlReaders.add(xmlReader);
    }
  }
  return messages;
}
