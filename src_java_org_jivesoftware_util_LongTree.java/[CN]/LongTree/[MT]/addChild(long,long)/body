{
  char parentIndex=findKey(parentKey,(char)1);
  if (parentIndex == 0) {
    throw new IllegalArgumentException("Parent key " + parentKey + " not found when adding child "+ newKey+ ".");
  }
  if (nextIndex == keys.length) {
    int oldSize=keys.length;
    int newSize=(int)Math.ceil(oldSize * 1.5);
    long[] newKeys=new long[newSize];
    System.arraycopy(keys,0,newKeys,0,oldSize);
    keys=newKeys;
    char[] newLeftChildren=new char[newSize];
    System.arraycopy(leftChildren,0,newLeftChildren,0,oldSize);
    leftChildren=newLeftChildren;
    char[] newRightSiblings=new char[newSize];
    System.arraycopy(rightSiblings,0,newRightSiblings,0,oldSize);
    rightSiblings=newRightSiblings;
  }
  keys[nextIndex]=newKey;
  leftChildren[nextIndex]=0;
  rightSiblings[nextIndex]=0;
  if (leftChildren[parentIndex] == 0) {
    leftChildren[parentIndex]=nextIndex;
  }
 else {
    long siblingIndex=leftChildren[parentIndex];
    while (rightSiblings[new Long(siblingIndex).intValue()] != 0) {
      siblingIndex=rightSiblings[new Long(siblingIndex).intValue()];
    }
    rightSiblings[new Long(siblingIndex).intValue()]=nextIndex;
  }
  nextIndex++;
}
