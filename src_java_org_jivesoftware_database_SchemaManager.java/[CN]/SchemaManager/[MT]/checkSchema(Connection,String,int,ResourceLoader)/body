{
  int currentVersion=-1;
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    pstmt=con.prepareStatement(CHECK_VERSION);
    pstmt.setString(1,schemaKey);
    rs=pstmt.executeQuery();
    if (rs.next()) {
      currentVersion=rs.getInt(1);
    }
  }
 catch (  SQLException sqle) {
    Log.debug("SchemaManager: Error verifying " + schemaKey + " version, probably ignorable.",sqle);
    DbConnectionManager.closeStatement(rs,pstmt);
    if (schemaKey.equals("openfire")) {
      try {
        pstmt=con.prepareStatement(CHECK_VERSION_JIVE);
        pstmt.setString(1,schemaKey);
        rs=pstmt.executeQuery();
        if (rs.next()) {
          currentVersion=rs.getInt(1);
        }
      }
 catch (      SQLException sqlea) {
        Log.debug("SchemaManager: Error verifying " + schemaKey + " version, probably ignorable.",sqlea);
        DbConnectionManager.closeStatement(rs,pstmt);
        try {
          pstmt=con.prepareStatement(CHECK_VERSION_OLD);
          rs=pstmt.executeQuery();
          if (rs.next()) {
            currentVersion=rs.getInt(1);
          }
        }
 catch (        SQLException sqle2) {
          Log.debug("SchemaManager: Error verifying " + schemaKey + " version, probably ignorable",sqle2);
        }
      }
    }
  }
 finally {
    DbConnectionManager.closeStatement(rs,pstmt);
  }
  if (currentVersion >= requiredVersion) {
    return true;
  }
 else   if (currentVersion == -1) {
    Log.info(LocaleUtils.getLocalizedString("upgrade.database.missing_schema",Arrays.asList(schemaKey)));
    System.out.println(LocaleUtils.getLocalizedString("upgrade.database.missing_schema",Arrays.asList(schemaKey)));
    String resourceName=schemaKey + "_" + DbConnectionManager.getDatabaseType()+ ".sql";
    InputStream resource=resourceLoader.loadResource(resourceName);
    if (resource == null) {
      return false;
    }
    try {
      executeSQLScript(con,resource,!schemaKey.equals("openfire") && !schemaKey.equals("wildfire"));
    }
 catch (    Exception e) {
      Log.error(e.getMessage(),e);
      return false;
    }
 finally {
      try {
        resource.close();
      }
 catch (      Exception e) {
      }
    }
    Log.info(LocaleUtils.getLocalizedString("upgrade.database.success"));
    System.out.println(LocaleUtils.getLocalizedString("upgrade.database.success"));
    return true;
  }
 else {
    Log.info(LocaleUtils.getLocalizedString("upgrade.database.old_schema",Arrays.asList(currentVersion,schemaKey,requiredVersion)));
    System.out.println(LocaleUtils.getLocalizedString("upgrade.database.old_schema",Arrays.asList(currentVersion,schemaKey,requiredVersion)));
    if (DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.unknown) {
      Log.info(LocaleUtils.getLocalizedString("upgrade.database.unknown_db"));
      System.out.println(LocaleUtils.getLocalizedString("upgrade.database.unknown_db"));
      return false;
    }
 else     if (DbConnectionManager.getDatabaseType() == DbConnectionManager.DatabaseType.interbase) {
      Log.info(LocaleUtils.getLocalizedString("upgrade.database.interbase_db"));
      System.out.println(LocaleUtils.getLocalizedString("upgrade.database.interbase_db"));
      return false;
    }
    for (int i=currentVersion + 1; i <= requiredVersion; i++) {
      InputStream resource=getUpgradeResource(resourceLoader,i,schemaKey);
      try {
        if (i == 21 && schemaKey.equals("openfire")) {
          OF33.executeFix(con);
        }
      }
 catch (      Exception e) {
        Log.error(e.getMessage(),e);
        return false;
      }
      if (resource == null) {
        continue;
      }
      try {
        executeSQLScript(con,resource,!schemaKey.equals("openfire") && !schemaKey.equals("wildfire"));
      }
 catch (      Exception e) {
        Log.error(e.getMessage(),e);
        return false;
      }
 finally {
        try {
          resource.close();
        }
 catch (        Exception e) {
        }
      }
    }
    Log.info(LocaleUtils.getLocalizedString("upgrade.database.success"));
    System.out.println(LocaleUtils.getLocalizedString("upgrade.database.success"));
    return true;
  }
}
