{
  boolean trim=format.isTrimText();
  boolean oldPreserve=preserve;
  if (trim) {
    preserve=isElementSpacePreserved(element);
    trim=!preserve;
  }
  if (trim) {
    Text lastTextNode=null;
    StringBuilder buffer=null;
    boolean textOnly=true;
    for (int i=0, size=element.nodeCount(); i < size; i++) {
      Node node=element.node(i);
      if (node instanceof Text) {
        if (lastTextNode == null) {
          lastTextNode=(Text)node;
        }
 else {
          if (buffer == null) {
            buffer=new StringBuilder(lastTextNode.getText());
          }
          buffer.append(node.getText());
        }
      }
 else {
        if (!textOnly && format.isPadText()) {
          writer.write(PAD_TEXT);
        }
        textOnly=false;
        if (lastTextNode != null) {
          if (buffer != null) {
            writeString(buffer.toString());
            buffer=null;
          }
 else {
            writeString(lastTextNode.getText());
          }
          lastTextNode=null;
          if (format.isPadText()) {
            writer.write(PAD_TEXT);
          }
        }
        writeNode(node);
      }
    }
    if (lastTextNode != null) {
      if (!textOnly && format.isPadText()) {
        writer.write(PAD_TEXT);
      }
      if (buffer != null) {
        writeString(buffer.toString());
        buffer=null;
      }
 else {
        writeString(lastTextNode.getText());
      }
      lastTextNode=null;
    }
  }
 else {
    Node lastTextNode=null;
    for (int i=0, size=element.nodeCount(); i < size; i++) {
      Node node=element.node(i);
      if (node instanceof Text) {
        writeNode(node);
        lastTextNode=node;
      }
 else {
        if ((lastTextNode != null) && format.isPadText()) {
          writer.write(PAD_TEXT);
        }
        writeNode(node);
        if ((lastTextNode != null) && format.isPadText()) {
          writer.write(PAD_TEXT);
        }
        lastTextNode=null;
      }
    }
  }
  preserve=oldPreserve;
}
