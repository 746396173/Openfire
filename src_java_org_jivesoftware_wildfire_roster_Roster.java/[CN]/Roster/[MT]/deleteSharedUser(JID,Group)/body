{
  try {
    RosterItem item=getRosterItem(deletedUser);
    int groupSize=item.getSharedGroups().size() + item.getInvisibleSharedGroups().size();
    if (item.isOnlyShared() && groupSize == 1 && !(deletedGroup.isUser(deletedUser) && RosterManager.isPublicSharedGroup(deletedGroup))) {
      deleteRosterItem(deletedUser,false);
    }
 else {
      if (!(deletedGroup.isUser(deletedUser) && RosterManager.isPublicSharedGroup(deletedGroup))) {
        item.removeSharedGroup(deletedGroup);
      }
      Collection<Group> groups=GroupManager.getInstance().getGroups(deletedUser);
      for (      Group group : groups) {
        if (!rosterManager.isGroupVisible(group,getUserJID())) {
          item.removeSharedGroup(group);
        }
      }
      if (item.isOnlyShared()) {
        Collection<Group> userGroups=GroupManager.getInstance().getGroups(getUserJID());
        if (rosterManager.hasMutualVisibility(getUsername(),userGroups,deletedUser,groups)) {
          item.setSubStatus(RosterItem.SUB_BOTH);
        }
 else {
          item.setSubStatus(RosterItem.SUB_FROM);
          for (          Group group : groups) {
            if (rosterManager.isGroupVisible(group,getUserJID())) {
              item.setSubStatus(RosterItem.SUB_TO);
            }
          }
        }
      }
      broadcast(item,false);
    }
  }
 catch (  SharedGroupException e) {
  }
catch (  UserNotFoundException e) {
  }
}
