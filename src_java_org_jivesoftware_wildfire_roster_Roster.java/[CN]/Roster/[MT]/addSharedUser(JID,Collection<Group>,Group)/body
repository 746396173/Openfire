{
  boolean newItem=false;
  RosterItem item=null;
  try {
    item=getRosterItem(addedUser);
    newItem=false;
  }
 catch (  UserNotFoundException e) {
    try {
      String nickname=UserNameManager.getUserName(addedUser);
      item=new RosterItem(addedUser,RosterItem.SUB_BOTH,RosterItem.ASK_NONE,RosterItem.RECV_NONE,nickname,null);
      rosterItems.put(item.getJid().toBareJID(),item);
      newItem=true;
    }
 catch (    UserNotFoundException ex) {
      Log.error("Couldn't find a user with username (" + addedUser + ")");
    }
  }
  Collection<Group> userGroups=GroupManager.getInstance().getGroups(getUserJID());
  if (rosterManager.hasMutualVisibility(getUsername(),userGroups,addedUser,groups)) {
    item.setSubStatus(RosterItem.SUB_BOTH);
    for (    Group group : groups) {
      if (rosterManager.isGroupVisible(group,getUserJID())) {
        item.addSharedGroup(group);
      }
    }
    for (    Group group : userGroups) {
      if (!group.isUser(addedUser) && rosterManager.isGroupVisible(group,addedUser)) {
        item.addInvisibleSharedGroup(group);
      }
    }
  }
 else {
    RosterItem.SubType prevSubscription=null;
    if (!newItem) {
      prevSubscription=item.getSubStatus();
    }
    item.setSubStatus(RosterItem.SUB_FROM);
    for (    Group group : groups) {
      if (rosterManager.isGroupVisible(group,getUserJID())) {
        item.addSharedGroup(group);
        item.setSubStatus(RosterItem.SUB_TO);
      }
    }
    if (item.getSubStatus() == RosterItem.SUB_FROM) {
      item.addInvisibleSharedGroup(addedGroup);
    }
    if (prevSubscription != null) {
      if (prevSubscription == RosterItem.SUB_TO && item.getSubStatus() == RosterItem.SUB_FROM) {
        item.setSubStatus(RosterItem.SUB_BOTH);
      }
 else       if (prevSubscription == RosterItem.SUB_FROM && item.getSubStatus() == RosterItem.SUB_TO) {
        item.setSubStatus(RosterItem.SUB_BOTH);
      }
    }
  }
  if (item.isOnlyShared() && item.getSubStatus() == RosterItem.SUB_FROM) {
    rosterItems.remove(item.getJid().toBareJID());
    implicitFrom.put(item.getJid().toBareJID(),item.getJid().toBareJID());
  }
 else {
    implicitFrom.remove(item.getJid().toBareJID());
    broadcast(item,true);
    if (item.getSubStatus() == RosterItem.SUB_BOTH || item.getSubStatus() == RosterItem.SUB_TO) {
      probePresence(item.getJid());
    }
  }
}
