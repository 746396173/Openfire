{
  String[] protocols={"org/jitsi/impl/protocol/xmpp/XmppProtocolActivator"};
  String[] mockProtocols={"mock/MockActivator"};
  String[][] bundles={{"net/java/sip/communicator/impl/libjitsi/LibJitsiActivator"},{"net/java/sip/communicator/util/UtilActivator"},{"net/java/sip/communicator/impl/configuration/ConfigurationActivator"},{},{},{"net/java/sip/communicator/impl/credentialsstorage/CredentialsStorageActivator"},{"net/java/sip/communicator/impl/netaddr/NetaddrActivator"},{},{},{"net/java/sip/communicator/service/protocol/media/ProtocolMediaActivator"},{},useMockProtocols ? new String[]{"mock/media/MockMediaActivator"} : new String[]{},{},{},{"net/java/sip/communicator/service/protocol/ProtocolProviderActivator"},{"net/java/sip/communicator/plugin/reconnectplugin/ReconnectPluginActivator"},useMockProtocols ? mockProtocols : protocols,{"org/jitsi/jicofo/FocusBundleActivator"},{"org/jitsi/videobridge/log/LoggingBundleActivator"},useMockProtocols ? new String[]{"mock/MockMainMethodActivator"} : new String[]{}};
  return bundles;
}
