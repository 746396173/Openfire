{
  IQ vCardSet=new IQ(IQ.Type.set);
  vCardSet.setFrom("test@test.com");
  vCardSet.setChildElement("vCard","vcard-temp");
  final Element vCardElement=vCardSet.getChildElement();
  final VCardManager vCardManager=context.mock(VCardManager.class);
  final User user=context.mock(User.class);
  final IQvCardHandler vCardHandler=new IQvCardHandler();
  context.checking(new Expectations(){
{
      one(xmppServer).getVCardManager();
      will(returnValue(vCardManager));
      one(vCardManager).isReadOnly();
      will(returnValue(false));
      one(xmppServer).isLocal(new JID("test@test.com"));
      will(returnValue(true));
      try {
        one(userManager).getUser(with(a(String.class)));
      }
 catch (      UserNotFoundException e) {
        fail("User not found");
      }
      will(returnValue(user));
      one(user).getUsername();
      will(returnValue("test"));
      try {
        one(vCardManager).setVCard("test",vCardElement);
      }
 catch (      Exception e) {
        fail("Vcard exception");
      }
    }
  }
);
  vCardHandler.initialize(xmppServer);
  IQ result=vCardHandler.handleIQ(vCardSet);
  assertEquals(result.getType(),IQ.Type.result);
}
