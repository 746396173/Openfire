{
  super.sendRoot(xmlSerializer,version,"presence",Presence.AVAILABLE);
switch (show) {
case Presence.SHOW_XA:
    xmlSerializer.writeStartElement("jabber:client","show");
  xmlSerializer.writeCharacters("xa");
xmlSerializer.writeEndElement();
break;
case Presence.SHOW_AWAY:
xmlSerializer.writeStartElement("jabber:client","show");
xmlSerializer.writeCharacters("away");
xmlSerializer.writeEndElement();
break;
case Presence.SHOW_CHAT:
xmlSerializer.writeStartElement("jabber:client","show");
xmlSerializer.writeCharacters("chat");
xmlSerializer.writeEndElement();
break;
case Presence.SHOW_DND:
xmlSerializer.writeStartElement("jabber:client","show");
xmlSerializer.writeCharacters("dnd");
xmlSerializer.writeEndElement();
break;
case Presence.SHOW_INVISIBLE:
xmlSerializer.writeStartElement("jabber:client","show");
xmlSerializer.writeCharacters("invisible");
xmlSerializer.writeEndElement();
break;
}
if (status != null && status.length() > 0) {
xmlSerializer.writeStartElement("jabber:client","status");
xmlSerializer.writeCharacters(status);
xmlSerializer.writeEndElement();
}
if (priority != NO_PRIORITY) {
xmlSerializer.writeStartElement("jabber:client","priority");
xmlSerializer.writeCharacters(Integer.toString(priority));
xmlSerializer.writeEndElement();
}
Iterator frags=getFragments();
while (frags.hasNext()) {
((XMPPFragment)frags.next()).send(xmlSerializer,version);
}
xmlSerializer.writeEndElement();
}
