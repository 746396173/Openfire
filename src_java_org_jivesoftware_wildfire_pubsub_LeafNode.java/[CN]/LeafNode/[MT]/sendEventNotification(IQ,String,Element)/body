{
  PublishedItem newItem=null;
  if (isItemRequired()) {
synchronized (publishedItems) {
      if (itemID == null) {
        itemID=StringUtils.randomString(15);
      }
      while (itemsByID.get(itemID) != null) {
        itemID=StringUtils.randomString(15);
      }
      newItem=new PublishedItem(this,originalIQ.getFrom(),itemID,new Date());
      newItem.setPayload(payload);
      while (!publishedItems.isEmpty() && maxPublishedItems >= publishedItems.size()) {
        PublishedItem removedItem=publishedItems.remove(0);
        itemsByID.remove(removedItem.getID());
      }
      addPublishedItem(newItem);
    }
  }
  service.send(IQ.createResultIQ(originalIQ));
  Message message=new Message();
  Element event=message.addChildElement("event","http://jabber.org/protocol/pubsub#event");
  Element items=event.addElement("items");
  items.addAttribute("node",nodeID);
  if (newItem != null) {
    Element item=items.addElement("item");
    if (isItemRequired()) {
      item.addAttribute("id",newItem.getID());
    }
    if (deliverPayloads) {
      item.add(newItem.getPayload().createCopy());
    }
  }
  Set<NodeAffiliate> affiliatesToNotify=new HashSet<NodeAffiliate>(affiliates);
  for (  CollectionNode parentNode : getParents()) {
    for (    NodeSubscription subscription : parentNode.getSubscriptions()) {
      affiliatesToNotify.add(subscription.getAffiliate());
    }
  }
  for (  NodeAffiliate affiliate : affiliatesToNotify) {
    affiliate.sendEventNotification(message,this,newItem);
  }
}
