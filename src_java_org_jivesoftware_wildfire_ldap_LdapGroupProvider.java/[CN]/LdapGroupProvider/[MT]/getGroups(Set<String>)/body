{
  if (groupNames.isEmpty()) {
    return Collections.emptyList();
  }
  Collection<Group> groups=new ArrayList<Group>(groupNames.size());
  String filter=MessageFormat.format(manager.getGroupSearchFilter(),"*");
  Collection<String> searchFilters=new ArrayList<String>(groupNames.size());
  List<String> names=new ArrayList<String>(groupNames);
  int i=0;
  int range=10;
  do {
    List<String> subset=names.subList(i,Math.min(i + range,groupNames.size()));
    if (subset.size() == 1) {
      String searchFilter="(&" + filter + "("+ manager.getGroupNameField()+ "="+ subset.get(0)+ "))";
      searchFilters.add(searchFilter);
    }
 else {
      StringBuilder sb=new StringBuilder(300);
      sb.append("(&").append(filter).append("(|");
      for (      String groupName : subset) {
        sb.append("(").append(manager.getGroupNameField()).append("=");
        sb.append(groupName).append(")");
      }
      sb.append("))");
      searchFilters.add(sb.toString());
    }
    i=i + range;
  }
 while (groupNames.size() > i);
  for (  String searchFilter : searchFilters) {
    try {
      groups.addAll(populateGroups(searchForGroups(searchFilter,standardAttributes)));
    }
 catch (    NamingException e) {
      Log.error("Error populating groups from LDAP",e);
      return Collections.emptyList();
    }
  }
  return new ArrayList<Group>(groups);
}
