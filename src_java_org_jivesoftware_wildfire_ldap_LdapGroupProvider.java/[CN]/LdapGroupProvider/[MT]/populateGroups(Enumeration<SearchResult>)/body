{
  if (manager.isDebugEnabled()) {
    Log.debug("Starting to populate groups with users.");
  }
  DirContext ctx=null;
  try {
    TreeMap<String,Group> groups=new TreeMap<String,Group>();
    ctx=manager.getContext();
    SearchControls searchControls=new SearchControls();
    searchControls.setReturningAttributes(new String[]{manager.getUsernameField()});
    if (manager.isSubTreeSearch()) {
      searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);
    }
 else {
      searchControls.setSearchScope(SearchControls.ONELEVEL_SCOPE);
    }
    String userSearchFilter=MessageFormat.format(manager.getSearchFilter(),"*");
    XMPPServer server=XMPPServer.getInstance();
    String serverName=server.getServerInfo().getName();
    Pattern pattern=Pattern.compile("(?i)(^" + manager.getUsernameField() + "=)([^,]+)(.+)");
    while (answer.hasMoreElements()) {
      String name="";
      try {
        Attributes a=answer.nextElement().getAttributes();
        String description;
        try {
          name=((String)((a.get(manager.getGroupNameField())).get()));
          description=((String)((a.get(manager.getGroupDescriptionField())).get()));
        }
 catch (        Exception e) {
          description="";
        }
        TreeSet<JID> members=new TreeSet<JID>();
        Attribute member=a.get(manager.getGroupMemberField());
        NamingEnumeration ne=member.getAll();
        while (ne.hasMore()) {
          String username=(String)ne.next();
          if (!manager.isPosixMode()) {
            try {
              Matcher matcher=pattern.matcher(username);
              if (matcher.matches() && matcher.groupCount() == 3) {
                username=matcher.group(2);
              }
 else {
                LdapName ldapname=new LdapName(username);
                String ldapcn=ldapname.get(ldapname.size() - 1);
                String combinedFilter="(&(" + ldapcn + ")"+ userSearchFilter+ ")";
                NamingEnumeration usrAnswer=ctx.search("",combinedFilter,searchControls);
                if (usrAnswer.hasMoreElements()) {
                  username=(String)((SearchResult)usrAnswer.next()).getAttributes().get(manager.getUsernameField()).get();
                }
 else {
                  throw new UserNotFoundException();
                }
              }
            }
 catch (            Exception e) {
              if (manager.isDebugEnabled()) {
                Log.debug("Error populating user with DN: " + username,e);
              }
            }
          }
          try {
            JID userJID;
            if (!username.contains(serverName)) {
              String escapedUsername=JID.escapeNode(username);
              if (!escapedUsername.equals(username)) {
                userManager.getUser(escapedUsername);
              }
              userJID=server.createJID(escapedUsername,null);
            }
 else {
              userJID=new JID(username);
            }
            members.add(userJID);
          }
 catch (          UserNotFoundException e) {
            if (manager.isDebugEnabled()) {
              Log.debug("User not found: " + username);
            }
          }
        }
        if (manager.isDebugEnabled()) {
          Log.debug("Adding group \"" + name + "\" with "+ members.size()+ " members.");
        }
        Group g=new Group(name,description,members,new ArrayList<JID>());
        groups.put(name,g);
      }
 catch (      Exception e) {
        if (manager.isDebugEnabled()) {
          Log.debug("Error while populating group, " + name + ".",e);
        }
      }
    }
    if (manager.isDebugEnabled()) {
      Log.debug("Finished populating group(s) with users.");
    }
    return groups.values();
  }
  finally {
    try {
      if (ctx != null) {
        ctx.close();
      }
    }
 catch (    Exception e) {
    }
  }
}
