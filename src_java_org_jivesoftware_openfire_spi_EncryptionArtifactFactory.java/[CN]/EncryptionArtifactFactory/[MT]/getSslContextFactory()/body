{
  if (sslContextFactory != null) {
    return sslContextFactory;
  }
  Log.info("Creating new SslContextFactory instance");
  try {
    sslContextFactory=new SslContextFactory();
    sslContextFactory.setTrustStore(configuration.getTrustStore().getStore());
    sslContextFactory.setTrustStorePassword(new String(configuration.getTrustStore().getConfiguration().getPassword()));
    sslContextFactory.setKeyStore(configuration.getIdentityStore().getStore());
    sslContextFactory.setKeyStorePassword(new String(configuration.getIdentityStore().getConfiguration().getPassword()));
    if (configuration.getEncryptionProtocolsEnabled() != null && !configuration.getEncryptionProtocolsEnabled().isEmpty()) {
      sslContextFactory.setIncludeProtocols(configuration.getEncryptionProtocolsEnabled().toArray(new String[configuration.getEncryptionProtocolsEnabled().size()]));
    }
    sslContextFactory.setExcludeProtocols(configuration.getEncryptionProtocolsDisabled().toArray(new String[configuration.getEncryptionProtocolsDisabled().size()]));
    if (configuration.getCipherSuitesEnabled() != null && !configuration.getCipherSuitesEnabled().isEmpty()) {
      sslContextFactory.setIncludeCipherSuites(configuration.getCipherSuitesEnabled().toArray(new String[configuration.getCipherSuitesEnabled().size()]));
    }
    sslContextFactory.setExcludeCipherSuites(configuration.getCipherSuitesDisabled().toArray(new String[configuration.getCipherSuitesDisabled().size()]));
switch (configuration.getClientAuth()) {
case disabled:
      sslContextFactory.setNeedClientAuth(false);
    sslContextFactory.setWantClientAuth(false);
  break;
case wanted:
sslContextFactory.setNeedClientAuth(false);
sslContextFactory.setWantClientAuth(true);
break;
case needed:
sslContextFactory.setNeedClientAuth(true);
break;
}
return sslContextFactory;
}
 catch (RuntimeException ex) {
sslContextFactory=null;
throw ex;
}
}
