{
  final SSLContext sslContext=getSSLContext();
  final SSLEngine sslEngine=sslContext.createSSLEngine();
  final Set<String> protocolsEnabled=configuration.getEncryptionProtocolsEnabled();
  if (!protocolsEnabled.isEmpty()) {
    sslEngine.setEnabledProtocols(protocolsEnabled.toArray(new String[protocolsEnabled.size()]));
  }
 else {
    final Set<String> disabled=configuration.getEncryptionProtocolsDisabled();
    final ArrayList<String> supported=new ArrayList<>();
    for (    final String candidate : sslEngine.getSupportedProtocols()) {
      if (!disabled.contains(candidate)) {
        supported.add(candidate);
      }
    }
    sslEngine.setEnabledProtocols(supported.toArray(new String[supported.size()]));
  }
  final Set<String> cipherSuitesEnabled=configuration.getCipherSuitesEnabled();
  if (!cipherSuitesEnabled.isEmpty()) {
    sslEngine.setEnabledCipherSuites(cipherSuitesEnabled.toArray(new String[cipherSuitesEnabled.size()]));
  }
 else {
    final Set<String> disabled=configuration.getCipherSuitesDisabled();
    final ArrayList<String> supported=new ArrayList<>();
    for (    final String candidate : sslEngine.getSupportedCipherSuites()) {
      if (!disabled.contains(candidate)) {
        supported.add(candidate);
      }
    }
    sslEngine.setEnabledCipherSuites(supported.toArray(new String[supported.size()]));
  }
  return sslEngine;
}
