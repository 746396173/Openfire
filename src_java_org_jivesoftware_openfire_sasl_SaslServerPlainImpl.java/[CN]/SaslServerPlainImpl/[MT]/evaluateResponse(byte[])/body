{
  if (completed) {
    throw new IllegalStateException("PLAIN authentication already completed");
  }
  if (aborted) {
    throw new IllegalStateException("PLAIN authentication previously aborted due to error");
  }
  try {
    if (response.length != 0) {
      String data=new String(response,"UTF8");
      StringTokenizer tokens=new StringTokenizer(data,"\0");
      if (tokens.countTokens() > 2) {
        username=tokens.nextToken();
        principal=tokens.nextToken();
      }
 else {
        username=tokens.nextToken();
        principal=username;
      }
      password=tokens.nextToken();
      NameCallback ncb=new NameCallback("PLAIN authentication ID: ",principal);
      VerifyPasswordCallback vpcb=new VerifyPasswordCallback(password.toCharArray());
      cbh.handle(new Callback[]{ncb,vpcb});
      if (vpcb.getVerified()) {
        vpcb.clearPassword();
        AuthorizeCallback acb=new AuthorizeCallback(principal,username);
        cbh.handle(new Callback[]{acb});
        if (acb.isAuthorized()) {
          username=acb.getAuthorizationID();
          completed=true;
        }
 else {
          completed=true;
          username=null;
          throw new SaslException("PLAIN: user not authorized: " + principal);
        }
      }
 else {
        throw new SaslException("PLAIN: user not authorized: " + principal);
      }
    }
 else {
      if (counter++ > 1) {
        throw new SaslException("PLAIN expects a response");
      }
      return null;
    }
  }
 catch (  UnsupportedEncodingException e) {
    aborted=true;
    throw new SaslException("UTF8 not available on platform",e);
  }
catch (  UnsupportedCallbackException e) {
    aborted=true;
    throw new SaslException("PLAIN authentication failed",e);
  }
catch (  IOException e) {
    aborted=true;
    throw new SaslException("PLAIN authentication failed",e);
  }
  return null;
}
