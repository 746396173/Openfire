{
  if (alias == null || alias.trim().isEmpty()) {
    throw new IllegalArgumentException("Argument 'alias' cannot be null or an empty String.");
  }
  if (pemCertificates == null || pemCertificates.trim().isEmpty()) {
    throw new IllegalArgumentException("Argument 'pemCertificates' cannot be null or an empty String.");
  }
  if (pemPrivateKey == null || pemPrivateKey.trim().isEmpty()) {
    throw new IllegalArgumentException("Argument 'pemPrivateKey' cannot be null or an empty String.");
  }
  alias=alias.trim();
  pemCertificates=pemCertificates.trim();
  try {
    if (store.containsAlias(alias)) {
      throw new CertificateStoreConfigException("Certificate already exists for alias: " + alias);
    }
    final Collection<X509Certificate> certificates=CertificateManager.parseCertificates(pemCertificates);
    if (certificates.isEmpty()) {
      throw new CertificateStoreConfigException("No certificate was found in the input.");
    }
    final List<X509Certificate> ordered=CertificateUtils.order(certificates);
    if (!isForThisDomain(ordered.get(0))) {
      throw new CertificateStoreConfigException("The supplied certificate chain does not cover the domain of this XMPP service.");
    }
    final PrivateKey privateKey=CertificateManager.parsePrivateKey(pemPrivateKey,passPhrase);
    store.setKeyEntry(alias,privateKey,configuration.getPassword(),ordered.toArray(new X509Certificate[ordered.size()]));
    persist();
  }
 catch (  CertificateException|KeyStoreException|IOException e) {
    reload();
    throw new CertificateStoreConfigException("Unable to install a certificate into an identity store.",e);
  }
}
