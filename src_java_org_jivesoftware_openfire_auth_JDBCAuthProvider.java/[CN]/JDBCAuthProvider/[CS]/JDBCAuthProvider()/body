{
  JiveGlobals.migrateProperty("jdbcProvider.driver");
  JiveGlobals.migrateProperty("jdbcProvider.connectionString");
  JiveGlobals.migrateProperty("jdbcAuthProvider.passwordSQL");
  JiveGlobals.migrateProperty("jdbcAuthProvider.passwordType");
  JiveGlobals.migrateProperty("jdbcAuthProvider.setPasswordSQL");
  JiveGlobals.migrateProperty("jdbcAuthProvider.allowUpdate");
  JiveGlobals.migrateProperty("jdbcAuthProvider.bcrypt.cost");
  JiveGlobals.migrateProperty("jdbcAuthProvider.useConnectionProvider");
  JiveGlobals.migrateProperty("jdbcAuthProvider.acceptPreHashedPassword");
  useConnectionProvider=JiveGlobals.getBooleanProperty("jdbcAuthProvider.useConnectionProvider");
  acceptPreHashedPassword=JiveGlobals.getBooleanProperty("jdbcAuthProvider.acceptPreHashedPassword");
  if (!useConnectionProvider) {
    String jdbcDriver=JiveGlobals.getProperty("jdbcProvider.driver");
    try {
      Class.forName(jdbcDriver).newInstance();
    }
 catch (    Exception e) {
      Log.error("Unable to load JDBC driver: " + jdbcDriver,e);
      return;
    }
    connectionString=JiveGlobals.getProperty("jdbcProvider.connectionString");
  }
  passwordSQL=JiveGlobals.getProperty("jdbcAuthProvider.passwordSQL");
  setPasswordSQL=JiveGlobals.getProperty("jdbcAuthProvider.setPasswordSQL");
  allowUpdate=JiveGlobals.getBooleanProperty("jdbcAuthProvider.allowUpdate",false);
  setPasswordTypes(JiveGlobals.getProperty("jdbcAuthProvider.passwordType","plain"));
  bcryptCost=JiveGlobals.getIntProperty("jdbcAuthProvider.bcrypt.cost",-1);
  PropertyEventDispatcher.addListener(this);
}
