{
  final String prefix=IoServiceManager.class.getPackage().getName();
  try {
    IoServiceManager mbean=new IoServiceManager(acceptor);
    MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
    ObjectName name=new ObjectName(prefix + ":type=SocketAcceptor,name=" + suffix);
    mbs.registerMBean(mbean,name);
    mbean.startCollectingStats(JiveGlobals.getIntProperty("xmpp.socket.jmx.interval",60000));
  }
 catch (  JMException ex) {
    Log.warn("Failed to register MINA acceptor mbean (JMX): " + ex);
  }
  if (JiveGlobals.getBooleanProperty("xmpp.socket.jmx.sessions",false)) {
    acceptor.addListener(new IoServiceListener(){
      public void sessionCreated(      IoSession session){
        try {
          IoSessionManager mbean=new IoSessionManager(session);
          MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
          ObjectName name=new ObjectName(prefix + ":type=IoSession,name=" + session.getRemoteAddress().toString().replace(':','/'));
          mbs.registerMBean(mbean,name);
        }
 catch (        JMException ex) {
          Log.warn("Failed to register MINA session mbean (JMX): " + ex);
        }
      }
      public void sessionDestroyed(      IoSession session){
        try {
          ObjectName name=new ObjectName(prefix + ":type=IoSession,name=" + session.getRemoteAddress().toString().replace(':','/'));
          ManagementFactory.getPlatformMBeanServer().unregisterMBean(name);
        }
 catch (        JMException ex) {
          Log.warn("Failed to unregister MINA session mbean (JMX): " + ex);
        }
      }
      public void serviceActivated(      IoService is,      SocketAddress sa,      IoHandler ih,      IoServiceConfig isc){
      }
      public void serviceDeactivated(      IoService is,      SocketAddress sa,      IoHandler ih,      IoServiceConfig isc){
      }
    }
);
  }
}
