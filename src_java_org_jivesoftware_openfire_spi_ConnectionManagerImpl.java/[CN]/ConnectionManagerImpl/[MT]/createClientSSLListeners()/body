{
  if (isClientSSLListenerEnabled()) {
    int port=getClientSSLListenerPort();
    String algorithm=JiveGlobals.getProperty("xmpp.socket.ssl.algorithm","TLS");
    try {
      sslSocketAcceptor=buildSocketAcceptor("client_ssl");
      int eventThreads=JiveGlobals.getIntProperty("xmpp.client_ssl.processing.threads",16);
      ExecutorFilter executorFilter=new ExecutorFilter();
      ThreadPoolExecutor eventExecutor=(ThreadPoolExecutor)executorFilter.getExecutor();
      final ThreadFactory originalThreadFactory=eventExecutor.getThreadFactory();
      ThreadFactory newThreadFactory=new ThreadFactory(){
        private final AtomicInteger threadId=new AtomicInteger(0);
        public Thread newThread(        Runnable runnable){
          Thread t=originalThreadFactory.newThread(runnable);
          t.setName("Old SSL executor thread - " + threadId.incrementAndGet());
          t.setDaemon(true);
          return t;
        }
      }
;
      eventExecutor.setThreadFactory(newThreadFactory);
      eventExecutor.setCorePoolSize(eventThreads + 1);
      eventExecutor.setMaximumPoolSize(eventThreads + 1);
      eventExecutor.setKeepAliveTime(60,TimeUnit.SECONDS);
      sslSocketAcceptor.getDefaultConfig().setThreadModel(ThreadModel.MANUAL);
      sslSocketAcceptor.getFilterChain().addFirst("xmpp",new ProtocolCodecFilter(new XMPPCodecFactory()));
      sslSocketAcceptor.getFilterChain().addFirst("threadModel",executorFilter);
      sslSocketAcceptor.getFilterChain().addAfter("xmpp","outCap",new StalledSessionsFilter());
      SSLContext sslContext=SSLContext.getInstance(algorithm);
      KeyManagerFactory keyFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
      keyFactory.init(SSLConfig.getKeyStore(),SSLConfig.getKeyPassword().toCharArray());
      TrustManagerFactory trustFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
      trustFactory.init(SSLConfig.getc2sTrustStore());
      sslContext.init(keyFactory.getKeyManagers(),trustFactory.getTrustManagers(),new java.security.SecureRandom());
      SSLFilter sslFilter=new SSLFilter(sslContext);
      if (JiveGlobals.getProperty("xmpp.client.cert.policy","disabled").equals("needed")) {
        sslFilter.setNeedClientAuth(true);
      }
 else       if (JiveGlobals.getProperty("xmpp.client.cert.policy","disabled").equals("wanted")) {
        sslFilter.setWantClientAuth(true);
      }
      sslSocketAcceptor.getFilterChain().addFirst("tls",sslFilter);
    }
 catch (    Exception e) {
      System.err.println("Error starting SSL XMPP listener on port " + port + ": "+ e.getMessage());
      Log.error(LocaleUtils.getLocalizedString("admin.error.ssl"),e);
    }
  }
}
