{
  if (isClientSSLListenerEnabled()) {
    int port=getClientSSLListenerPort();
    try {
      int maxPoolSize=JiveGlobals.getIntProperty(ConnectionSettings.Client.MAX_THREADS_SSL,16);
      ExecutorFilter executorFilter=new ExecutorFilter(getCorePoolSize(maxPoolSize),maxPoolSize,60,TimeUnit.SECONDS);
      ThreadPoolExecutor eventExecutor=(ThreadPoolExecutor)executorFilter.getExecutor();
      ThreadFactory threadFactory=eventExecutor.getThreadFactory();
      threadFactory=new DelegatingThreadFactory("LegacySSL-Thread-",threadFactory);
      eventExecutor.setThreadFactory(threadFactory);
      sslSocketAcceptor=buildSocketAcceptor(CLIENT_SSL_SOCKET_ACCEPTOR_NAME);
      sslSocketAcceptor.getFilterChain().addFirst(EXECUTOR_FILTER_NAME,executorFilter);
      sslSocketAcceptor.getFilterChain().addAfter(EXECUTOR_FILTER_NAME,XMPP_CODEC_FILTER_NAME,new ProtocolCodecFilter(new XMPPCodecFactory()));
      sslSocketAcceptor.getFilterChain().addAfter(XMPP_CODEC_FILTER_NAME,CAPACITY_FILTER_NAME,new StalledSessionsFilter());
      int maxBufferSize=JiveGlobals.getIntProperty(ConnectionSettings.Client.MAX_READ_BUFFER_SSL,10 * MB);
      sslSocketAcceptor.getSessionConfig().setMaxReadBufferSize(maxBufferSize);
      Log.debug("Throttling read buffer for connections from sslSocketAcceptor={} to max={} bytes",sslSocketAcceptor,maxBufferSize);
      Connection.ClientAuth clientAuth;
      try {
        clientAuth=Connection.ClientAuth.valueOf(JiveGlobals.getProperty(ConnectionSettings.Client.AUTH_PER_CLIENTCERT_POLICY,"disabled"));
      }
 catch (      IllegalArgumentException e) {
        clientAuth=Connection.ClientAuth.disabled;
      }
      final SslFilter sslFilter=SSLConfig.getServerModeSslFilter(Purpose.SOCKET_C2S,clientAuth);
      sslSocketAcceptor.getFilterChain().addAfter(EXECUTOR_FILTER_NAME,TLS_FILTER_NAME,sslFilter);
    }
 catch (    Exception e) {
      System.err.println("Error starting SSL XMPP listener on port " + port + ": "+ e.getMessage());
      Log.error(LocaleUtils.getLocalizedString("admin.error.ssl"),e);
    }
  }
}
