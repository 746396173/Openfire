{
  List<String> duplicateUsers=new ArrayList<String>();
  UserManager userManager=UserManager.getInstance();
  RosterItemProvider rosterItemProvider=RosterItemProvider.getInstance();
  Map<String,List> rosterMap=new HashMap<String,List>();
  Element users=document.getRootElement();
  Iterator usersIter=users.elementIterator("User");
  while (usersIter.hasNext()) {
    Element user=(Element)usersIter.next();
    String userName=null;
    String password=null;
    String email=null;
    String name=null;
    List<RosterItem> rosterItems=new ArrayList<RosterItem>();
    Iterator userElements=user.elementIterator();
    while (userElements.hasNext()) {
      Element userElement=(Element)userElements.next();
      String nameElement=userElement.getName();
      if ("Jid".equals(nameElement)) {
        userName=userElement.getText();
      }
 else       if ("Password".equals(nameElement)) {
        password=userElement.getText();
      }
 else       if ("Name".equals(nameElement)) {
        name=userElement.getText();
      }
 else       if ("Email".equals(nameElement)) {
        email=userElement.getText();
      }
 else       if ("Roster".equals(nameElement)) {
        Iterator rosterIter=userElement.elementIterator("Item");
        while (rosterIter.hasNext()) {
          Element rosterElement=(Element)rosterIter.next();
          String jid=rosterElement.attributeValue("jid");
          String askstatus=rosterElement.attributeValue("askstatus");
          String recvstatus=rosterElement.attributeValue("recvstatus");
          String substatus=rosterElement.attributeValue("substatus");
          String nickname=rosterElement.attributeValue("name");
          List<String> groups=new ArrayList<String>();
          Iterator groupIter=rosterElement.elementIterator("Group");
          while (groupIter.hasNext()) {
            Element group=(Element)groupIter.next();
            groups.add(group.getText());
          }
          rosterItems.add(new RosterItem(new JID(jid),RosterItem.SubType.getTypeFromInt(Integer.parseInt(substatus)),RosterItem.AskType.getTypeFromInt(Integer.parseInt(askstatus)),RosterItem.RecvType.getTypeFromInt(Integer.parseInt(recvstatus)),nickname,groups));
        }
      }
    }
    if ((userName != null) && (password != null)) {
      try {
        userManager.createUser(userName,password,name,email);
        rosterMap.put(userName,rosterItems);
      }
 catch (      UserAlreadyExistsException e) {
        Log.info("User already exists: " + userName);
        duplicateUsers.add(userName);
      }
    }
  }
  Iterator i=rosterMap.keySet().iterator();
  while (i.hasNext()) {
    String userName=(String)i.next();
    Iterator rosterIter=rosterMap.get(userName).iterator();
    while (rosterIter.hasNext()) {
      RosterItem ri=(RosterItem)rosterIter.next();
      try {
        if (serverName.equals(ri.getJid().getDomain())) {
          userManager.getUser(removeDoman(ri.getJid()));
        }
        rosterItemProvider.createItem(userName,ri);
      }
 catch (      UserNotFoundException e) {
        Log.info("User '" + removeDoman(ri.getJid()) + "' not found, will not be added to '"+ userName+ "' roster.");
      }
catch (      UserAlreadyExistsException e) {
        Log.info("User '" + removeDoman(ri.getJid()) + "' already belongs to '"+ userName+ "' roster.");
      }
    }
  }
  return duplicateUsers;
}
