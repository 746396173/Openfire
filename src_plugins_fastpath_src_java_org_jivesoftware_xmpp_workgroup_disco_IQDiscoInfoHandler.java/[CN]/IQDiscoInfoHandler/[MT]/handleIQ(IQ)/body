{
  if (packet.getType() == IQ.Type.result) {
    List features=packet.getChildElement().elements("feature");
    for (Iterator it=features.iterator(); it.hasNext(); ) {
      Element feature=(Element)it.next();
      String variable=feature.attributeValue("var");
      if ("http://jabber.org/protocol/muc".equals(variable)) {
        workgroupManager.setMUCServiceName(packet.getFrom().getDomain());
      }
    }
    return null;
  }
  IQ reply=IQ.createResultIQ(packet);
  if (workgroupManager.getAddress().equals(packet.getTo())) {
    Element iq=packet.getChildElement();
    String node=iq.attributeValue("node");
    reply.setChildElement(iq.createCopy());
    Element queryElement=reply.getChildElement();
    if (node == null) {
      Element identity=queryElement.addElement("identity");
      identity.addAttribute("category","collaboration");
      identity.addAttribute("name","Fastpath");
      identity.addAttribute("type","workgroup");
      Element feature=queryElement.addElement("feature");
      feature.addAttribute("var","http://jabber.org/protocol/workgroup");
      feature=queryElement.addElement("feature");
      feature.addAttribute("var","http://jabber.org/protocol/disco#info");
      feature=queryElement.addElement("feature");
      feature.addAttribute("var","jabber:iq:version");
      feature=queryElement.addElement("feature");
      feature.addAttribute("var","http://jabber.org/protocol/commands");
      for (      DiscoFeaturesProvider provider : featuresProviders) {
        for (        String newFeature : provider.getFeatures()) {
          feature=queryElement.addElement("feature");
          feature.addAttribute("var",newFeature);
        }
      }
    }
 else     if ("http://jabber.org/protocol/commands".equals(node)) {
      Element identity=queryElement.addElement("identity");
      identity.addAttribute("category","collaboration");
      identity.addAttribute("name","Fastpath");
      identity.addAttribute("type","workgroup");
      Element feature=queryElement.addElement("feature");
      feature.addAttribute("var","http://jabber.org/protocol/disco#info");
      feature=queryElement.addElement("feature");
      feature.addAttribute("var","http://jabber.org/protocol/commands");
    }
 else {
      boolean found=false;
      for (      AdHocCommand command : commandManager.getCommands()) {
        if (node.equals(command.getCode())) {
          found=true;
          if (command.hasPermission(packet.getFrom())) {
            Element identity=queryElement.addElement("identity");
            identity.addAttribute("category","automation");
            identity.addAttribute("name",command.getLabel());
            identity.addAttribute("type","command-node");
            Element feature=queryElement.addElement("feature");
            feature.addAttribute("var","http://jabber.org/protocol/commands");
          }
 else {
            reply.setError(PacketError.Condition.forbidden);
          }
        }
      }
      if (!found) {
        reply.setError(PacketError.Condition.item_not_found);
      }
    }
  }
 else {
    try {
      Workgroup workgroup=workgroupManager.getWorkgroup(packet.getTo());
      Element iq=packet.getChildElement();
      reply.setChildElement(iq.createCopy());
      Element queryElement=reply.getChildElement();
      Element identity=queryElement.addElement("identity");
      identity.addAttribute("category","collaboration");
      identity.addAttribute("name",workgroup.getJID().getNode());
      identity.addAttribute("type","workgroup");
      Element feature=queryElement.addElement("feature");
      feature.addAttribute("var","http://jabber.org/protocol/disco#info");
      Element form=queryElement.addElement("x","jabber:x:data");
      form.addAttribute("type","result");
      Element field=form.addElement("field");
      field.addAttribute("var","FORM_TYPE");
      field.addAttribute("type","hidden");
      field.addElement("value").setText("http://jabber.org/protocol/workgroup#workgroupinfo");
      field=form.addElement("field");
      field.addAttribute("var","workgroup#description");
      field.addAttribute("label","Description");
      field.addElement("value").setText(workgroup.getDescription() == null ? "" : workgroup.getDescription());
      field=form.addElement("field");
      field.addAttribute("var","workgroup#online");
      field.addAttribute("label","Status");
      field.addElement("value").setText(workgroup.getStatus().name());
    }
 catch (    UserNotFoundException e) {
      reply.setChildElement(packet.getChildElement().createCopy());
      reply.setError(PacketError.Condition.item_not_found);
    }
  }
  return reply;
}
