{
  MUCEventDispatcher.addListener(this);
  transcriptUpdateTask=new TimerTask(){
    public void run(){
      if (roomEvents.isEmpty()) {
        return;
      }
      IQ packet=new IQ();
      packet.setTo(csComponentAddress);
      packet.setFrom(csMucDomain);
      packet.setType(IQ.Type.set);
      Element transcriptElement=packet.setChildElement("transcript-update","http://jivesoftware.com/clearspace");
      for (      ClearspaceMUCTranscriptEvent event : roomEvents) {
        Element mucEventElement=null;
switch (event.type) {
case messageReceived:
          mucEventElement=transcriptElement.addElement("message");
        mucEventElement.addElement("body").setText(event.content);
      break;
case occupantJoined:
    mucEventElement=transcriptElement.addElement("presence");
  break;
case occupantLeft:
mucEventElement=transcriptElement.addElement("presence");
mucEventElement.addAttribute("type","unavailable");
break;
case roomSubjectChanged:
mucEventElement=transcriptElement.addElement("subject-change");
mucEventElement.addElement("subject").setText(event.content);
break;
}
if (mucEventElement != null) {
if (event.user != null) {
mucEventElement.addAttribute("from",event.user.toBareJID());
}
if (event.roomJID != null) {
mucEventElement.addElement("roomjid").setText(event.roomJID.toBareJID());
}
mucEventElement.addElement("timestamp").setText(Long.toString(event.timestamp));
}
}
IQ result=ClearspaceManager.getInstance().query(packet,15000);
if (result == null) {
Log.warn("Did not get a reply from sending a transcript-update packet to Clearspace.");
return;
}
roomEvents.clear();
}
}
;
taskEngine.schedule(transcriptUpdateTask,FLUSH_PERIOD,FLUSH_PERIOD);
}
